
BTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000422c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080042ec  080042ec  000052ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004358  08004358  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004358  08004358  00005358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004360  08004360  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004360  08004360  00005360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004364  08004364  00005364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004368  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000010  08004378  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08004378  00006138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e222  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237b  00000000  00000000  0001425a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000165d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000991  00000000  00000000  00017238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015781  00000000  00000000  00017bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f575  00000000  00000000  0002d34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084d34  00000000  00000000  0003c8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c15f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  000c1638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c41d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042d4 	.word	0x080042d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080042d4 	.word	0x080042d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	@ (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b08b      	sub	sp, #44	@ 0x2c
 80004ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	2414      	movs	r4, #20
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	0018      	movs	r0, r3
 80004b4:	2314      	movs	r3, #20
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f003 fedf 	bl	800427c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b63      	ldr	r3, [pc, #396]	@ (800064c <MX_GPIO_Init+0x1a4>)
 80004c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c2:	4b62      	ldr	r3, [pc, #392]	@ (800064c <MX_GPIO_Init+0x1a4>)
 80004c4:	2104      	movs	r1, #4
 80004c6:	430a      	orrs	r2, r1
 80004c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ca:	4b60      	ldr	r3, [pc, #384]	@ (800064c <MX_GPIO_Init+0x1a4>)
 80004cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ce:	2204      	movs	r2, #4
 80004d0:	4013      	ands	r3, r2
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d6:	4b5d      	ldr	r3, [pc, #372]	@ (800064c <MX_GPIO_Init+0x1a4>)
 80004d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004da:	4b5c      	ldr	r3, [pc, #368]	@ (800064c <MX_GPIO_Init+0x1a4>)
 80004dc:	2180      	movs	r1, #128	@ 0x80
 80004de:	430a      	orrs	r2, r1
 80004e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e2:	4b5a      	ldr	r3, [pc, #360]	@ (800064c <MX_GPIO_Init+0x1a4>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004e6:	2280      	movs	r2, #128	@ 0x80
 80004e8:	4013      	ands	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b57      	ldr	r3, [pc, #348]	@ (800064c <MX_GPIO_Init+0x1a4>)
 80004f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004f2:	4b56      	ldr	r3, [pc, #344]	@ (800064c <MX_GPIO_Init+0x1a4>)
 80004f4:	2101      	movs	r1, #1
 80004f6:	430a      	orrs	r2, r1
 80004f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fa:	4b54      	ldr	r3, [pc, #336]	@ (800064c <MX_GPIO_Init+0x1a4>)
 80004fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004fe:	2201      	movs	r2, #1
 8000500:	4013      	ands	r3, r2
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b51      	ldr	r3, [pc, #324]	@ (800064c <MX_GPIO_Init+0x1a4>)
 8000508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800050a:	4b50      	ldr	r3, [pc, #320]	@ (800064c <MX_GPIO_Init+0x1a4>)
 800050c:	2102      	movs	r1, #2
 800050e:	430a      	orrs	r2, r1
 8000510:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000512:	4b4e      	ldr	r3, [pc, #312]	@ (800064c <MX_GPIO_Init+0x1a4>)
 8000514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000516:	2202      	movs	r2, #2
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CapteurUs1Trig_Pin|cd3_Pin, GPIO_PIN_RESET);
 800051e:	2382      	movs	r3, #130	@ 0x82
 8000520:	0159      	lsls	r1, r3, #5
 8000522:	23a0      	movs	r3, #160	@ 0xa0
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2200      	movs	r2, #0
 8000528:	0018      	movs	r0, r3
 800052a:	f000 ffca 	bl	80014c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CapteurUs2Trig_GPIO_Port, CapteurUs2Trig_Pin, GPIO_PIN_RESET);
 800052e:	2380      	movs	r3, #128	@ 0x80
 8000530:	015b      	lsls	r3, r3, #5
 8000532:	4847      	ldr	r0, [pc, #284]	@ (8000650 <MX_GPIO_Init+0x1a8>)
 8000534:	2200      	movs	r2, #0
 8000536:	0019      	movs	r1, r3
 8000538:	f000 ffc3 	bl	80014c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin|Mot1_Ctrl2_Pin|Mot2_Ctrl1_Pin|Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 800053c:	23f0      	movs	r3, #240	@ 0xf0
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4844      	ldr	r0, [pc, #272]	@ (8000654 <MX_GPIO_Init+0x1ac>)
 8000542:	2200      	movs	r2, #0
 8000544:	0019      	movs	r1, r3
 8000546:	f000 ffbc 	bl	80014c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2280      	movs	r2, #128	@ 0x80
 800054e:	0192      	lsls	r2, r2, #6
 8000550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2284      	movs	r2, #132	@ 0x84
 8000556:	0392      	lsls	r2, r2, #14
 8000558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000560:	193b      	adds	r3, r7, r4
 8000562:	4a3c      	ldr	r2, [pc, #240]	@ (8000654 <MX_GPIO_Init+0x1ac>)
 8000564:	0019      	movs	r1, r3
 8000566:	0010      	movs	r0, r2
 8000568:	f000 fe10 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CapteurUs1Echo_Pin|cd2_Pin;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2282      	movs	r2, #130	@ 0x82
 8000570:	0112      	lsls	r2, r2, #4
 8000572:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	22c4      	movs	r2, #196	@ 0xc4
 8000578:	0392      	lsls	r2, r2, #14
 800057a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	193a      	adds	r2, r7, r4
 8000584:	23a0      	movs	r3, #160	@ 0xa0
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	0011      	movs	r1, r2
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fdfe 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CapteurUs1Trig_Pin|cd3_Pin;
 8000590:	0021      	movs	r1, r4
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2282      	movs	r2, #130	@ 0x82
 8000596:	0152      	lsls	r2, r2, #5
 8000598:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	000c      	movs	r4, r1
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2201      	movs	r2, #1
 80005a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	193a      	adds	r2, r7, r4
 80005b0:	23a0      	movs	r3, #160	@ 0xa0
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	0011      	movs	r1, r2
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fde8 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CapteurUs2Trig_Pin;
 80005bc:	0021      	movs	r1, r4
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	0152      	lsls	r2, r2, #5
 80005c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	000c      	movs	r4, r1
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2201      	movs	r2, #1
 80005cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CapteurUs2Trig_GPIO_Port, &GPIO_InitStruct);
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000650 <MX_GPIO_Init+0x1a8>)
 80005de:	0019      	movs	r1, r3
 80005e0:	0010      	movs	r0, r2
 80005e2:	f000 fdd3 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CapteurUs2Echo_Pin;
 80005e6:	0021      	movs	r1, r4
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2280      	movs	r2, #128	@ 0x80
 80005ec:	0192      	lsls	r2, r2, #6
 80005ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f0:	000c      	movs	r4, r1
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CapteurUs2Echo_GPIO_Port, &GPIO_InitStruct);
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	4a13      	ldr	r2, [pc, #76]	@ (8000650 <MX_GPIO_Init+0x1a8>)
 8000602:	0019      	movs	r1, r3
 8000604:	0010      	movs	r0, r2
 8000606:	f000 fdc1 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Mot1_Ctrl1_Pin|Mot1_Ctrl2_Pin|Mot2_Ctrl1_Pin|Mot2_Ctrl2_Pin;
 800060a:	0021      	movs	r1, r4
 800060c:	187b      	adds	r3, r7, r1
 800060e:	22f0      	movs	r2, #240	@ 0xf0
 8000610:	0092      	lsls	r2, r2, #2
 8000612:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2201      	movs	r2, #1
 8000618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000626:	187b      	adds	r3, r7, r1
 8000628:	4a0a      	ldr	r2, [pc, #40]	@ (8000654 <MX_GPIO_Init+0x1ac>)
 800062a:	0019      	movs	r1, r3
 800062c:	0010      	movs	r0, r2
 800062e:	f000 fdad 	bl	800118c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	2007      	movs	r0, #7
 8000638:	f000 fcee 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800063c:	2007      	movs	r0, #7
 800063e:	f000 fd00 	bl	8001042 <HAL_NVIC_EnableIRQ>

}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b00b      	add	sp, #44	@ 0x2c
 8000648:	bd90      	pop	{r4, r7, pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	40021000 	.word	0x40021000
 8000650:	50000400 	.word	0x50000400
 8000654:	50000800 	.word	0x50000800

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fbc0 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f824 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f7ff ff20 	bl	80004a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000668:	f000 fb14 	bl	8000c94 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800066c:	f000 f9c6 	bl	80009fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000670:	f000 fa1a 	bl	8000aa8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <main+0x50>)
 8000676:	2108      	movs	r1, #8
 8000678:	0018      	movs	r0, r3
 800067a:	f001 ffe1 	bl	8002640 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <main+0x50>)
 8000680:	210c      	movs	r1, #12
 8000682:	0018      	movs	r0, r3
 8000684:	f001 ffdc 	bl	8002640 <HAL_TIM_PWM_Start>
  Motors_SetDirection(NEUTRAL);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f8ad 	bl	80007e8 <Motors_SetDirection>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //GenerePWM(50);
  while (1)
  {
	  Motors_SetDirection(BACKWARD);
 800068e:	2002      	movs	r0, #2
 8000690:	f000 f8aa 	bl	80007e8 <Motors_SetDirection>

	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 12345);

	  //Motors_Move(15,30);

	  Motors_SetSpeed(L_MOTOR, 150);
 8000694:	2196      	movs	r1, #150	@ 0x96
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f92a 	bl	80008f0 <Motors_SetSpeed>
	  Motors_SetSpeed(R_MOTOR, 150);
 800069c:	2196      	movs	r1, #150	@ 0x96
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 f926 	bl	80008f0 <Motors_SetSpeed>
	  Motors_SetDirection(BACKWARD);
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	e7f2      	b.n	800068e <main+0x36>
 80006a8:	2000006c 	.word	0x2000006c

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b09f      	sub	sp, #124	@ 0x7c
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	2440      	movs	r4, #64	@ 0x40
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0018      	movs	r0, r3
 80006b8:	2338      	movs	r3, #56	@ 0x38
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f003 fddd 	bl	800427c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c2:	232c      	movs	r3, #44	@ 0x2c
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	0018      	movs	r0, r3
 80006c8:	2314      	movs	r3, #20
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f003 fdd5 	bl	800427c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	0018      	movs	r0, r3
 80006d6:	2328      	movs	r3, #40	@ 0x28
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f003 fdce 	bl	800427c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <SystemClock_Config+0xc8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a24      	ldr	r2, [pc, #144]	@ (8000778 <SystemClock_Config+0xcc>)
 80006e6:	401a      	ands	r2, r3
 80006e8:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <SystemClock_Config+0xc8>)
 80006ea:	2180      	movs	r1, #128	@ 0x80
 80006ec:	0109      	lsls	r1, r1, #4
 80006ee:	430a      	orrs	r2, r1
 80006f0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f2:	0021      	movs	r1, r4
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2202      	movs	r2, #2
 80006f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2210      	movs	r2, #16
 8000704:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	187b      	adds	r3, r7, r1
 800070e:	0018      	movs	r0, r3
 8000710:	f000 ff10 	bl	8001534 <HAL_RCC_OscConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000718:	f000 f90c 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	212c      	movs	r1, #44	@ 0x2c
 800071e:	187b      	adds	r3, r7, r1
 8000720:	220f      	movs	r2, #15
 8000722:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2201      	movs	r2, #1
 8000728:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2100      	movs	r1, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f001 facb 	bl	8001cdc <HAL_RCC_ClockConfig>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800074a:	f000 f8f3 	bl	8000934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2202      	movs	r2, #2
 8000752:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fce1 	bl	8002124 <HAL_RCCEx_PeriphCLKConfig>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000766:	f000 f8e5 	bl	8000934 <Error_Handler>
  }
}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b01f      	add	sp, #124	@ 0x7c
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	40007000 	.word	0x40007000
 8000778:	ffffe7ff 	.word	0xffffe7ff

0800077c <HAL_GPIO_EXTI_Callback>:
	//Sortie Etat Bas
	HAL_GPIO_WritePin(CapteurUs1Trig_GPIO_Port, CapteurUs1Trig_Pin, GPIO_PIN_RESET);
}

//Callback lors d'interruptions sur EXTI 4:15
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	0002      	movs	r2, r0
 8000784:	1dbb      	adds	r3, r7, #6
 8000786:	801a      	strh	r2, [r3, #0]
    // Vérifie quel pin a déclenché l'interruption
    if (GPIO_Pin == CapteurUs1Echo_Pin) {
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	2b20      	cmp	r3, #32
 800078e:	d123      	bne.n	80007d8 <HAL_GPIO_EXTI_Callback+0x5c>

    	//Verif rising
        if (HAL_GPIO_ReadPin(CapteurUs1Echo_GPIO_Port, CapteurUs1Echo_Pin) == GPIO_PIN_SET){
 8000790:	23a0      	movs	r3, #160	@ 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	2120      	movs	r1, #32
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fe76 	bl	8001488 <HAL_GPIO_ReadPin>
 800079c:	0003      	movs	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d104      	bne.n	80007ac <HAL_GPIO_EXTI_Callback+0x30>
        	//Lancer le timer
        	HAL_TIM_Base_Start(&htim2);
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <HAL_GPIO_EXTI_Callback+0x64>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fe9b 	bl	80024e0 <HAL_TIM_Base_Start>
        	g_int_distCapteurUs1 = TIM2->CNT;
        	TIM2->CNT = 0;

        }
    }
}
 80007aa:	e015      	b.n	80007d8 <HAL_GPIO_EXTI_Callback+0x5c>
        else if (HAL_GPIO_ReadPin(CapteurUs1Echo_GPIO_Port, CapteurUs1Echo_Pin) == GPIO_PIN_RESET){
 80007ac:	23a0      	movs	r3, #160	@ 0xa0
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	2120      	movs	r1, #32
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fe68 	bl	8001488 <HAL_GPIO_ReadPin>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d10d      	bne.n	80007d8 <HAL_GPIO_EXTI_Callback+0x5c>
        	HAL_TIM_Base_Stop(&htim2);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_GPIO_EXTI_Callback+0x64>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fed8 	bl	8002574 <HAL_TIM_Base_Stop>
        	g_int_distCapteurUs1 = TIM2->CNT;
 80007c4:	2380      	movs	r3, #128	@ 0x80
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <HAL_GPIO_EXTI_Callback+0x68>)
 80007ce:	701a      	strb	r2, [r3, #0]
        	TIM2->CNT = 0;
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80007d8:	46c0      	nop			@ (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000002c 	.word	0x2000002c
 80007e4:	20000000 	.word	0x20000000

080007e8 <Motors_SetDirection>:
	    Motors_SetSpeed(L_MOTOR, l_int_Lspeed);
	    Motors_SetSpeed(R_MOTOR, l_int_Rspeed);

}

void Motors_SetDirection(TDirection x_direction){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	0002      	movs	r2, r0
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	701a      	strb	r2, [r3, #0]
	//Gerer les ports CTRL1 et CTRL2 des moteurs
	//Cest par ici qu'on met la securite du delai de changement de dircetion avec
	if(x_direction == NEUTRAL){
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d11a      	bne.n	8000832 <Motors_SetDirection+0x4a>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_RESET);
 80007fc:	4b3b      	ldr	r3, [pc, #236]	@ (80008ec <Motors_SetDirection+0x104>)
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	@ 0x40
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fe5d 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);
 8000808:	4b38      	ldr	r3, [pc, #224]	@ (80008ec <Motors_SetDirection+0x104>)
 800080a:	2200      	movs	r2, #0
 800080c:	2180      	movs	r1, #128	@ 0x80
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fe57 	bl	80014c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4834      	ldr	r0, [pc, #208]	@ (80008ec <Motors_SetDirection+0x104>)
 800081a:	2200      	movs	r2, #0
 800081c:	0019      	movs	r1, r3
 800081e:	f000 fe50 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4831      	ldr	r0, [pc, #196]	@ (80008ec <Motors_SetDirection+0x104>)
 8000828:	2200      	movs	r2, #0
 800082a:	0019      	movs	r1, r3
 800082c:	f000 fe49 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);

		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
	}
}
 8000830:	e057      	b.n	80008e2 <Motors_SetDirection+0xfa>
	else if(x_direction == FORWARD){
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d11a      	bne.n	8000870 <Motors_SetDirection+0x88>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_SET);
 800083a:	4b2c      	ldr	r3, [pc, #176]	@ (80008ec <Motors_SetDirection+0x104>)
 800083c:	2201      	movs	r2, #1
 800083e:	2140      	movs	r1, #64	@ 0x40
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fe3e 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);
 8000846:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <Motors_SetDirection+0x104>)
 8000848:	2200      	movs	r2, #0
 800084a:	2180      	movs	r1, #128	@ 0x80
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fe38 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
 8000852:	2380      	movs	r3, #128	@ 0x80
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4825      	ldr	r0, [pc, #148]	@ (80008ec <Motors_SetDirection+0x104>)
 8000858:	2200      	movs	r2, #0
 800085a:	0019      	movs	r1, r3
 800085c:	f000 fe31 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_SET);
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4821      	ldr	r0, [pc, #132]	@ (80008ec <Motors_SetDirection+0x104>)
 8000866:	2201      	movs	r2, #1
 8000868:	0019      	movs	r1, r3
 800086a:	f000 fe2a 	bl	80014c2 <HAL_GPIO_WritePin>
}
 800086e:	e038      	b.n	80008e2 <Motors_SetDirection+0xfa>
	else if(x_direction == BACKWARD){
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d11a      	bne.n	80008ae <Motors_SetDirection+0xc6>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_RESET);
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <Motors_SetDirection+0x104>)
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	@ 0x40
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fe1f 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_SET);
 8000884:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <Motors_SetDirection+0x104>)
 8000886:	2201      	movs	r2, #1
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fe19 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_SET);
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4815      	ldr	r0, [pc, #84]	@ (80008ec <Motors_SetDirection+0x104>)
 8000896:	2201      	movs	r2, #1
 8000898:	0019      	movs	r1, r3
 800089a:	f000 fe12 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 800089e:	2380      	movs	r3, #128	@ 0x80
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4812      	ldr	r0, [pc, #72]	@ (80008ec <Motors_SetDirection+0x104>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	0019      	movs	r1, r3
 80008a8:	f000 fe0b 	bl	80014c2 <HAL_GPIO_WritePin>
}
 80008ac:	e019      	b.n	80008e2 <Motors_SetDirection+0xfa>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_RESET);
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <Motors_SetDirection+0x104>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	2140      	movs	r1, #64	@ 0x40
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 fe04 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <Motors_SetDirection+0x104>)
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	@ 0x80
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fdfe 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
 80008c6:	2380      	movs	r3, #128	@ 0x80
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4808      	ldr	r0, [pc, #32]	@ (80008ec <Motors_SetDirection+0x104>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	0019      	movs	r1, r3
 80008d0:	f000 fdf7 	bl	80014c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 80008d4:	2380      	movs	r3, #128	@ 0x80
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <Motors_SetDirection+0x104>)
 80008da:	2200      	movs	r2, #0
 80008dc:	0019      	movs	r1, r3
 80008de:	f000 fdf0 	bl	80014c2 <HAL_GPIO_WritePin>
}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	50000800 	.word	0x50000800

080008f0 <Motors_SetSpeed>:
	//Arrete tout les moteurs
	Motors_SetSpeed(L_MOTOR,0);
	Motors_SetSpeed(R_MOTOR,0);
}

void Motors_SetSpeed(TNumMotor x_numMotor, uint8_t x_int_speed){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	0002      	movs	r2, r0
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	1dbb      	adds	r3, r7, #6
 80008fe:	1c0a      	adds	r2, r1, #0
 8000900:	701a      	strb	r2, [r3, #0]
	//Controle chaque moteur individuellement
	if(x_numMotor==L_MOTOR){
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d105      	bne.n	8000916 <Motors_SetSpeed+0x26>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, x_int_speed);
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <Motors_SetSpeed+0x40>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1dba      	adds	r2, r7, #6
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	else if(x_numMotor==R_MOTOR){
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, x_int_speed);
		}
}
 8000914:	e008      	b.n	8000928 <Motors_SetSpeed+0x38>
	else if(x_numMotor==R_MOTOR){
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d104      	bne.n	8000928 <Motors_SetSpeed+0x38>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, x_int_speed);
 800091e:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <Motors_SetSpeed+0x40>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	1dba      	adds	r2, r7, #6
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000006c 	.word	0x2000006c

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <HAL_MspInit+0x24>)
 8000946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_MspInit+0x24>)
 800094a:	2101      	movs	r1, #1
 800094c:	430a      	orrs	r2, r1
 800094e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <HAL_MspInit+0x24>)
 8000952:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000954:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <HAL_MspInit+0x24>)
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	0549      	lsls	r1, r1, #21
 800095a:	430a      	orrs	r2, r1
 800095c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 fa7a 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CapteurUs1Echo_Pin);
 800099e:	2020      	movs	r0, #32
 80009a0:	f000 fdac 	bl	80014fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(cd2_Pin);
 80009a4:	2380      	movs	r3, #128	@ 0x80
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fda7 	bl	80014fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009ae:	2380      	movs	r3, #128	@ 0x80
 80009b0:	019b      	lsls	r3, r3, #6
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fda2 	bl	80014fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */


  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <TIM2_IRQHandler+0x14>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fecc 	bl	8002764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	2000002c 	.word	0x2000002c

080009d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <USART2_IRQHandler+0x14>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f002 fc3c 	bl	800325c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	200000ac 	.word	0x200000ac

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	2308      	movs	r3, #8
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	0018      	movs	r0, r3
 8000a08:	2310      	movs	r3, #16
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f003 fc35 	bl	800427c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a12:	003b      	movs	r3, r7
 8000a14:	0018      	movs	r0, r3
 8000a16:	2308      	movs	r3, #8
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f003 fc2e 	bl	800427c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	@ (8000a9c <MX_TIM2_Init+0xa0>)
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	05d2      	lsls	r2, r2, #23
 8000a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 941;
 8000a28:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_TIM2_Init+0xa0>)
 8000a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa0 <MX_TIM2_Init+0xa4>)
 8000a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <MX_TIM2_Init+0xa0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a34:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_TIM2_Init+0xa0>)
 8000a36:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <MX_TIM2_Init+0xa8>)
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <MX_TIM2_Init+0xa0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_TIM2_Init+0xa0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_TIM2_Init+0xa0>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 fd09 	bl	8002460 <HAL_TIM_Base_Init>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a52:	f7ff ff6f 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	2108      	movs	r1, #8
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	0152      	lsls	r2, r2, #5
 8000a5e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a60:	187a      	adds	r2, r7, r1
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_TIM2_Init+0xa0>)
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 f82a 	bl	8002ac0 <HAL_TIM_ConfigClockSource>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a70:	f7ff ff60 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a74:	003b      	movs	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a80:	003a      	movs	r2, r7
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_TIM2_Init+0xa0>)
 8000a84:	0011      	movs	r1, r2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 fb36 	bl	80030f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a90:	f7ff ff50 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b006      	add	sp, #24
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000002c 	.word	0x2000002c
 8000aa0:	000003ad 	.word	0x000003ad
 8000aa4:	0000ffff 	.word	0x0000ffff

08000aa8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	2318      	movs	r3, #24
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f003 fbdf 	bl	800427c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abe:	2310      	movs	r3, #16
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f003 fbd7 	bl	800427c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ace:	003b      	movs	r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f003 fbd0 	bl	800427c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000adc:	4b36      	ldr	r3, [pc, #216]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000ade:	4a37      	ldr	r2, [pc, #220]	@ (8000bbc <MX_TIM3_Init+0x114>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12;
 8000ae2:	4b35      	ldr	r3, [pc, #212]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000ae4:	220c      	movs	r2, #12
 8000ae6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b33      	ldr	r3, [pc, #204]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000aee:	4b32      	ldr	r3, [pc, #200]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000af0:	22c8      	movs	r2, #200	@ 0xc8
 8000af2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b00:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 fcac 	bl	8002460 <HAL_TIM_Base_Init>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b0c:	f7ff ff12 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	2118      	movs	r1, #24
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2280      	movs	r2, #128	@ 0x80
 8000b16:	0152      	lsls	r2, r2, #5
 8000b18:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b1a:	187a      	adds	r2, r7, r1
 8000b1c:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f001 ffcd 	bl	8002ac0 <HAL_TIM_ConfigClockSource>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b2a:	f7ff ff03 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b2e:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 fd3d 	bl	80025b0 <HAL_TIM_PWM_Init>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b3a:	f7ff fefb 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2110      	movs	r1, #16
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b4c:	187a      	adds	r2, r7, r1
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f002 fad0 	bl	80030f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b5c:	f7ff feea 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2260      	movs	r2, #96	@ 0x60
 8000b64:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 150;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2296      	movs	r2, #150	@ 0x96
 8000b6a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b78:	0039      	movs	r1, r7
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fed8 	bl	8002934 <HAL_TIM_PWM_ConfigChannel>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000b88:	f7ff fed4 	bl	8000934 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 8000b8c:	003b      	movs	r3, r7
 8000b8e:	22c8      	movs	r2, #200	@ 0xc8
 8000b90:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b92:	0039      	movs	r1, r7
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 fecb 	bl	8002934 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8000ba2:	f7ff fec7 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ba6:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <MX_TIM3_Init+0x110>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 f835 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b00a      	add	sp, #40	@ 0x28
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	2000006c 	.word	0x2000006c
 8000bbc:	40000400 	.word	0x40000400

08000bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	05db      	lsls	r3, r3, #23
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d10e      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <HAL_TIM_Base_MspInit+0x50>)
 8000bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <HAL_TIM_Base_MspInit+0x50>)
 8000bda:	2101      	movs	r1, #1
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	200f      	movs	r0, #15
 8000be6:	f000 fa17 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bea:	200f      	movs	r0, #15
 8000bec:	f000 fa29 	bl	8001042 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000bf0:	e00a      	b.n	8000c08 <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM3)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <HAL_TIM_Base_MspInit+0x54>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d105      	bne.n	8000c08 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <HAL_TIM_Base_MspInit+0x50>)
 8000bfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <HAL_TIM_Base_MspInit+0x50>)
 8000c02:	2102      	movs	r1, #2
 8000c04:	430a      	orrs	r2, r1
 8000c06:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40000400 	.word	0x40000400

08000c18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	240c      	movs	r4, #12
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	0018      	movs	r0, r3
 8000c26:	2314      	movs	r3, #20
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f003 fb26 	bl	800427c <memset>
  if(timHandle->Instance==TIM3)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a14      	ldr	r2, [pc, #80]	@ (8000c88 <HAL_TIM_MspPostInit+0x70>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d121      	bne.n	8000c7e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_TIM_MspPostInit+0x74>)
 8000c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <HAL_TIM_MspPostInit+0x74>)
 8000c40:	2102      	movs	r1, #2
 8000c42:	430a      	orrs	r2, r1
 8000c44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <HAL_TIM_MspPostInit+0x74>)
 8000c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Mot1_Enable_Pin|Mot2_Enable_Pin;
 8000c52:	0021      	movs	r1, r4
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2203      	movs	r2, #3
 8000c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2202      	movs	r2, #2
 8000c70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <HAL_TIM_MspPostInit+0x78>)
 8000c76:	0019      	movs	r1, r3
 8000c78:	0010      	movs	r0, r2
 8000c7a:	f000 fa87 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b009      	add	sp, #36	@ 0x24
 8000c84:	bd90      	pop	{r4, r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	40000400 	.word	0x40000400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	50000400 	.word	0x50000400

08000c94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <MX_USART2_UART_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000ca0:	2296      	movs	r2, #150	@ 0x96
 8000ca2:	0192      	lsls	r2, r2, #6
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd6:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <MX_USART2_UART_Init+0x58>)
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f002 fa6b 	bl	80031b4 <HAL_UART_Init>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f7ff fe27 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200000ac 	.word	0x200000ac
 8000cf0:	40004400 	.word	0x40004400

08000cf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	240c      	movs	r4, #12
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	0018      	movs	r0, r3
 8000d02:	2314      	movs	r3, #20
 8000d04:	001a      	movs	r2, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	f003 fab8 	bl	800427c <memset>
  if(uartHandle->Instance==USART2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1c      	ldr	r2, [pc, #112]	@ (8000d84 <HAL_UART_MspInit+0x90>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d131      	bne.n	8000d7a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <HAL_UART_MspInit+0x94>)
 8000d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <HAL_UART_MspInit+0x94>)
 8000d1c:	2180      	movs	r1, #128	@ 0x80
 8000d1e:	0289      	lsls	r1, r1, #10
 8000d20:	430a      	orrs	r2, r1
 8000d22:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_UART_MspInit+0x94>)
 8000d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d28:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <HAL_UART_MspInit+0x94>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_UART_MspInit+0x94>)
 8000d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d34:	2201      	movs	r2, #1
 8000d36:	4013      	ands	r3, r2
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d3c:	0021      	movs	r1, r4
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	220c      	movs	r2, #12
 8000d42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2202      	movs	r2, #2
 8000d48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2203      	movs	r2, #3
 8000d54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2204      	movs	r2, #4
 8000d5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	187a      	adds	r2, r7, r1
 8000d5e:	23a0      	movs	r3, #160	@ 0xa0
 8000d60:	05db      	lsls	r3, r3, #23
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f000 fa11 	bl	800118c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	201c      	movs	r0, #28
 8000d70:	f000 f952 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d74:	201c      	movs	r0, #28
 8000d76:	f000 f964 	bl	8001042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b009      	add	sp, #36	@ 0x24
 8000d80:	bd90      	pop	{r4, r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40021000 	.word	0x40021000

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d8c:	480d      	ldr	r0, [pc, #52]	@ (8000dc4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d90:	f7ff fe2e 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	@ (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000dba:	f003 fa67 	bl	800428c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fc4b 	bl	8000658 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
   ldr   r0, =_estack
 8000dc4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dd0:	08004368 	.word	0x08004368
  ldr r2, =_sbss
 8000dd4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dd8:	20000138 	.word	0x20000138

08000ddc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_COMP_IRQHandler>
	...

08000de0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_Init+0x3c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <HAL_Init+0x3c>)
 8000df2:	2140      	movs	r1, #64	@ 0x40
 8000df4:	430a      	orrs	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f000 f811 	bl	8000e20 <HAL_InitTick>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e001      	b.n	8000e0e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e0a:	f7ff fd99 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <HAL_InitTick+0x5c>)
 8000e2a:	681c      	ldr	r4, [r3, #0]
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <HAL_InitTick+0x60>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	0019      	movs	r1, r3
 8000e32:	23fa      	movs	r3, #250	@ 0xfa
 8000e34:	0098      	lsls	r0, r3, #2
 8000e36:	f7ff f967 	bl	8000108 <__udivsi3>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	0020      	movs	r0, r4
 8000e40:	f7ff f962 	bl	8000108 <__udivsi3>
 8000e44:	0003      	movs	r3, r0
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 f90b 	bl	8001062 <HAL_SYSTICK_Config>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e00f      	b.n	8000e74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d80b      	bhi.n	8000e72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	425b      	negs	r3, r3
 8000e60:	2200      	movs	r2, #0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 f8d8 	bl	8001018 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_InitTick+0x64>)
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b003      	add	sp, #12
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	2000000c 	.word	0x2000000c
 8000e84:	20000008 	.word	0x20000008

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	001a      	movs	r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <HAL_IncTick+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	18d2      	adds	r2, r2, r3
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <HAL_IncTick+0x20>)
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	2000000c 	.word	0x2000000c
 8000ea8:	20000134 	.word	0x20000134

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	@ (8000ebc <HAL_GetTick+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	20000134 	.word	0x20000134

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ed2:	d809      	bhi.n	8000ee8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	001a      	movs	r2, r3
 8000eda:	231f      	movs	r3, #31
 8000edc:	401a      	ands	r2, r3
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <__NVIC_EnableIRQ+0x30>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4091      	lsls	r1, r2
 8000ee4:	000a      	movs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
  }
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	0002      	movs	r2, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f08:	d828      	bhi.n	8000f5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc8 <__NVIC_SetPriority+0xd4>)
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	33c0      	adds	r3, #192	@ 0xc0
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	589b      	ldr	r3, [r3, r2]
 8000f1a:	1dfa      	adds	r2, r7, #7
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	0011      	movs	r1, r2
 8000f20:	2203      	movs	r2, #3
 8000f22:	400a      	ands	r2, r1
 8000f24:	00d2      	lsls	r2, r2, #3
 8000f26:	21ff      	movs	r1, #255	@ 0xff
 8000f28:	4091      	lsls	r1, r2
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	43d2      	mvns	r2, r2
 8000f2e:	401a      	ands	r2, r3
 8000f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	019b      	lsls	r3, r3, #6
 8000f36:	22ff      	movs	r2, #255	@ 0xff
 8000f38:	401a      	ands	r2, r3
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	2303      	movs	r3, #3
 8000f42:	4003      	ands	r3, r0
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f48:	481f      	ldr	r0, [pc, #124]	@ (8000fc8 <__NVIC_SetPriority+0xd4>)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	430a      	orrs	r2, r1
 8000f54:	33c0      	adds	r3, #192	@ 0xc0
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f5a:	e031      	b.n	8000fc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <__NVIC_SetPriority+0xd8>)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0019      	movs	r1, r3
 8000f64:	230f      	movs	r3, #15
 8000f66:	400b      	ands	r3, r1
 8000f68:	3b08      	subs	r3, #8
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3306      	adds	r3, #6
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	3304      	adds	r3, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	400a      	ands	r2, r1
 8000f80:	00d2      	lsls	r2, r2, #3
 8000f82:	21ff      	movs	r1, #255	@ 0xff
 8000f84:	4091      	lsls	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	43d2      	mvns	r2, r2
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	22ff      	movs	r2, #255	@ 0xff
 8000f94:	401a      	ands	r2, r3
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	4003      	ands	r3, r0
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <__NVIC_SetPriority+0xd8>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	001c      	movs	r4, r3
 8000fac:	230f      	movs	r3, #15
 8000fae:	4023      	ands	r3, r4
 8000fb0:	3b08      	subs	r3, #8
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	3306      	adds	r3, #6
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	18c3      	adds	r3, r0, r3
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	46c0      	nop			@ (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b003      	add	sp, #12
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	1e5a      	subs	r2, r3, #1
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	045b      	lsls	r3, r3, #17
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d301      	bcc.n	8000fe8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e010      	b.n	800100a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <SysTick_Config+0x44>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	3a01      	subs	r2, #1
 8000fee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff ff7c 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <SysTick_Config+0x44>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <SysTick_Config+0x44>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	210f      	movs	r1, #15
 8001024:	187b      	adds	r3, r7, r1
 8001026:	1c02      	adds	r2, r0, #0
 8001028:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	187b      	adds	r3, r7, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>
}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	0002      	movs	r2, r0
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ff33 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ffaf 	bl	8000fd0 <SysTick_Config>
 8001072:	0003      	movs	r3, r0
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2225      	movs	r2, #37	@ 0x25
 8001090:	5c9b      	ldrb	r3, [r3, r2]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d008      	beq.n	80010aa <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2204      	movs	r2, #4
 800109c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2224      	movs	r2, #36	@ 0x24
 80010a2:	2100      	movs	r1, #0
 80010a4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e024      	b.n	80010f4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	210e      	movs	r1, #14
 80010b6:	438a      	bics	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2101      	movs	r1, #1
 80010c6:	438a      	bics	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	221c      	movs	r2, #28
 80010d0:	401a      	ands	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	2101      	movs	r1, #1
 80010d8:	4091      	lsls	r1, r2
 80010da:	000a      	movs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2225      	movs	r2, #37	@ 0x25
 80010e2:	2101      	movs	r1, #1
 80010e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2224      	movs	r2, #36	@ 0x24
 80010ea:	2100      	movs	r1, #0
 80010ec:	5499      	strb	r1, [r3, r2]

    return status;
 80010ee:	230f      	movs	r3, #15
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b004      	add	sp, #16
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001104:	210f      	movs	r1, #15
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2225      	movs	r2, #37	@ 0x25
 8001110:	5c9b      	ldrb	r3, [r3, r2]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d006      	beq.n	8001126 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2204      	movs	r2, #4
 800111c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e02a      	b.n	800117c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	210e      	movs	r1, #14
 8001132:	438a      	bics	r2, r1
 8001134:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	438a      	bics	r2, r1
 8001144:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	221c      	movs	r2, #28
 800114c:	401a      	ands	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	2101      	movs	r1, #1
 8001154:	4091      	lsls	r1, r2
 8001156:	000a      	movs	r2, r1
 8001158:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2225      	movs	r2, #37	@ 0x25
 800115e:	2101      	movs	r1, #1
 8001160:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2224      	movs	r2, #36	@ 0x24
 8001166:	2100      	movs	r1, #0
 8001168:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800116e:	2b00      	cmp	r3, #0
 8001170:	d004      	beq.n	800117c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	0010      	movs	r0, r2
 800117a:	4798      	blx	r3
    }
  }
  return status;
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	781b      	ldrb	r3, [r3, #0]
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	b004      	add	sp, #16
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011a2:	e155      	b.n	8001450 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4091      	lsls	r1, r2
 80011ae:	000a      	movs	r2, r1
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d100      	bne.n	80011bc <HAL_GPIO_Init+0x30>
 80011ba:	e146      	b.n	800144a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d005      	beq.n	80011d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d130      	bne.n	8001236 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	409a      	lsls	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800120a:	2201      	movs	r2, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	2201      	movs	r2, #1
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2203      	movs	r2, #3
 800123c:	4013      	ands	r3, r2
 800123e:	2b03      	cmp	r3, #3
 8001240:	d017      	beq.n	8001272 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2203      	movs	r2, #3
 8001278:	4013      	ands	r3, r2
 800127a:	2b02      	cmp	r3, #2
 800127c:	d123      	bne.n	80012c6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	58d3      	ldr	r3, [r2, r3]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2207      	movs	r2, #7
 8001290:	4013      	ands	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2107      	movs	r1, #7
 80012aa:	400b      	ands	r3, r1
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	6939      	ldr	r1, [r7, #16]
 80012c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	401a      	ands	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	23c0      	movs	r3, #192	@ 0xc0
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d100      	bne.n	8001308 <HAL_GPIO_Init+0x17c>
 8001306:	e0a0      	b.n	800144a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001308:	4b57      	ldr	r3, [pc, #348]	@ (8001468 <HAL_GPIO_Init+0x2dc>)
 800130a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800130c:	4b56      	ldr	r3, [pc, #344]	@ (8001468 <HAL_GPIO_Init+0x2dc>)
 800130e:	2101      	movs	r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001314:	4a55      	ldr	r2, [pc, #340]	@ (800146c <HAL_GPIO_Init+0x2e0>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	589b      	ldr	r3, [r3, r2]
 8001320:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2203      	movs	r2, #3
 8001326:	4013      	ands	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	409a      	lsls	r2, r3
 800132e:	0013      	movs	r3, r2
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	23a0      	movs	r3, #160	@ 0xa0
 800133c:	05db      	lsls	r3, r3, #23
 800133e:	429a      	cmp	r2, r3
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x1f6>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4a      	ldr	r2, [pc, #296]	@ (8001470 <HAL_GPIO_Init+0x2e4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x1f2>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a49      	ldr	r2, [pc, #292]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x1ee>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a48      	ldr	r2, [pc, #288]	@ (8001478 <HAL_GPIO_Init+0x2ec>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x1ea>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a47      	ldr	r2, [pc, #284]	@ (800147c <HAL_GPIO_Init+0x2f0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x1e6>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a46      	ldr	r2, [pc, #280]	@ (8001480 <HAL_GPIO_Init+0x2f4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x1e2>
 800136a:	2305      	movs	r3, #5
 800136c:	e00a      	b.n	8001384 <HAL_GPIO_Init+0x1f8>
 800136e:	2306      	movs	r3, #6
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x1f8>
 8001372:	2304      	movs	r3, #4
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x1f8>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x1f8>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x1f8>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x1f8>
 8001382:	2300      	movs	r3, #0
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	2103      	movs	r1, #3
 8001388:	400a      	ands	r2, r1
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	@ (800146c <HAL_GPIO_Init+0x2e0>)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43da      	mvns	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	2380      	movs	r3, #128	@ 0x80
 80013b8:	035b      	lsls	r3, r3, #13
 80013ba:	4013      	ands	r3, r2
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43da      	mvns	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	039b      	lsls	r3, r3, #14
 80013e4:	4013      	ands	r3, r2
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013f0:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80013f6:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	4013      	ands	r3, r2
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43da      	mvns	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	025b      	lsls	r3, r3, #9
 8001438:	4013      	ands	r3, r2
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	40da      	lsrs	r2, r3
 8001458:	1e13      	subs	r3, r2, #0
 800145a:	d000      	beq.n	800145e <HAL_GPIO_Init+0x2d2>
 800145c:	e6a2      	b.n	80011a4 <HAL_GPIO_Init+0x18>
  }
}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	46c0      	nop			@ (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b006      	add	sp, #24
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	50000400 	.word	0x50000400
 8001474:	50000800 	.word	0x50000800
 8001478:	50000c00 	.word	0x50000c00
 800147c:	50001000 	.word	0x50001000
 8001480:	50001c00 	.word	0x50001c00
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	000a      	movs	r2, r1
 8001492:	1cbb      	adds	r3, r7, #2
 8001494:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	1cba      	adds	r2, r7, #2
 800149c:	8812      	ldrh	r2, [r2, #0]
 800149e:	4013      	ands	r3, r2
 80014a0:	d004      	beq.n	80014ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014a2:	230f      	movs	r3, #15
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e003      	b.n	80014b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ac:	230f      	movs	r3, #15
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	781b      	ldrb	r3, [r3, #0]
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	0008      	movs	r0, r1
 80014cc:	0011      	movs	r1, r2
 80014ce:	1cbb      	adds	r3, r7, #2
 80014d0:	1c02      	adds	r2, r0, #0
 80014d2:	801a      	strh	r2, [r3, #0]
 80014d4:	1c7b      	adds	r3, r7, #1
 80014d6:	1c0a      	adds	r2, r1, #0
 80014d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014da:	1c7b      	adds	r3, r7, #1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	1cbb      	adds	r3, r7, #2
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014ea:	e003      	b.n	80014f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014ec:	1cbb      	adds	r3, r7, #2
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014f4:	46c0      	nop			@ (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	0002      	movs	r2, r0
 8001504:	1dbb      	adds	r3, r7, #6
 8001506:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	1dba      	adds	r2, r7, #6
 800150e:	8812      	ldrh	r2, [r2, #0]
 8001510:	4013      	ands	r3, r2
 8001512:	d008      	beq.n	8001526 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001516:	1dba      	adds	r2, r7, #6
 8001518:	8812      	ldrh	r2, [r2, #0]
 800151a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800151c:	1dbb      	adds	r3, r7, #6
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff f92b 	bl	800077c <HAL_GPIO_EXTI_Callback>
  }
}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			@ (mov r8, r8)
 8001530:	40010400 	.word	0x40010400

08001534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001534:	b5b0      	push	{r4, r5, r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	f000 fbbf 	bl	8001cc6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001548:	4bc9      	ldr	r3, [pc, #804]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	220c      	movs	r2, #12
 800154e:	4013      	ands	r3, r2
 8001550:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001552:	4bc7      	ldr	r3, [pc, #796]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2201      	movs	r2, #1
 8001564:	4013      	ands	r3, r2
 8001566:	d100      	bne.n	800156a <HAL_RCC_OscConfig+0x36>
 8001568:	e07e      	b.n	8001668 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	2b08      	cmp	r3, #8
 800156e:	d007      	beq.n	8001580 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	2b0c      	cmp	r3, #12
 8001574:	d112      	bne.n	800159c <HAL_RCC_OscConfig+0x68>
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	429a      	cmp	r2, r3
 800157e:	d10d      	bne.n	800159c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	4bbb      	ldr	r3, [pc, #748]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x5a>
 800158c:	e06b      	b.n	8001666 <HAL_RCC_OscConfig+0x132>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d167      	bne.n	8001666 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	f000 fb95 	bl	8001cc6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d107      	bne.n	80015b8 <HAL_RCC_OscConfig+0x84>
 80015a8:	4bb1      	ldr	r3, [pc, #708]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4bb0      	ldr	r3, [pc, #704]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	0249      	lsls	r1, r1, #9
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e027      	b.n	8001608 <HAL_RCC_OscConfig+0xd4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	23a0      	movs	r3, #160	@ 0xa0
 80015be:	02db      	lsls	r3, r3, #11
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d10e      	bne.n	80015e2 <HAL_RCC_OscConfig+0xae>
 80015c4:	4baa      	ldr	r3, [pc, #680]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4ba9      	ldr	r3, [pc, #676]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80015ca:	2180      	movs	r1, #128	@ 0x80
 80015cc:	02c9      	lsls	r1, r1, #11
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4ba7      	ldr	r3, [pc, #668]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4ba6      	ldr	r3, [pc, #664]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80015d8:	2180      	movs	r1, #128	@ 0x80
 80015da:	0249      	lsls	r1, r1, #9
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e012      	b.n	8001608 <HAL_RCC_OscConfig+0xd4>
 80015e2:	4ba3      	ldr	r3, [pc, #652]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4ba2      	ldr	r3, [pc, #648]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80015e8:	49a2      	ldr	r1, [pc, #648]	@ (8001874 <HAL_RCC_OscConfig+0x340>)
 80015ea:	400a      	ands	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	4ba0      	ldr	r3, [pc, #640]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	025b      	lsls	r3, r3, #9
 80015f6:	4013      	ands	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4b9c      	ldr	r3, [pc, #624]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b9b      	ldr	r3, [pc, #620]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001602:	499d      	ldr	r1, [pc, #628]	@ (8001878 <HAL_RCC_OscConfig+0x344>)
 8001604:	400a      	ands	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d015      	beq.n	800163c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fc4c 	bl	8000eac <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001618:	e009      	b.n	800162e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161a:	f7ff fc47 	bl	8000eac <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b64      	cmp	r3, #100	@ 0x64
 8001626:	d902      	bls.n	800162e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	f000 fb4c 	bl	8001cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800162e:	4b90      	ldr	r3, [pc, #576]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	@ 0x80
 8001634:	029b      	lsls	r3, r3, #10
 8001636:	4013      	ands	r3, r2
 8001638:	d0ef      	beq.n	800161a <HAL_RCC_OscConfig+0xe6>
 800163a:	e015      	b.n	8001668 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fc36 	bl	8000eac <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001646:	f7ff fc31 	bl	8000eac <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b64      	cmp	r3, #100	@ 0x64
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e336      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001658:	4b85      	ldr	r3, [pc, #532]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	029b      	lsls	r3, r3, #10
 8001660:	4013      	ands	r3, r2
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x112>
 8001664:	e000      	b.n	8001668 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001666:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2202      	movs	r2, #2
 800166e:	4013      	ands	r3, r2
 8001670:	d100      	bne.n	8001674 <HAL_RCC_OscConfig+0x140>
 8001672:	e099      	b.n	80017a8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	2220      	movs	r2, #32
 800167e:	4013      	ands	r3, r2
 8001680:	d009      	beq.n	8001696 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001682:	4b7b      	ldr	r3, [pc, #492]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b7a      	ldr	r3, [pc, #488]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001688:	2120      	movs	r1, #32
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	2220      	movs	r2, #32
 8001692:	4393      	bics	r3, r2
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d13e      	bne.n	8001720 <HAL_RCC_OscConfig+0x1ec>
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d13b      	bne.n	8001720 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80016a8:	4b71      	ldr	r3, [pc, #452]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2204      	movs	r2, #4
 80016ae:	4013      	ands	r3, r2
 80016b0:	d004      	beq.n	80016bc <HAL_RCC_OscConfig+0x188>
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e304      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a6e      	ldr	r2, [pc, #440]	@ (800187c <HAL_RCC_OscConfig+0x348>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	021a      	lsls	r2, r3, #8
 80016cc:	4b68      	ldr	r3, [pc, #416]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80016ce:	430a      	orrs	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016d2:	4b67      	ldr	r3, [pc, #412]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2209      	movs	r2, #9
 80016d8:	4393      	bics	r3, r2
 80016da:	0019      	movs	r1, r3
 80016dc:	4b64      	ldr	r3, [pc, #400]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80016de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e4:	f000 fc42 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 80016e8:	0001      	movs	r1, r0
 80016ea:	4b61      	ldr	r3, [pc, #388]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	220f      	movs	r2, #15
 80016f2:	4013      	ands	r3, r2
 80016f4:	4a62      	ldr	r2, [pc, #392]	@ (8001880 <HAL_RCC_OscConfig+0x34c>)
 80016f6:	5cd3      	ldrb	r3, [r2, r3]
 80016f8:	000a      	movs	r2, r1
 80016fa:	40da      	lsrs	r2, r3
 80016fc:	4b61      	ldr	r3, [pc, #388]	@ (8001884 <HAL_RCC_OscConfig+0x350>)
 80016fe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001700:	4b61      	ldr	r3, [pc, #388]	@ (8001888 <HAL_RCC_OscConfig+0x354>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2513      	movs	r5, #19
 8001706:	197c      	adds	r4, r7, r5
 8001708:	0018      	movs	r0, r3
 800170a:	f7ff fb89 	bl	8000e20 <HAL_InitTick>
 800170e:	0003      	movs	r3, r0
 8001710:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001712:	197b      	adds	r3, r7, r5
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d046      	beq.n	80017a8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800171a:	197b      	adds	r3, r7, r5
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	e2d2      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	2b00      	cmp	r3, #0
 8001724:	d027      	beq.n	8001776 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001726:	4b52      	ldr	r3, [pc, #328]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2209      	movs	r2, #9
 800172c:	4393      	bics	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	4b4f      	ldr	r3, [pc, #316]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fbb8 	bl	8000eac <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001742:	f7ff fbb3 	bl	8000eac <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e2b8      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001754:	4b46      	ldr	r3, [pc, #280]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2204      	movs	r2, #4
 800175a:	4013      	ands	r3, r2
 800175c:	d0f1      	beq.n	8001742 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4b44      	ldr	r3, [pc, #272]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a46      	ldr	r2, [pc, #280]	@ (800187c <HAL_RCC_OscConfig+0x348>)
 8001764:	4013      	ands	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	021a      	lsls	r2, r3, #8
 800176e:	4b40      	ldr	r3, [pc, #256]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001770:	430a      	orrs	r2, r1
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	e018      	b.n	80017a8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001776:	4b3e      	ldr	r3, [pc, #248]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 800177c:	2101      	movs	r1, #1
 800177e:	438a      	bics	r2, r1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fb93 	bl	8000eac <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fb8e 	bl	8000eac <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e293      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800179e:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
 80017a6:	d1f1      	bne.n	800178c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2210      	movs	r2, #16
 80017ae:	4013      	ands	r3, r2
 80017b0:	d100      	bne.n	80017b4 <HAL_RCC_OscConfig+0x280>
 80017b2:	e0a2      	b.n	80018fa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d140      	bne.n	800183c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4013      	ands	r3, r2
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x29e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e279      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d2:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a2d      	ldr	r2, [pc, #180]	@ (800188c <HAL_RCC_OscConfig+0x358>)
 80017d8:	4013      	ands	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017e0:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e6:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	0a19      	lsrs	r1, r3, #8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	061a      	lsls	r2, r3, #24
 80017f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	0b5b      	lsrs	r3, r3, #13
 8001800:	3301      	adds	r3, #1
 8001802:	2280      	movs	r2, #128	@ 0x80
 8001804:	0212      	lsls	r2, r2, #8
 8001806:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	210f      	movs	r1, #15
 8001810:	400b      	ands	r3, r1
 8001812:	491b      	ldr	r1, [pc, #108]	@ (8001880 <HAL_RCC_OscConfig+0x34c>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001818:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_RCC_OscConfig+0x350>)
 800181a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800181c:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_RCC_OscConfig+0x354>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2513      	movs	r5, #19
 8001822:	197c      	adds	r4, r7, r5
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff fafb 	bl	8000e20 <HAL_InitTick>
 800182a:	0003      	movs	r3, r0
 800182c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800182e:	197b      	adds	r3, r7, r5
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d061      	beq.n	80018fa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001836:	197b      	adds	r3, r7, r5
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	e244      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d040      	beq.n	80018c6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001844:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 800184a:	2180      	movs	r1, #128	@ 0x80
 800184c:	0049      	lsls	r1, r1, #1
 800184e:	430a      	orrs	r2, r1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fb2b 	bl	8000eac <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800185a:	e019      	b.n	8001890 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185c:	f7ff fb26 	bl	8000eac <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d912      	bls.n	8001890 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e22b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	40021000 	.word	0x40021000
 8001874:	fffeffff 	.word	0xfffeffff
 8001878:	fffbffff 	.word	0xfffbffff
 800187c:	ffffe0ff 	.word	0xffffe0ff
 8001880:	080042ec 	.word	0x080042ec
 8001884:	20000004 	.word	0x20000004
 8001888:	20000008 	.word	0x20000008
 800188c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001890:	4bca      	ldr	r3, [pc, #808]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4013      	ands	r3, r2
 800189a:	d0df      	beq.n	800185c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800189c:	4bc7      	ldr	r3, [pc, #796]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4ac7      	ldr	r2, [pc, #796]	@ (8001bc0 <HAL_RCC_OscConfig+0x68c>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018aa:	4bc4      	ldr	r3, [pc, #784]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 80018ac:	430a      	orrs	r2, r1
 80018ae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b0:	4bc2      	ldr	r3, [pc, #776]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	0a19      	lsrs	r1, r3, #8
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	061a      	lsls	r2, r3, #24
 80018be:	4bbf      	ldr	r3, [pc, #764]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	e019      	b.n	80018fa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018c6:	4bbd      	ldr	r3, [pc, #756]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4bbc      	ldr	r3, [pc, #752]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 80018cc:	49bd      	ldr	r1, [pc, #756]	@ (8001bc4 <HAL_RCC_OscConfig+0x690>)
 80018ce:	400a      	ands	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff faeb 	bl	8000eac <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018dc:	f7ff fae6 	bl	8000eac <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e1eb      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018ee:	4bb3      	ldr	r3, [pc, #716]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	@ 0x80
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2208      	movs	r2, #8
 8001900:	4013      	ands	r3, r2
 8001902:	d036      	beq.n	8001972 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d019      	beq.n	8001940 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190c:	4bab      	ldr	r3, [pc, #684]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 800190e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001910:	4baa      	ldr	r3, [pc, #680]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001912:	2101      	movs	r1, #1
 8001914:	430a      	orrs	r2, r1
 8001916:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7ff fac8 	bl	8000eac <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001922:	f7ff fac3 	bl	8000eac <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1c8      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001934:	4ba1      	ldr	r3, [pc, #644]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001938:	2202      	movs	r2, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d0f1      	beq.n	8001922 <HAL_RCC_OscConfig+0x3ee>
 800193e:	e018      	b.n	8001972 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001940:	4b9e      	ldr	r3, [pc, #632]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001944:	4b9d      	ldr	r3, [pc, #628]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001946:	2101      	movs	r1, #1
 8001948:	438a      	bics	r2, r1
 800194a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff faae 	bl	8000eac <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff faa9 	bl	8000eac <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1ae      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001968:	4b94      	ldr	r3, [pc, #592]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 800196a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800196c:	2202      	movs	r2, #2
 800196e:	4013      	ands	r3, r2
 8001970:	d1f1      	bne.n	8001956 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2204      	movs	r2, #4
 8001978:	4013      	ands	r3, r2
 800197a:	d100      	bne.n	800197e <HAL_RCC_OscConfig+0x44a>
 800197c:	e0ae      	b.n	8001adc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2023      	movs	r0, #35	@ 0x23
 8001980:	183b      	adds	r3, r7, r0
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001986:	4b8d      	ldr	r3, [pc, #564]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	055b      	lsls	r3, r3, #21
 800198e:	4013      	ands	r3, r2
 8001990:	d109      	bne.n	80019a6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	4b8a      	ldr	r3, [pc, #552]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001996:	4b89      	ldr	r3, [pc, #548]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001998:	2180      	movs	r1, #128	@ 0x80
 800199a:	0549      	lsls	r1, r1, #21
 800199c:	430a      	orrs	r2, r1
 800199e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80019a0:	183b      	adds	r3, r7, r0
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	4b88      	ldr	r3, [pc, #544]	@ (8001bc8 <HAL_RCC_OscConfig+0x694>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	2380      	movs	r3, #128	@ 0x80
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4013      	ands	r3, r2
 80019b0:	d11a      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b2:	4b85      	ldr	r3, [pc, #532]	@ (8001bc8 <HAL_RCC_OscConfig+0x694>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b84      	ldr	r3, [pc, #528]	@ (8001bc8 <HAL_RCC_OscConfig+0x694>)
 80019b8:	2180      	movs	r1, #128	@ 0x80
 80019ba:	0049      	lsls	r1, r1, #1
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa74 	bl	8000eac <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff fa6f 	bl	8000eac <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	@ 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e174      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	4b7a      	ldr	r3, [pc, #488]	@ (8001bc8 <HAL_RCC_OscConfig+0x694>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4013      	ands	r3, r2
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4d0>
 80019f4:	4b71      	ldr	r3, [pc, #452]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 80019f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019f8:	4b70      	ldr	r3, [pc, #448]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 80019fa:	2180      	movs	r1, #128	@ 0x80
 80019fc:	0049      	lsls	r1, r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a02:	e031      	b.n	8001a68 <HAL_RCC_OscConfig+0x534>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x4f2>
 8001a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a10:	4b6a      	ldr	r3, [pc, #424]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a12:	496c      	ldr	r1, [pc, #432]	@ (8001bc4 <HAL_RCC_OscConfig+0x690>)
 8001a14:	400a      	ands	r2, r1
 8001a16:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a18:	4b68      	ldr	r3, [pc, #416]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a1c:	4b67      	ldr	r3, [pc, #412]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a1e:	496b      	ldr	r1, [pc, #428]	@ (8001bcc <HAL_RCC_OscConfig+0x698>)
 8001a20:	400a      	ands	r2, r1
 8001a22:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a24:	e020      	b.n	8001a68 <HAL_RCC_OscConfig+0x534>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	23a0      	movs	r3, #160	@ 0xa0
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10e      	bne.n	8001a50 <HAL_RCC_OscConfig+0x51c>
 8001a32:	4b62      	ldr	r3, [pc, #392]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a36:	4b61      	ldr	r3, [pc, #388]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a38:	2180      	movs	r1, #128	@ 0x80
 8001a3a:	00c9      	lsls	r1, r1, #3
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a40:	4b5e      	ldr	r3, [pc, #376]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a44:	4b5d      	ldr	r3, [pc, #372]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a46:	2180      	movs	r1, #128	@ 0x80
 8001a48:	0049      	lsls	r1, r1, #1
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x534>
 8001a50:	4b5a      	ldr	r3, [pc, #360]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a54:	4b59      	ldr	r3, [pc, #356]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a56:	495b      	ldr	r1, [pc, #364]	@ (8001bc4 <HAL_RCC_OscConfig+0x690>)
 8001a58:	400a      	ands	r2, r1
 8001a5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a5c:	4b57      	ldr	r3, [pc, #348]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a60:	4b56      	ldr	r3, [pc, #344]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a62:	495a      	ldr	r1, [pc, #360]	@ (8001bcc <HAL_RCC_OscConfig+0x698>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d015      	beq.n	8001a9c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fa1c 	bl	8000eac <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a78:	e009      	b.n	8001a8e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff fa17 	bl	8000eac <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	4a52      	ldr	r2, [pc, #328]	@ (8001bd0 <HAL_RCC_OscConfig+0x69c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e11b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001a90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a92:	2380      	movs	r3, #128	@ 0x80
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4013      	ands	r3, r2
 8001a98:	d0ef      	beq.n	8001a7a <HAL_RCC_OscConfig+0x546>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fa06 	bl	8000eac <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7ff fa01 	bl	8000eac <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a47      	ldr	r2, [pc, #284]	@ (8001bd0 <HAL_RCC_OscConfig+0x69c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e105      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aba:	4b40      	ldr	r3, [pc, #256]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001abc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001abe:	2380      	movs	r3, #128	@ 0x80
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d1ef      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ac6:	2323      	movs	r3, #35	@ 0x23
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ad4:	4b39      	ldr	r3, [pc, #228]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001ad6:	493f      	ldr	r1, [pc, #252]	@ (8001bd4 <HAL_RCC_OscConfig+0x6a0>)
 8001ad8:	400a      	ands	r2, r1
 8001ada:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d049      	beq.n	8001b7a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d026      	beq.n	8001b3c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001aee:	4b33      	ldr	r3, [pc, #204]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	4b32      	ldr	r3, [pc, #200]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001af4:	2101      	movs	r1, #1
 8001af6:	430a      	orrs	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	4b30      	ldr	r3, [pc, #192]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001afe:	4b2f      	ldr	r3, [pc, #188]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001b00:	2101      	movs	r1, #1
 8001b02:	430a      	orrs	r2, r1
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b06:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <HAL_RCC_OscConfig+0x6a4>)
 8001b08:	6a1a      	ldr	r2, [r3, #32]
 8001b0a:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <HAL_RCC_OscConfig+0x6a4>)
 8001b0c:	2180      	movs	r1, #128	@ 0x80
 8001b0e:	0189      	lsls	r1, r1, #6
 8001b10:	430a      	orrs	r2, r1
 8001b12:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff f9ca 	bl	8000eac <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1e:	f7ff f9c5 	bl	8000eac <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0ca      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b30:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d0f1      	beq.n	8001b1e <HAL_RCC_OscConfig+0x5ea>
 8001b3a:	e01e      	b.n	8001b7a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	438a      	bics	r2, r1
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <HAL_RCC_OscConfig+0x6a4>)
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <HAL_RCC_OscConfig+0x6a4>)
 8001b4e:	4923      	ldr	r1, [pc, #140]	@ (8001bdc <HAL_RCC_OscConfig+0x6a8>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff f9aa 	bl	8000eac <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b5e:	f7ff f9a5 	bl	8000eac <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0aa      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2202      	movs	r2, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d1f1      	bne.n	8001b5e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d100      	bne.n	8001b84 <HAL_RCC_OscConfig+0x650>
 8001b82:	e09f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d100      	bne.n	8001b8c <HAL_RCC_OscConfig+0x658>
 8001b8a:	e078      	b.n	8001c7e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d159      	bne.n	8001c48 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <HAL_RCC_OscConfig+0x688>)
 8001b9a:	4911      	ldr	r1, [pc, #68]	@ (8001be0 <HAL_RCC_OscConfig+0x6ac>)
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f984 	bl	8000eac <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ba8:	e01c      	b.n	8001be4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f97f 	bl	8000eac <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d915      	bls.n	8001be4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e084      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	ffff1fff 	.word	0xffff1fff
 8001bc4:	fffffeff 	.word	0xfffffeff
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	fffffbff 	.word	0xfffffbff
 8001bd0:	00001388 	.word	0x00001388
 8001bd4:	efffffff 	.word	0xefffffff
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	ffffdfff 	.word	0xffffdfff
 8001be0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001be4:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd0 <HAL_RCC_OscConfig+0x79c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	049b      	lsls	r3, r3, #18
 8001bec:	4013      	ands	r3, r2
 8001bee:	d1dc      	bne.n	8001baa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf0:	4b37      	ldr	r3, [pc, #220]	@ (8001cd0 <HAL_RCC_OscConfig+0x79c>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a37      	ldr	r2, [pc, #220]	@ (8001cd4 <HAL_RCC_OscConfig+0x7a0>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <HAL_RCC_OscConfig+0x79c>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c10:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <HAL_RCC_OscConfig+0x79c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd0 <HAL_RCC_OscConfig+0x79c>)
 8001c16:	2180      	movs	r1, #128	@ 0x80
 8001c18:	0449      	lsls	r1, r1, #17
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f945 	bl	8000eac <HAL_GetTick>
 8001c22:	0003      	movs	r3, r0
 8001c24:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f940 	bl	8000eac <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e045      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c3a:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <HAL_RCC_OscConfig+0x79c>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	049b      	lsls	r3, r3, #18
 8001c42:	4013      	ands	r3, r2
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x6f4>
 8001c46:	e03d      	b.n	8001cc4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <HAL_RCC_OscConfig+0x79c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <HAL_RCC_OscConfig+0x79c>)
 8001c4e:	4922      	ldr	r1, [pc, #136]	@ (8001cd8 <HAL_RCC_OscConfig+0x7a4>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff f92a 	bl	8000eac <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff f925 	bl	8000eac <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e02a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c70:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <HAL_RCC_OscConfig+0x79c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	049b      	lsls	r3, r3, #18
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x72a>
 8001c7c:	e022      	b.n	8001cc4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e01d      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_RCC_OscConfig+0x79c>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	025b      	lsls	r3, r3, #9
 8001c96:	401a      	ands	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d10f      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	23f0      	movs	r3, #240	@ 0xf0
 8001ca4:	039b      	lsls	r3, r3, #14
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	23c0      	movs	r3, #192	@ 0xc0
 8001cb4:	041b      	lsls	r3, r3, #16
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b00a      	add	sp, #40	@ 0x28
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	ff02ffff 	.word	0xff02ffff
 8001cd8:	feffffff 	.word	0xfeffffff

08001cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b5b0      	push	{r4, r5, r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e128      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b96      	ldr	r3, [pc, #600]	@ (8001f4c <HAL_RCC_ClockConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d91e      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b93      	ldr	r3, [pc, #588]	@ (8001f4c <HAL_RCC_ClockConfig+0x270>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2201      	movs	r2, #1
 8001d04:	4393      	bics	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	4b90      	ldr	r3, [pc, #576]	@ (8001f4c <HAL_RCC_ClockConfig+0x270>)
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d10:	f7ff f8cc 	bl	8000eac <HAL_GetTick>
 8001d14:	0003      	movs	r3, r0
 8001d16:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d18:	e009      	b.n	8001d2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1a:	f7ff f8c7 	bl	8000eac <HAL_GetTick>
 8001d1e:	0002      	movs	r2, r0
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	4a8a      	ldr	r2, [pc, #552]	@ (8001f50 <HAL_RCC_ClockConfig+0x274>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e109      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b87      	ldr	r3, [pc, #540]	@ (8001f4c <HAL_RCC_ClockConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2201      	movs	r2, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d1ee      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d009      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d46:	4b83      	ldr	r3, [pc, #524]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	22f0      	movs	r2, #240	@ 0xf0
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	4b7f      	ldr	r3, [pc, #508]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001d56:	430a      	orrs	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4013      	ands	r3, r2
 8001d62:	d100      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x8a>
 8001d64:	e089      	b.n	8001e7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d6e:	4b79      	ldr	r3, [pc, #484]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	@ 0x80
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	4013      	ands	r3, r2
 8001d78:	d120      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0e1      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d86:	4b73      	ldr	r3, [pc, #460]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	049b      	lsls	r3, r3, #18
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d114      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0d5      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d106      	bne.n	8001dac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	d109      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0ca      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dac:	4b69      	ldr	r3, [pc, #420]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	@ 0x80
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0c2      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbc:	4b65      	ldr	r3, [pc, #404]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	4b62      	ldr	r3, [pc, #392]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7ff f86c 	bl	8000eac <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d111      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de0:	e009      	b.n	8001df6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f7ff f863 	bl	8000eac <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a58      	ldr	r2, [pc, #352]	@ (8001f50 <HAL_RCC_ClockConfig+0x274>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0a5      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df6:	4b57      	ldr	r3, [pc, #348]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d1ef      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x106>
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d111      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0c:	e009      	b.n	8001e22 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0e:	f7ff f84d 	bl	8000eac <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4a4d      	ldr	r2, [pc, #308]	@ (8001f50 <HAL_RCC_ClockConfig+0x274>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e08f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e22:	4b4c      	ldr	r3, [pc, #304]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	220c      	movs	r2, #12
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d1ef      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x132>
 8001e2e:	e024      	b.n	8001e7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d11b      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e38:	e009      	b.n	8001e4e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3a:	f7ff f837 	bl	8000eac <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4a42      	ldr	r2, [pc, #264]	@ (8001f50 <HAL_RCC_ClockConfig+0x274>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e079      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4e:	4b41      	ldr	r3, [pc, #260]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	220c      	movs	r2, #12
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d1ef      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x15e>
 8001e5a:	e00e      	b.n	8001e7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7ff f826 	bl	8000eac <HAL_GetTick>
 8001e60:	0002      	movs	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	4a3a      	ldr	r2, [pc, #232]	@ (8001f50 <HAL_RCC_ClockConfig+0x274>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e068      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e70:	4b38      	ldr	r3, [pc, #224]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	220c      	movs	r2, #12
 8001e76:	4013      	ands	r3, r2
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7a:	4b34      	ldr	r3, [pc, #208]	@ (8001f4c <HAL_RCC_ClockConfig+0x270>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4013      	ands	r3, r2
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d21e      	bcs.n	8001ec6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e88:	4b30      	ldr	r3, [pc, #192]	@ (8001f4c <HAL_RCC_ClockConfig+0x270>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4393      	bics	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	4b2e      	ldr	r3, [pc, #184]	@ (8001f4c <HAL_RCC_ClockConfig+0x270>)
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e9a:	f7ff f807 	bl	8000eac <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	e009      	b.n	8001eb8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff f802 	bl	8000eac <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	4a28      	ldr	r2, [pc, #160]	@ (8001f50 <HAL_RCC_ClockConfig+0x274>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e044      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <HAL_RCC_ClockConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d009      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a20      	ldr	r2, [pc, #128]	@ (8001f58 <HAL_RCC_ClockConfig+0x27c>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2208      	movs	r2, #8
 8001eea:	4013      	ands	r3, r2
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eee:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f5c <HAL_RCC_ClockConfig+0x280>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	00da      	lsls	r2, r3, #3
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f04:	f000 f832 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f08:	0001      	movs	r1, r0
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_RCC_ClockConfig+0x278>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	220f      	movs	r2, #15
 8001f12:	4013      	ands	r3, r2
 8001f14:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <HAL_RCC_ClockConfig+0x284>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	000a      	movs	r2, r1
 8001f1a:	40da      	lsrs	r2, r3
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HAL_RCC_ClockConfig+0x288>)
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_RCC_ClockConfig+0x28c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	250b      	movs	r5, #11
 8001f26:	197c      	adds	r4, r7, r5
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7fe ff79 	bl	8000e20 <HAL_InitTick>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f32:	197b      	adds	r3, r7, r5
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f3a:	197b      	adds	r3, r7, r5
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b004      	add	sp, #16
 8001f48:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	00001388 	.word	0x00001388
 8001f54:	40021000 	.word	0x40021000
 8001f58:	fffff8ff 	.word	0xfffff8ff
 8001f5c:	ffffc7ff 	.word	0xffffc7ff
 8001f60:	080042ec 	.word	0x080042ec
 8001f64:	20000004 	.word	0x20000004
 8001f68:	20000008 	.word	0x20000008

08001f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b08e      	sub	sp, #56	@ 0x38
 8001f70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f72:	4b4c      	ldr	r3, [pc, #304]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d014      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x40>
 8001f82:	d900      	bls.n	8001f86 <HAL_RCC_GetSysClockFreq+0x1a>
 8001f84:	e07b      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x112>
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d002      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x24>
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f8e:	e076      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f90:	4b44      	ldr	r3, [pc, #272]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2210      	movs	r2, #16
 8001f96:	4013      	ands	r3, r2
 8001f98:	d002      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f9a:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f9c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f9e:	e07c      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001fa0:	4b42      	ldr	r3, [pc, #264]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x140>)
 8001fa2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001fa4:	e079      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa6:	4b42      	ldr	r3, [pc, #264]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fa8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001faa:	e076      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fae:	0c9a      	lsrs	r2, r3, #18
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001fb6:	5c9b      	ldrb	r3, [r3, r2]
 8001fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbc:	0d9a      	lsrs	r2, r3, #22
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc6:	4b37      	ldr	r3, [pc, #220]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	025b      	lsls	r3, r3, #9
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d01a      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	4a35      	ldr	r2, [pc, #212]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	69b8      	ldr	r0, [r7, #24]
 8001fe0:	69f9      	ldr	r1, [r7, #28]
 8001fe2:	f7fe f93d 	bl	8000260 <__aeabi_lmul>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	000b      	movs	r3, r1
 8001fea:	0010      	movs	r0, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f7fe f911 	bl	8000220 <__aeabi_uldivmod>
 8001ffe:	0002      	movs	r2, r0
 8002000:	000b      	movs	r3, r1
 8002002:	0013      	movs	r3, r2
 8002004:	637b      	str	r3, [r7, #52]	@ 0x34
 8002006:	e037      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002008:	4b26      	ldr	r3, [pc, #152]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2210      	movs	r2, #16
 800200e:	4013      	ands	r3, r2
 8002010:	d01a      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4a23      	ldr	r2, [pc, #140]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800201c:	2300      	movs	r3, #0
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	68f9      	ldr	r1, [r7, #12]
 8002022:	f7fe f91d 	bl	8000260 <__aeabi_lmul>
 8002026:	0002      	movs	r2, r0
 8002028:	000b      	movs	r3, r1
 800202a:	0010      	movs	r0, r2
 800202c:	0019      	movs	r1, r3
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f7fe f8f1 	bl	8000220 <__aeabi_uldivmod>
 800203e:	0002      	movs	r2, r0
 8002040:	000b      	movs	r3, r1
 8002042:	0013      	movs	r3, r2
 8002044:	637b      	str	r3, [r7, #52]	@ 0x34
 8002046:	e017      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204a:	0018      	movs	r0, r3
 800204c:	2300      	movs	r3, #0
 800204e:	0019      	movs	r1, r3
 8002050:	4a16      	ldr	r2, [pc, #88]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x140>)
 8002052:	2300      	movs	r3, #0
 8002054:	f7fe f904 	bl	8000260 <__aeabi_lmul>
 8002058:	0002      	movs	r2, r0
 800205a:	000b      	movs	r3, r1
 800205c:	0010      	movs	r0, r2
 800205e:	0019      	movs	r1, r3
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	001c      	movs	r4, r3
 8002064:	2300      	movs	r3, #0
 8002066:	001d      	movs	r5, r3
 8002068:	0022      	movs	r2, r4
 800206a:	002b      	movs	r3, r5
 800206c:	f7fe f8d8 	bl	8000220 <__aeabi_uldivmod>
 8002070:	0002      	movs	r2, r0
 8002072:	000b      	movs	r3, r1
 8002074:	0013      	movs	r3, r2
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800207a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800207c:	e00d      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800207e:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	0b5b      	lsrs	r3, r3, #13
 8002084:	2207      	movs	r2, #7
 8002086:	4013      	ands	r3, r2
 8002088:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	3301      	adds	r3, #1
 800208e:	2280      	movs	r2, #128	@ 0x80
 8002090:	0212      	lsls	r2, r2, #8
 8002092:	409a      	lsls	r2, r3
 8002094:	0013      	movs	r3, r2
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002098:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800209a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b00e      	add	sp, #56	@ 0x38
 80020a2:	bdb0      	pop	{r4, r5, r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	003d0900 	.word	0x003d0900
 80020ac:	00f42400 	.word	0x00f42400
 80020b0:	007a1200 	.word	0x007a1200
 80020b4:	08004304 	.word	0x08004304

080020b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b02      	ldr	r3, [pc, #8]	@ (80020c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d0:	f7ff fff2 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020d4:	0001      	movs	r1, r0
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	2207      	movs	r2, #7
 80020de:	4013      	ands	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	@ (80020f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	40d9      	lsrs	r1, r3
 80020e6:	000b      	movs	r3, r1
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	40021000 	.word	0x40021000
 80020f4:	080042fc 	.word	0x080042fc

080020f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020fc:	f7ff ffdc 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 8002100:	0001      	movs	r1, r0
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	0adb      	lsrs	r3, r3, #11
 8002108:	2207      	movs	r2, #7
 800210a:	4013      	ands	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	40d9      	lsrs	r1, r3
 8002112:	000b      	movs	r3, r1
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	40021000 	.word	0x40021000
 8002120:	080042fc 	.word	0x080042fc

08002124 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800212c:	2317      	movs	r3, #23
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2220      	movs	r2, #32
 800213a:	4013      	ands	r3, r2
 800213c:	d106      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	4013      	ands	r3, r2
 8002148:	d100      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800214a:	e104      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214c:	4bb9      	ldr	r3, [pc, #740]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800214e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	055b      	lsls	r3, r3, #21
 8002154:	4013      	ands	r3, r2
 8002156:	d10a      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002158:	4bb6      	ldr	r3, [pc, #728]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800215a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800215c:	4bb5      	ldr	r3, [pc, #724]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	0549      	lsls	r1, r1, #21
 8002162:	430a      	orrs	r2, r1
 8002164:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002166:	2317      	movs	r3, #23
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4bb2      	ldr	r3, [pc, #712]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	2380      	movs	r3, #128	@ 0x80
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4013      	ands	r3, r2
 8002178:	d11a      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217a:	4baf      	ldr	r3, [pc, #700]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4bae      	ldr	r3, [pc, #696]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002180:	2180      	movs	r1, #128	@ 0x80
 8002182:	0049      	lsls	r1, r1, #1
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002188:	f7fe fe90 	bl	8000eac <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	e008      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7fe fe8b 	bl	8000eac <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b64      	cmp	r3, #100	@ 0x64
 800219e:	d901      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e143      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4ba4      	ldr	r3, [pc, #656]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	@ 0x80
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80021b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	23c0      	movs	r3, #192	@ 0xc0
 80021b6:	039b      	lsls	r3, r3, #14
 80021b8:	4013      	ands	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	23c0      	movs	r3, #192	@ 0xc0
 80021c2:	039b      	lsls	r3, r3, #14
 80021c4:	4013      	ands	r3, r2
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	23c0      	movs	r3, #192	@ 0xc0
 80021d2:	039b      	lsls	r3, r3, #14
 80021d4:	4013      	ands	r3, r2
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d013      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	23c0      	movs	r3, #192	@ 0xc0
 80021e2:	029b      	lsls	r3, r3, #10
 80021e4:	401a      	ands	r2, r3
 80021e6:	23c0      	movs	r3, #192	@ 0xc0
 80021e8:	029b      	lsls	r3, r3, #10
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d10a      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021ee:	4b91      	ldr	r3, [pc, #580]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	029b      	lsls	r3, r3, #10
 80021f6:	401a      	ands	r2, r3
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	029b      	lsls	r3, r3, #10
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d101      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e113      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002204:	4b8b      	ldr	r3, [pc, #556]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002206:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002208:	23c0      	movs	r3, #192	@ 0xc0
 800220a:	029b      	lsls	r3, r3, #10
 800220c:	4013      	ands	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d049      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	23c0      	movs	r3, #192	@ 0xc0
 800221c:	029b      	lsls	r3, r3, #10
 800221e:	4013      	ands	r3, r2
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	429a      	cmp	r2, r3
 8002224:	d004      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2220      	movs	r2, #32
 800222c:	4013      	ands	r3, r2
 800222e:	d10d      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	23c0      	movs	r3, #192	@ 0xc0
 8002236:	029b      	lsls	r3, r3, #10
 8002238:	4013      	ands	r3, r2
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d034      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	4013      	ands	r3, r2
 800224a:	d02e      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800224c:	4b79      	ldr	r3, [pc, #484]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800224e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002250:	4a7a      	ldr	r2, [pc, #488]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002252:	4013      	ands	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002256:	4b77      	ldr	r3, [pc, #476]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002258:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800225a:	4b76      	ldr	r3, [pc, #472]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800225c:	2180      	movs	r1, #128	@ 0x80
 800225e:	0309      	lsls	r1, r1, #12
 8002260:	430a      	orrs	r2, r1
 8002262:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002264:	4b73      	ldr	r3, [pc, #460]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002266:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002268:	4b72      	ldr	r3, [pc, #456]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800226a:	4975      	ldr	r1, [pc, #468]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800226c:	400a      	ands	r2, r1
 800226e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002270:	4b70      	ldr	r3, [pc, #448]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4013      	ands	r3, r2
 800227e:	d014      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe fe14 	bl	8000eac <HAL_GetTick>
 8002284:	0003      	movs	r3, r0
 8002286:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002288:	e009      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe fe0f 	bl	8000eac <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	4a6b      	ldr	r2, [pc, #428]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0c6      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800229e:	4b65      	ldr	r3, [pc, #404]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	d0ef      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	4013      	ands	r3, r2
 80022b4:	d01f      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	23c0      	movs	r3, #192	@ 0xc0
 80022bc:	029b      	lsls	r3, r3, #10
 80022be:	401a      	ands	r2, r3
 80022c0:	23c0      	movs	r3, #192	@ 0xc0
 80022c2:	029b      	lsls	r3, r3, #10
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d10c      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80022c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	23c0      	movs	r3, #192	@ 0xc0
 80022d8:	039b      	lsls	r3, r3, #14
 80022da:	401a      	ands	r2, r3
 80022dc:	4b55      	ldr	r3, [pc, #340]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022de:	430a      	orrs	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	4b54      	ldr	r3, [pc, #336]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	23c0      	movs	r3, #192	@ 0xc0
 80022ec:	029b      	lsls	r3, r3, #10
 80022ee:	401a      	ands	r2, r3
 80022f0:	4b50      	ldr	r3, [pc, #320]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2220      	movs	r2, #32
 80022fc:	4013      	ands	r3, r2
 80022fe:	d01f      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	23c0      	movs	r3, #192	@ 0xc0
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	401a      	ands	r2, r3
 800230a:	23c0      	movs	r3, #192	@ 0xc0
 800230c:	029b      	lsls	r3, r3, #10
 800230e:	429a      	cmp	r2, r3
 8002310:	d10c      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002312:	4b48      	ldr	r3, [pc, #288]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a4c      	ldr	r2, [pc, #304]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002318:	4013      	ands	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	23c0      	movs	r3, #192	@ 0xc0
 8002322:	039b      	lsls	r3, r3, #14
 8002324:	401a      	ands	r2, r3
 8002326:	4b43      	ldr	r3, [pc, #268]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	4b41      	ldr	r3, [pc, #260]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800232e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	23c0      	movs	r3, #192	@ 0xc0
 8002336:	029b      	lsls	r3, r3, #10
 8002338:	401a      	ands	r2, r3
 800233a:	4b3e      	ldr	r3, [pc, #248]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800233c:	430a      	orrs	r2, r1
 800233e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002340:	2317      	movs	r3, #23
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b3a      	ldr	r3, [pc, #232]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800234c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800234e:	4b39      	ldr	r3, [pc, #228]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002350:	493e      	ldr	r1, [pc, #248]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002352:	400a      	ands	r2, r1
 8002354:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2201      	movs	r2, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d009      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002360:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002364:	2203      	movs	r2, #3
 8002366:	4393      	bics	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	4b31      	ldr	r3, [pc, #196]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002370:	430a      	orrs	r2, r1
 8002372:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2202      	movs	r2, #2
 800237a:	4013      	ands	r3, r2
 800237c:	d009      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800237e:	4b2d      	ldr	r3, [pc, #180]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	220c      	movs	r2, #12
 8002384:	4393      	bics	r3, r2
 8002386:	0019      	movs	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	4b29      	ldr	r3, [pc, #164]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800238e:	430a      	orrs	r2, r1
 8002390:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2204      	movs	r2, #4
 8002398:	4013      	ands	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800239c:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	4b22      	ldr	r3, [pc, #136]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2208      	movs	r2, #8
 80023b6:	4013      	ands	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023be:	4a25      	ldr	r2, [pc, #148]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	@ 0x80
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023da:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	4a17      	ldr	r2, [pc, #92]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023ea:	430a      	orrs	r2, r1
 80023ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fc:	4a16      	ldr	r2, [pc, #88]	@ (8002458 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80023fe:	4013      	ands	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002406:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002408:	430a      	orrs	r2, r1
 800240a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002416:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241a:	4a10      	ldr	r2, [pc, #64]	@ (800245c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002426:	430a      	orrs	r2, r1
 8002428:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b006      	add	sp, #24
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	fffcffff 	.word	0xfffcffff
 8002440:	fff7ffff 	.word	0xfff7ffff
 8002444:	00001388 	.word	0x00001388
 8002448:	ffcfffff 	.word	0xffcfffff
 800244c:	efffffff 	.word	0xefffffff
 8002450:	fffff3ff 	.word	0xfffff3ff
 8002454:	ffffcfff 	.word	0xffffcfff
 8002458:	fbffffff 	.word	0xfbffffff
 800245c:	fff3ffff 	.word	0xfff3ffff

08002460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e032      	b.n	80024d8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2239      	movs	r2, #57	@ 0x39
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d107      	bne.n	800248e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2238      	movs	r2, #56	@ 0x38
 8002482:	2100      	movs	r1, #0
 8002484:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0018      	movs	r0, r3
 800248a:	f7fe fb99 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2239      	movs	r2, #57	@ 0x39
 8002492:	2102      	movs	r1, #2
 8002494:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	0019      	movs	r1, r3
 80024a0:	0010      	movs	r0, r2
 80024a2:	f000 fc09 	bl	8002cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	223e      	movs	r2, #62	@ 0x3e
 80024aa:	2101      	movs	r1, #1
 80024ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	223a      	movs	r2, #58	@ 0x3a
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	223b      	movs	r2, #59	@ 0x3b
 80024ba:	2101      	movs	r1, #1
 80024bc:	5499      	strb	r1, [r3, r2]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	223c      	movs	r2, #60	@ 0x3c
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	223d      	movs	r2, #61	@ 0x3d
 80024ca:	2101      	movs	r1, #1
 80024cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2239      	movs	r2, #57	@ 0x39
 80024d2:	2101      	movs	r1, #1
 80024d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2239      	movs	r2, #57	@ 0x39
 80024ec:	5c9b      	ldrb	r3, [r3, r2]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d001      	beq.n	80024f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e033      	b.n	8002560 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2239      	movs	r2, #57	@ 0x39
 80024fc:	2102      	movs	r1, #2
 80024fe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	05db      	lsls	r3, r3, #23
 8002508:	429a      	cmp	r2, r3
 800250a:	d00e      	beq.n	800252a <HAL_TIM_Base_Start+0x4a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a15      	ldr	r2, [pc, #84]	@ (8002568 <HAL_TIM_Base_Start+0x88>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_TIM_Base_Start+0x4a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a14      	ldr	r2, [pc, #80]	@ (800256c <HAL_TIM_Base_Start+0x8c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d004      	beq.n	800252a <HAL_TIM_Base_Start+0x4a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a12      	ldr	r2, [pc, #72]	@ (8002570 <HAL_TIM_Base_Start+0x90>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d111      	bne.n	800254e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2207      	movs	r2, #7
 8002532:	4013      	ands	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b06      	cmp	r3, #6
 800253a:	d010      	beq.n	800255e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254c:	e007      	b.n	800255e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b004      	add	sp, #16
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40000400 	.word	0x40000400
 800256c:	40010800 	.word	0x40010800
 8002570:	40011400 	.word	0x40011400

08002574 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <HAL_TIM_Base_Stop+0x38>)
 8002584:	4013      	ands	r3, r2
 8002586:	d107      	bne.n	8002598 <HAL_TIM_Base_Stop+0x24>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2101      	movs	r1, #1
 8002594:	438a      	bics	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2239      	movs	r2, #57	@ 0x39
 800259c:	2101      	movs	r1, #1
 800259e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b002      	add	sp, #8
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	00001111 	.word	0x00001111

080025b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e032      	b.n	8002628 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2239      	movs	r2, #57	@ 0x39
 80025c6:	5c9b      	ldrb	r3, [r3, r2]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d107      	bne.n	80025de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2238      	movs	r2, #56	@ 0x38
 80025d2:	2100      	movs	r1, #0
 80025d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 f829 	bl	8002630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2239      	movs	r2, #57	@ 0x39
 80025e2:	2102      	movs	r1, #2
 80025e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	0019      	movs	r1, r3
 80025f0:	0010      	movs	r0, r2
 80025f2:	f000 fb61 	bl	8002cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	223e      	movs	r2, #62	@ 0x3e
 80025fa:	2101      	movs	r1, #1
 80025fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	223a      	movs	r2, #58	@ 0x3a
 8002602:	2101      	movs	r1, #1
 8002604:	5499      	strb	r1, [r3, r2]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	223b      	movs	r2, #59	@ 0x3b
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	223c      	movs	r2, #60	@ 0x3c
 8002612:	2101      	movs	r1, #1
 8002614:	5499      	strb	r1, [r3, r2]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	223d      	movs	r2, #61	@ 0x3d
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2239      	movs	r2, #57	@ 0x39
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002638:	46c0      	nop			@ (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b002      	add	sp, #8
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d108      	bne.n	8002662 <HAL_TIM_PWM_Start+0x22>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	223a      	movs	r2, #58	@ 0x3a
 8002654:	5c9b      	ldrb	r3, [r3, r2]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	1e5a      	subs	r2, r3, #1
 800265c:	4193      	sbcs	r3, r2
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e01f      	b.n	80026a2 <HAL_TIM_PWM_Start+0x62>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b04      	cmp	r3, #4
 8002666:	d108      	bne.n	800267a <HAL_TIM_PWM_Start+0x3a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	223b      	movs	r2, #59	@ 0x3b
 800266c:	5c9b      	ldrb	r3, [r3, r2]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	4193      	sbcs	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	e013      	b.n	80026a2 <HAL_TIM_PWM_Start+0x62>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d108      	bne.n	8002692 <HAL_TIM_PWM_Start+0x52>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	223c      	movs	r2, #60	@ 0x3c
 8002684:	5c9b      	ldrb	r3, [r3, r2]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	4193      	sbcs	r3, r2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e007      	b.n	80026a2 <HAL_TIM_PWM_Start+0x62>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	223d      	movs	r2, #61	@ 0x3d
 8002696:	5c9b      	ldrb	r3, [r3, r2]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	4193      	sbcs	r3, r2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e052      	b.n	8002750 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d104      	bne.n	80026ba <HAL_TIM_PWM_Start+0x7a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	223a      	movs	r2, #58	@ 0x3a
 80026b4:	2102      	movs	r1, #2
 80026b6:	5499      	strb	r1, [r3, r2]
 80026b8:	e013      	b.n	80026e2 <HAL_TIM_PWM_Start+0xa2>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d104      	bne.n	80026ca <HAL_TIM_PWM_Start+0x8a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	223b      	movs	r2, #59	@ 0x3b
 80026c4:	2102      	movs	r1, #2
 80026c6:	5499      	strb	r1, [r3, r2]
 80026c8:	e00b      	b.n	80026e2 <HAL_TIM_PWM_Start+0xa2>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d104      	bne.n	80026da <HAL_TIM_PWM_Start+0x9a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	223c      	movs	r2, #60	@ 0x3c
 80026d4:	2102      	movs	r1, #2
 80026d6:	5499      	strb	r1, [r3, r2]
 80026d8:	e003      	b.n	80026e2 <HAL_TIM_PWM_Start+0xa2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	223d      	movs	r2, #61	@ 0x3d
 80026de:	2102      	movs	r1, #2
 80026e0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6839      	ldr	r1, [r7, #0]
 80026e8:	2201      	movs	r2, #1
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 fce0 	bl	80030b0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	@ 0x80
 80026f6:	05db      	lsls	r3, r3, #23
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d00e      	beq.n	800271a <HAL_TIM_PWM_Start+0xda>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a15      	ldr	r2, [pc, #84]	@ (8002758 <HAL_TIM_PWM_Start+0x118>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_TIM_PWM_Start+0xda>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a14      	ldr	r2, [pc, #80]	@ (800275c <HAL_TIM_PWM_Start+0x11c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d004      	beq.n	800271a <HAL_TIM_PWM_Start+0xda>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <HAL_TIM_PWM_Start+0x120>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d111      	bne.n	800273e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2207      	movs	r2, #7
 8002722:	4013      	ands	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b06      	cmp	r3, #6
 800272a:	d010      	beq.n	800274e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2101      	movs	r1, #1
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273c:	e007      	b.n	800274e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2101      	movs	r1, #1
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b004      	add	sp, #16
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40000400 	.word	0x40000400
 800275c:	40010800 	.word	0x40010800
 8002760:	40011400 	.word	0x40011400

08002764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2202      	movs	r2, #2
 8002774:	4013      	ands	r3, r2
 8002776:	2b02      	cmp	r3, #2
 8002778:	d124      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2202      	movs	r2, #2
 8002782:	4013      	ands	r3, r2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d11d      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2203      	movs	r2, #3
 800278e:	4252      	negs	r2, r2
 8002790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2203      	movs	r2, #3
 80027a0:	4013      	ands	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 fa6e 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e007      	b.n	80027be <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 fa61 	bl	8002c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 fa6d 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2204      	movs	r2, #4
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d125      	bne.n	800281e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2204      	movs	r2, #4
 80027da:	4013      	ands	r3, r2
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d11e      	bne.n	800281e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2205      	movs	r2, #5
 80027e6:	4252      	negs	r2, r2
 80027e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	23c0      	movs	r3, #192	@ 0xc0
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f000 fa41 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002806:	e007      	b.n	8002818 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	0018      	movs	r0, r3
 800280c:	f000 fa34 	bl	8002c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0018      	movs	r0, r3
 8002814:	f000 fa40 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2208      	movs	r2, #8
 8002826:	4013      	ands	r3, r2
 8002828:	2b08      	cmp	r3, #8
 800282a:	d124      	bne.n	8002876 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2208      	movs	r2, #8
 8002834:	4013      	ands	r3, r2
 8002836:	2b08      	cmp	r3, #8
 8002838:	d11d      	bne.n	8002876 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2209      	movs	r2, #9
 8002840:	4252      	negs	r2, r2
 8002842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2204      	movs	r2, #4
 8002848:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	2203      	movs	r2, #3
 8002852:	4013      	ands	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0018      	movs	r0, r3
 800285a:	f000 fa15 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 800285e:	e007      	b.n	8002870 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	0018      	movs	r0, r3
 8002864:	f000 fa08 	bl	8002c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f000 fa14 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2210      	movs	r2, #16
 800287e:	4013      	ands	r3, r2
 8002880:	2b10      	cmp	r3, #16
 8002882:	d125      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2210      	movs	r2, #16
 800288c:	4013      	ands	r3, r2
 800288e:	2b10      	cmp	r3, #16
 8002890:	d11e      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2211      	movs	r2, #17
 8002898:	4252      	negs	r2, r2
 800289a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2208      	movs	r2, #8
 80028a0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	23c0      	movs	r3, #192	@ 0xc0
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 f9e8 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 80028b8:	e007      	b.n	80028ca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 f9db 	bl	8002c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 f9e7 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10f      	bne.n	80028fe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d108      	bne.n	80028fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2202      	movs	r2, #2
 80028f2:	4252      	negs	r2, r2
 80028f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f000 f9b5 	bl	8002c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2240      	movs	r2, #64	@ 0x40
 8002906:	4013      	ands	r3, r2
 8002908:	2b40      	cmp	r3, #64	@ 0x40
 800290a:	d10f      	bne.n	800292c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2240      	movs	r2, #64	@ 0x40
 8002914:	4013      	ands	r3, r2
 8002916:	2b40      	cmp	r3, #64	@ 0x40
 8002918:	d108      	bne.n	800292c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2241      	movs	r2, #65	@ 0x41
 8002920:	4252      	negs	r2, r2
 8002922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0018      	movs	r0, r3
 8002928:	f000 f9be 	bl	8002ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002940:	2317      	movs	r3, #23
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2238      	movs	r2, #56	@ 0x38
 800294c:	5c9b      	ldrb	r3, [r3, r2]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002952:	2302      	movs	r3, #2
 8002954:	e0ad      	b.n	8002ab2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2238      	movs	r2, #56	@ 0x38
 800295a:	2101      	movs	r1, #1
 800295c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0c      	cmp	r3, #12
 8002962:	d100      	bne.n	8002966 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002964:	e076      	b.n	8002a54 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d900      	bls.n	800296e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800296c:	e095      	b.n	8002a9a <HAL_TIM_PWM_ConfigChannel+0x166>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d04e      	beq.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b08      	cmp	r3, #8
 8002978:	d900      	bls.n	800297c <HAL_TIM_PWM_ConfigChannel+0x48>
 800297a:	e08e      	b.n	8002a9a <HAL_TIM_PWM_ConfigChannel+0x166>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d021      	beq.n	80029cc <HAL_TIM_PWM_ConfigChannel+0x98>
 8002988:	e087      	b.n	8002a9a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	0011      	movs	r1, r2
 8002992:	0018      	movs	r0, r3
 8002994:	f000 f9ee 	bl	8002d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2108      	movs	r1, #8
 80029a4:	430a      	orrs	r2, r1
 80029a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2104      	movs	r1, #4
 80029b4:	438a      	bics	r2, r1
 80029b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6999      	ldr	r1, [r3, #24]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	619a      	str	r2, [r3, #24]
      break;
 80029ca:	e06b      	b.n	8002aa4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	0011      	movs	r1, r2
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 fa09 	bl	8002dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2180      	movs	r1, #128	@ 0x80
 80029e6:	0109      	lsls	r1, r1, #4
 80029e8:	430a      	orrs	r2, r1
 80029ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4931      	ldr	r1, [pc, #196]	@ (8002abc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6999      	ldr	r1, [r3, #24]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	021a      	lsls	r2, r3, #8
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	619a      	str	r2, [r3, #24]
      break;
 8002a10:	e048      	b.n	8002aa4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fa28 	bl	8002e70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2108      	movs	r1, #8
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69d9      	ldr	r1, [r3, #28]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	61da      	str	r2, [r3, #28]
      break;
 8002a52:	e027      	b.n	8002aa4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 fa47 	bl	8002ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2180      	movs	r1, #128	@ 0x80
 8002a6e:	0109      	lsls	r1, r1, #4
 8002a70:	430a      	orrs	r2, r1
 8002a72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	490f      	ldr	r1, [pc, #60]	@ (8002abc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002a80:	400a      	ands	r2, r1
 8002a82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69d9      	ldr	r1, [r3, #28]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	61da      	str	r2, [r3, #28]
      break;
 8002a98:	e004      	b.n	8002aa4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002a9a:	2317      	movs	r3, #23
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
      break;
 8002aa2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2238      	movs	r2, #56	@ 0x38
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	5499      	strb	r1, [r3, r2]

  return status;
 8002aac:	2317      	movs	r3, #23
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	781b      	ldrb	r3, [r3, #0]
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b006      	add	sp, #24
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	fffffbff 	.word	0xfffffbff

08002ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aca:	230f      	movs	r3, #15
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2238      	movs	r2, #56	@ 0x38
 8002ad6:	5c9b      	ldrb	r3, [r3, r2]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIM_ConfigClockSource+0x20>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0bc      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x19a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2238      	movs	r2, #56	@ 0x38
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2239      	movs	r2, #57	@ 0x39
 8002aec:	2102      	movs	r1, #2
 8002aee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2277      	movs	r2, #119	@ 0x77
 8002afc:	4393      	bics	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4a58      	ldr	r2, [pc, #352]	@ (8002c64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2280      	movs	r2, #128	@ 0x80
 8002b16:	0192      	lsls	r2, r2, #6
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d040      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0xde>
 8002b1c:	2280      	movs	r2, #128	@ 0x80
 8002b1e:	0192      	lsls	r2, r2, #6
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d900      	bls.n	8002b26 <HAL_TIM_ConfigClockSource+0x66>
 8002b24:	e088      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b26:	2280      	movs	r2, #128	@ 0x80
 8002b28:	0152      	lsls	r2, r2, #5
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d100      	bne.n	8002b30 <HAL_TIM_ConfigClockSource+0x70>
 8002b2e:	e088      	b.n	8002c42 <HAL_TIM_ConfigClockSource+0x182>
 8002b30:	2280      	movs	r2, #128	@ 0x80
 8002b32:	0152      	lsls	r2, r2, #5
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d900      	bls.n	8002b3a <HAL_TIM_ConfigClockSource+0x7a>
 8002b38:	e07e      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b3a:	2b70      	cmp	r3, #112	@ 0x70
 8002b3c:	d018      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0xb0>
 8002b3e:	d900      	bls.n	8002b42 <HAL_TIM_ConfigClockSource+0x82>
 8002b40:	e07a      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b42:	2b60      	cmp	r3, #96	@ 0x60
 8002b44:	d04f      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x126>
 8002b46:	d900      	bls.n	8002b4a <HAL_TIM_ConfigClockSource+0x8a>
 8002b48:	e076      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b4a:	2b50      	cmp	r3, #80	@ 0x50
 8002b4c:	d03b      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x106>
 8002b4e:	d900      	bls.n	8002b52 <HAL_TIM_ConfigClockSource+0x92>
 8002b50:	e072      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b52:	2b40      	cmp	r3, #64	@ 0x40
 8002b54:	d057      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x146>
 8002b56:	d900      	bls.n	8002b5a <HAL_TIM_ConfigClockSource+0x9a>
 8002b58:	e06e      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b5a:	2b30      	cmp	r3, #48	@ 0x30
 8002b5c:	d063      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x166>
 8002b5e:	d86b      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d060      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x166>
 8002b64:	d868      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d05d      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x166>
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d05b      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x166>
 8002b6e:	e063      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b80:	f000 fa76 	bl	8003070 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2277      	movs	r2, #119	@ 0x77
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	609a      	str	r2, [r3, #8]
      break;
 8002b9c:	e052      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bae:	f000 fa5f 	bl	8003070 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2180      	movs	r1, #128	@ 0x80
 8002bbe:	01c9      	lsls	r1, r1, #7
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
      break;
 8002bc4:	e03e      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	f000 f9d2 	bl	8002f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2150      	movs	r1, #80	@ 0x50
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 fa2c 	bl	800303c <TIM_ITRx_SetConfig>
      break;
 8002be4:	e02e      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf2:	001a      	movs	r2, r3
 8002bf4:	f000 f9f0 	bl	8002fd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2160      	movs	r1, #96	@ 0x60
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 fa1c 	bl	800303c <TIM_ITRx_SetConfig>
      break;
 8002c04:	e01e      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c12:	001a      	movs	r2, r3
 8002c14:	f000 f9b2 	bl	8002f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2140      	movs	r1, #64	@ 0x40
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 fa0c 	bl	800303c <TIM_ITRx_SetConfig>
      break;
 8002c24:	e00e      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0019      	movs	r1, r3
 8002c30:	0010      	movs	r0, r2
 8002c32:	f000 fa03 	bl	800303c <TIM_ITRx_SetConfig>
      break;
 8002c36:	e005      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c38:	230f      	movs	r3, #15
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
      break;
 8002c40:	e000      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c42:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2239      	movs	r2, #57	@ 0x39
 8002c48:	2101      	movs	r1, #1
 8002c4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2238      	movs	r2, #56	@ 0x38
 8002c50:	2100      	movs	r1, #0
 8002c52:	5499      	strb	r1, [r3, r2]

  return status;
 8002c54:	230f      	movs	r3, #15
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	781b      	ldrb	r3, [r3, #0]
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	ffff00ff 	.word	0xffff00ff

08002c68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b002      	add	sp, #8
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c80:	46c0      	nop			@ (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b002      	add	sp, #8
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca0:	46c0      	nop			@ (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb0:	46c0      	nop			@ (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	2380      	movs	r3, #128	@ 0x80
 8002ccc:	05db      	lsls	r3, r3, #23
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d00b      	beq.n	8002cea <TIM_Base_SetConfig+0x32>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a23      	ldr	r2, [pc, #140]	@ (8002d64 <TIM_Base_SetConfig+0xac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <TIM_Base_SetConfig+0x32>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	@ (8002d68 <TIM_Base_SetConfig+0xb0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d003      	beq.n	8002cea <TIM_Base_SetConfig+0x32>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a21      	ldr	r2, [pc, #132]	@ (8002d6c <TIM_Base_SetConfig+0xb4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d108      	bne.n	8002cfc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2270      	movs	r2, #112	@ 0x70
 8002cee:	4393      	bics	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	2380      	movs	r3, #128	@ 0x80
 8002d00:	05db      	lsls	r3, r3, #23
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d00b      	beq.n	8002d1e <TIM_Base_SetConfig+0x66>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a16      	ldr	r2, [pc, #88]	@ (8002d64 <TIM_Base_SetConfig+0xac>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <TIM_Base_SetConfig+0x66>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a15      	ldr	r2, [pc, #84]	@ (8002d68 <TIM_Base_SetConfig+0xb0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d003      	beq.n	8002d1e <TIM_Base_SetConfig+0x66>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a14      	ldr	r2, [pc, #80]	@ (8002d6c <TIM_Base_SetConfig+0xb4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d108      	bne.n	8002d30 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4a13      	ldr	r2, [pc, #76]	@ (8002d70 <TIM_Base_SetConfig+0xb8>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2280      	movs	r2, #128	@ 0x80
 8002d34:	4393      	bics	r3, r2
 8002d36:	001a      	movs	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	615a      	str	r2, [r3, #20]
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b004      	add	sp, #16
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40010800 	.word	0x40010800
 8002d6c:	40011400 	.word	0x40011400
 8002d70:	fffffcff 	.word	0xfffffcff

08002d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4393      	bics	r3, r2
 8002d86:	001a      	movs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2270      	movs	r2, #112	@ 0x70
 8002da2:	4393      	bics	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2203      	movs	r2, #3
 8002daa:	4393      	bics	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	621a      	str	r2, [r3, #32]
}
 8002de4:	46c0      	nop			@ (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b006      	add	sp, #24
 8002dea:	bd80      	pop	{r7, pc}

08002dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	001a      	movs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a13      	ldr	r2, [pc, #76]	@ (8002e68 <TIM_OC2_SetConfig+0x7c>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a12      	ldr	r2, [pc, #72]	@ (8002e6c <TIM_OC2_SetConfig+0x80>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2220      	movs	r2, #32
 8002e36:	4393      	bics	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	621a      	str	r2, [r3, #32]
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b006      	add	sp, #24
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	ffff8fff 	.word	0xffff8fff
 8002e6c:	fffffcff 	.word	0xfffffcff

08002e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee8 <TIM_OC3_SetConfig+0x78>)
 8002e80:	401a      	ands	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2270      	movs	r2, #112	@ 0x70
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	4393      	bics	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002eec <TIM_OC3_SetConfig+0x7c>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	621a      	str	r2, [r3, #32]
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b006      	add	sp, #24
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	fffffeff 	.word	0xfffffeff
 8002eec:	fffffdff 	.word	0xfffffdff

08002ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a1b      	ldr	r2, [pc, #108]	@ (8002f6c <TIM_OC4_SetConfig+0x7c>)
 8002f00:	401a      	ands	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <TIM_OC4_SetConfig+0x80>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a14      	ldr	r2, [pc, #80]	@ (8002f74 <TIM_OC4_SetConfig+0x84>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	4a10      	ldr	r2, [pc, #64]	@ (8002f78 <TIM_OC4_SetConfig+0x88>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	031b      	lsls	r3, r3, #12
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b006      	add	sp, #24
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	ffffefff 	.word	0xffffefff
 8002f70:	ffff8fff 	.word	0xffff8fff
 8002f74:	fffffcff 	.word	0xfffffcff
 8002f78:	ffffdfff 	.word	0xffffdfff

08002f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	2201      	movs	r2, #1
 8002f94:	4393      	bics	r3, r2
 8002f96:	001a      	movs	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	22f0      	movs	r2, #240	@ 0xf0
 8002fa6:	4393      	bics	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	220a      	movs	r2, #10
 8002fb8:	4393      	bics	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	621a      	str	r2, [r3, #32]
}
 8002fd0:	46c0      	nop			@ (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b006      	add	sp, #24
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	4393      	bics	r3, r2
 8002fec:	001a      	movs	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	4a0d      	ldr	r2, [pc, #52]	@ (8003038 <TIM_TI2_ConfigInputStage+0x60>)
 8003002:	4013      	ands	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	031b      	lsls	r3, r3, #12
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	22a0      	movs	r2, #160	@ 0xa0
 8003014:	4393      	bics	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	46c0      	nop			@ (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b006      	add	sp, #24
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	ffff0fff 	.word	0xffff0fff

0800303c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2270      	movs	r2, #112	@ 0x70
 8003050:	4393      	bics	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	2207      	movs	r2, #7
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	609a      	str	r2, [r3, #8]
}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b004      	add	sp, #16
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	4a09      	ldr	r2, [pc, #36]	@ (80030ac <TIM_ETR_SetConfig+0x3c>)
 8003088:	4013      	ands	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	021a      	lsls	r2, r3, #8
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	431a      	orrs	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	609a      	str	r2, [r3, #8]
}
 80030a4:	46c0      	nop			@ (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b006      	add	sp, #24
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	ffff00ff 	.word	0xffff00ff

080030b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	221f      	movs	r2, #31
 80030c0:	4013      	ands	r3, r2
 80030c2:	2201      	movs	r2, #1
 80030c4:	409a      	lsls	r2, r3
 80030c6:	0013      	movs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	43d2      	mvns	r2, r2
 80030d2:	401a      	ands	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	211f      	movs	r1, #31
 80030e0:	400b      	ands	r3, r1
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4099      	lsls	r1, r3
 80030e6:	000b      	movs	r3, r1
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b006      	add	sp, #24
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2238      	movs	r2, #56	@ 0x38
 8003106:	5c9b      	ldrb	r3, [r3, r2]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800310c:	2302      	movs	r3, #2
 800310e:	e047      	b.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2238      	movs	r2, #56	@ 0x38
 8003114:	2101      	movs	r1, #1
 8003116:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2239      	movs	r2, #57	@ 0x39
 800311c:	2102      	movs	r1, #2
 800311e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2270      	movs	r2, #112	@ 0x70
 8003134:	4393      	bics	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	05db      	lsls	r3, r3, #23
 8003152:	429a      	cmp	r2, r3
 8003154:	d00e      	beq.n	8003174 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a13      	ldr	r2, [pc, #76]	@ (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a10      	ldr	r2, [pc, #64]	@ (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d10c      	bne.n	800318e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2280      	movs	r2, #128	@ 0x80
 8003178:	4393      	bics	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	4313      	orrs	r3, r2
 8003184:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2239      	movs	r2, #57	@ 0x39
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2238      	movs	r2, #56	@ 0x38
 800319a:	2100      	movs	r1, #0
 800319c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	0018      	movs	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b004      	add	sp, #16
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40010800 	.word	0x40010800
 80031b0:	40011400 	.word	0x40011400

080031b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e044      	b.n	8003250 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2278      	movs	r2, #120	@ 0x78
 80031d2:	2100      	movs	r1, #0
 80031d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fd fd8b 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2224      	movs	r2, #36	@ 0x24
 80031e2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2101      	movs	r1, #1
 80031f0:	438a      	bics	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 fb2e 	bl	8003858 <UART_SetConfig>
 80031fc:	0003      	movs	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e024      	b.n	8003250 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f000 fdbf 	bl	8003d94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	490d      	ldr	r1, [pc, #52]	@ (8003258 <HAL_UART_Init+0xa4>)
 8003222:	400a      	ands	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	212a      	movs	r1, #42	@ 0x2a
 8003232:	438a      	bics	r2, r1
 8003234:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0018      	movs	r0, r3
 800324a:	f000 fe57 	bl	8003efc <UART_CheckIdleState>
 800324e:	0003      	movs	r3, r0
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b002      	add	sp, #8
 8003256:	bd80      	pop	{r7, pc}
 8003258:	ffffb7ff 	.word	0xffffb7ff

0800325c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b0ab      	sub	sp, #172	@ 0xac
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	22a4      	movs	r2, #164	@ 0xa4
 800326c:	18b9      	adds	r1, r7, r2
 800326e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	20a0      	movs	r0, #160	@ 0xa0
 8003278:	1839      	adds	r1, r7, r0
 800327a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	219c      	movs	r1, #156	@ 0x9c
 8003284:	1879      	adds	r1, r7, r1
 8003286:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003288:	0011      	movs	r1, r2
 800328a:	18bb      	adds	r3, r7, r2
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a99      	ldr	r2, [pc, #612]	@ (80034f4 <HAL_UART_IRQHandler+0x298>)
 8003290:	4013      	ands	r3, r2
 8003292:	2298      	movs	r2, #152	@ 0x98
 8003294:	18bc      	adds	r4, r7, r2
 8003296:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003298:	18bb      	adds	r3, r7, r2
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d114      	bne.n	80032ca <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032a0:	187b      	adds	r3, r7, r1
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2220      	movs	r2, #32
 80032a6:	4013      	ands	r3, r2
 80032a8:	d00f      	beq.n	80032ca <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032aa:	183b      	adds	r3, r7, r0
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2220      	movs	r2, #32
 80032b0:	4013      	ands	r3, r2
 80032b2:	d00a      	beq.n	80032ca <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d100      	bne.n	80032be <HAL_UART_IRQHandler+0x62>
 80032bc:	e2a0      	b.n	8003800 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	0010      	movs	r0, r2
 80032c6:	4798      	blx	r3
      }
      return;
 80032c8:	e29a      	b.n	8003800 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032ca:	2398      	movs	r3, #152	@ 0x98
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d100      	bne.n	80032d6 <HAL_UART_IRQHandler+0x7a>
 80032d4:	e114      	b.n	8003500 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032d6:	239c      	movs	r3, #156	@ 0x9c
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2201      	movs	r2, #1
 80032de:	4013      	ands	r3, r2
 80032e0:	d106      	bne.n	80032f0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032e2:	23a0      	movs	r3, #160	@ 0xa0
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a83      	ldr	r2, [pc, #524]	@ (80034f8 <HAL_UART_IRQHandler+0x29c>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	d100      	bne.n	80032f0 <HAL_UART_IRQHandler+0x94>
 80032ee:	e107      	b.n	8003500 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032f0:	23a4      	movs	r3, #164	@ 0xa4
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	4013      	ands	r3, r2
 80032fa:	d012      	beq.n	8003322 <HAL_UART_IRQHandler+0xc6>
 80032fc:	23a0      	movs	r3, #160	@ 0xa0
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	2380      	movs	r3, #128	@ 0x80
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4013      	ands	r3, r2
 8003308:	d00b      	beq.n	8003322 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2201      	movs	r2, #1
 8003310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2284      	movs	r2, #132	@ 0x84
 8003316:	589b      	ldr	r3, [r3, r2]
 8003318:	2201      	movs	r2, #1
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2184      	movs	r1, #132	@ 0x84
 8003320:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003322:	23a4      	movs	r3, #164	@ 0xa4
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2202      	movs	r2, #2
 800332a:	4013      	ands	r3, r2
 800332c:	d011      	beq.n	8003352 <HAL_UART_IRQHandler+0xf6>
 800332e:	239c      	movs	r3, #156	@ 0x9c
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2201      	movs	r2, #1
 8003336:	4013      	ands	r3, r2
 8003338:	d00b      	beq.n	8003352 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2202      	movs	r2, #2
 8003340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2284      	movs	r2, #132	@ 0x84
 8003346:	589b      	ldr	r3, [r3, r2]
 8003348:	2204      	movs	r2, #4
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2184      	movs	r1, #132	@ 0x84
 8003350:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003352:	23a4      	movs	r3, #164	@ 0xa4
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2204      	movs	r2, #4
 800335a:	4013      	ands	r3, r2
 800335c:	d011      	beq.n	8003382 <HAL_UART_IRQHandler+0x126>
 800335e:	239c      	movs	r3, #156	@ 0x9c
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2201      	movs	r2, #1
 8003366:	4013      	ands	r3, r2
 8003368:	d00b      	beq.n	8003382 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2204      	movs	r2, #4
 8003370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2284      	movs	r2, #132	@ 0x84
 8003376:	589b      	ldr	r3, [r3, r2]
 8003378:	2202      	movs	r2, #2
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2184      	movs	r1, #132	@ 0x84
 8003380:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003382:	23a4      	movs	r3, #164	@ 0xa4
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2208      	movs	r2, #8
 800338a:	4013      	ands	r3, r2
 800338c:	d017      	beq.n	80033be <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800338e:	23a0      	movs	r3, #160	@ 0xa0
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2220      	movs	r2, #32
 8003396:	4013      	ands	r3, r2
 8003398:	d105      	bne.n	80033a6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800339a:	239c      	movs	r3, #156	@ 0x9c
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2201      	movs	r2, #1
 80033a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033a4:	d00b      	beq.n	80033be <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2208      	movs	r2, #8
 80033ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2284      	movs	r2, #132	@ 0x84
 80033b2:	589b      	ldr	r3, [r3, r2]
 80033b4:	2208      	movs	r2, #8
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2184      	movs	r1, #132	@ 0x84
 80033bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033be:	23a4      	movs	r3, #164	@ 0xa4
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2380      	movs	r3, #128	@ 0x80
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	4013      	ands	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_UART_IRQHandler+0x198>
 80033cc:	23a0      	movs	r3, #160	@ 0xa0
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	2380      	movs	r3, #128	@ 0x80
 80033d4:	04db      	lsls	r3, r3, #19
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00c      	beq.n	80033f4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2280      	movs	r2, #128	@ 0x80
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2284      	movs	r2, #132	@ 0x84
 80033e8:	589b      	ldr	r3, [r3, r2]
 80033ea:	2220      	movs	r2, #32
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2184      	movs	r1, #132	@ 0x84
 80033f2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2284      	movs	r2, #132	@ 0x84
 80033f8:	589b      	ldr	r3, [r3, r2]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d100      	bne.n	8003400 <HAL_UART_IRQHandler+0x1a4>
 80033fe:	e201      	b.n	8003804 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003400:	23a4      	movs	r3, #164	@ 0xa4
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2220      	movs	r2, #32
 8003408:	4013      	ands	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800340c:	23a0      	movs	r3, #160	@ 0xa0
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2220      	movs	r2, #32
 8003414:	4013      	ands	r3, r2
 8003416:	d008      	beq.n	800342a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	0010      	movs	r0, r2
 8003428:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2284      	movs	r2, #132	@ 0x84
 800342e:	589b      	ldr	r3, [r3, r2]
 8003430:	2194      	movs	r1, #148	@ 0x94
 8003432:	187a      	adds	r2, r7, r1
 8003434:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2240      	movs	r2, #64	@ 0x40
 800343e:	4013      	ands	r3, r2
 8003440:	2b40      	cmp	r3, #64	@ 0x40
 8003442:	d004      	beq.n	800344e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003444:	187b      	adds	r3, r7, r1
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2228      	movs	r2, #40	@ 0x28
 800344a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800344c:	d047      	beq.n	80034de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 fe65 	bl	8004120 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2240      	movs	r2, #64	@ 0x40
 800345e:	4013      	ands	r3, r2
 8003460:	2b40      	cmp	r3, #64	@ 0x40
 8003462:	d137      	bne.n	80034d4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003464:	f3ef 8310 	mrs	r3, PRIMASK
 8003468:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800346a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800346c:	2090      	movs	r0, #144	@ 0x90
 800346e:	183a      	adds	r2, r7, r0
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	2301      	movs	r3, #1
 8003474:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003478:	f383 8810 	msr	PRIMASK, r3
}
 800347c:	46c0      	nop			@ (mov r8, r8)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2140      	movs	r1, #64	@ 0x40
 800348a:	438a      	bics	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	183b      	adds	r3, r7, r0
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003494:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003496:	f383 8810 	msr	PRIMASK, r3
}
 800349a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a8:	4a14      	ldr	r2, [pc, #80]	@ (80034fc <HAL_UART_IRQHandler+0x2a0>)
 80034aa:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7fd fe23 	bl	80010fc <HAL_DMA_Abort_IT>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d01a      	beq.n	80034f0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c4:	0018      	movs	r0, r3
 80034c6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c8:	e012      	b.n	80034f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 f9af 	bl	8003830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d2:	e00d      	b.n	80034f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f000 f9aa 	bl	8003830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034dc:	e008      	b.n	80034f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 f9a5 	bl	8003830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2284      	movs	r2, #132	@ 0x84
 80034ea:	2100      	movs	r1, #0
 80034ec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80034ee:	e189      	b.n	8003804 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f0:	46c0      	nop			@ (mov r8, r8)
    return;
 80034f2:	e187      	b.n	8003804 <HAL_UART_IRQHandler+0x5a8>
 80034f4:	0000080f 	.word	0x0000080f
 80034f8:	04000120 	.word	0x04000120
 80034fc:	080041e9 	.word	0x080041e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003504:	2b01      	cmp	r3, #1
 8003506:	d000      	beq.n	800350a <HAL_UART_IRQHandler+0x2ae>
 8003508:	e13b      	b.n	8003782 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800350a:	23a4      	movs	r3, #164	@ 0xa4
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2210      	movs	r2, #16
 8003512:	4013      	ands	r3, r2
 8003514:	d100      	bne.n	8003518 <HAL_UART_IRQHandler+0x2bc>
 8003516:	e134      	b.n	8003782 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003518:	23a0      	movs	r3, #160	@ 0xa0
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2210      	movs	r2, #16
 8003520:	4013      	ands	r3, r2
 8003522:	d100      	bne.n	8003526 <HAL_UART_IRQHandler+0x2ca>
 8003524:	e12d      	b.n	8003782 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2210      	movs	r2, #16
 800352c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2240      	movs	r2, #64	@ 0x40
 8003536:	4013      	ands	r3, r2
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d000      	beq.n	800353e <HAL_UART_IRQHandler+0x2e2>
 800353c:	e0a1      	b.n	8003682 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	217e      	movs	r1, #126	@ 0x7e
 8003548:	187b      	adds	r3, r7, r1
 800354a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800354c:	187b      	adds	r3, r7, r1
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d100      	bne.n	8003556 <HAL_UART_IRQHandler+0x2fa>
 8003554:	e158      	b.n	8003808 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2258      	movs	r2, #88	@ 0x58
 800355a:	5a9b      	ldrh	r3, [r3, r2]
 800355c:	187a      	adds	r2, r7, r1
 800355e:	8812      	ldrh	r2, [r2, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d300      	bcc.n	8003566 <HAL_UART_IRQHandler+0x30a>
 8003564:	e150      	b.n	8003808 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	187a      	adds	r2, r7, r1
 800356a:	215a      	movs	r1, #90	@ 0x5a
 800356c:	8812      	ldrh	r2, [r2, #0]
 800356e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2220      	movs	r2, #32
 800357a:	4013      	ands	r3, r2
 800357c:	d16f      	bne.n	800365e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357e:	f3ef 8310 	mrs	r3, PRIMASK
 8003582:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003586:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003588:	2301      	movs	r3, #1
 800358a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	499e      	ldr	r1, [pc, #632]	@ (8003818 <HAL_UART_IRQHandler+0x5bc>)
 80035a0:	400a      	ands	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035aa:	f383 8810 	msr	PRIMASK, r3
}
 80035ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b0:	f3ef 8310 	mrs	r3, PRIMASK
 80035b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80035b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80035ba:	2301      	movs	r3, #1
 80035bc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c0:	f383 8810 	msr	PRIMASK, r3
}
 80035c4:	46c0      	nop			@ (mov r8, r8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2101      	movs	r1, #1
 80035d2:	438a      	bics	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e2:	f3ef 8310 	mrs	r3, PRIMASK
 80035e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80035e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ec:	2301      	movs	r3, #1
 80035ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035f2:	f383 8810 	msr	PRIMASK, r3
}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2140      	movs	r1, #64	@ 0x40
 8003604:	438a      	bics	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800360a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2280      	movs	r2, #128	@ 0x80
 8003618:	2120      	movs	r1, #32
 800361a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003622:	f3ef 8310 	mrs	r3, PRIMASK
 8003626:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800362c:	2301      	movs	r3, #1
 800362e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2110      	movs	r1, #16
 8003644:	438a      	bics	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800364a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800364e:	f383 8810 	msr	PRIMASK, r3
}
 8003652:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003658:	0018      	movs	r0, r3
 800365a:	f7fd fd0f 	bl	800107c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2258      	movs	r2, #88	@ 0x58
 8003668:	5a9a      	ldrh	r2, [r3, r2]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	215a      	movs	r1, #90	@ 0x5a
 800366e:	5a5b      	ldrh	r3, [r3, r1]
 8003670:	b29b      	uxth	r3, r3
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0011      	movs	r1, r2
 800367a:	0018      	movs	r0, r3
 800367c:	f000 f8e0 	bl	8003840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003680:	e0c2      	b.n	8003808 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2258      	movs	r2, #88	@ 0x58
 8003686:	5a99      	ldrh	r1, [r3, r2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	225a      	movs	r2, #90	@ 0x5a
 800368c:	5a9b      	ldrh	r3, [r3, r2]
 800368e:	b29a      	uxth	r2, r3
 8003690:	208e      	movs	r0, #142	@ 0x8e
 8003692:	183b      	adds	r3, r7, r0
 8003694:	1a8a      	subs	r2, r1, r2
 8003696:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	225a      	movs	r2, #90	@ 0x5a
 800369c:	5a9b      	ldrh	r3, [r3, r2]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d100      	bne.n	80036a6 <HAL_UART_IRQHandler+0x44a>
 80036a4:	e0b2      	b.n	800380c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80036a6:	183b      	adds	r3, r7, r0
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d100      	bne.n	80036b0 <HAL_UART_IRQHandler+0x454>
 80036ae:	e0ad      	b.n	800380c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b0:	f3ef 8310 	mrs	r3, PRIMASK
 80036b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80036b6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b8:	2488      	movs	r4, #136	@ 0x88
 80036ba:	193a      	adds	r2, r7, r4
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	2301      	movs	r3, #1
 80036c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f383 8810 	msr	PRIMASK, r3
}
 80036c8:	46c0      	nop			@ (mov r8, r8)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4951      	ldr	r1, [pc, #324]	@ (800381c <HAL_UART_IRQHandler+0x5c0>)
 80036d6:	400a      	ands	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	193b      	adds	r3, r7, r4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f383 8810 	msr	PRIMASK, r3
}
 80036e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80036ee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f0:	2484      	movs	r4, #132	@ 0x84
 80036f2:	193a      	adds	r2, r7, r4
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	2301      	movs	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f383 8810 	msr	PRIMASK, r3
}
 8003700:	46c0      	nop			@ (mov r8, r8)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	438a      	bics	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	193b      	adds	r3, r7, r4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	f383 8810 	msr	PRIMASK, r3
}
 800371e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2280      	movs	r2, #128	@ 0x80
 8003724:	2120      	movs	r1, #32
 8003726:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003734:	f3ef 8310 	mrs	r3, PRIMASK
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	2480      	movs	r4, #128	@ 0x80
 800373e:	193a      	adds	r2, r7, r4
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	2301      	movs	r3, #1
 8003744:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003748:	f383 8810 	msr	PRIMASK, r3
}
 800374c:	46c0      	nop			@ (mov r8, r8)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2110      	movs	r1, #16
 800375a:	438a      	bics	r2, r1
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	193b      	adds	r3, r7, r4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003772:	183b      	adds	r3, r7, r0
 8003774:	881a      	ldrh	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0011      	movs	r1, r2
 800377a:	0018      	movs	r0, r3
 800377c:	f000 f860 	bl	8003840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003780:	e044      	b.n	800380c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003782:	23a4      	movs	r3, #164	@ 0xa4
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	2380      	movs	r3, #128	@ 0x80
 800378a:	035b      	lsls	r3, r3, #13
 800378c:	4013      	ands	r3, r2
 800378e:	d010      	beq.n	80037b2 <HAL_UART_IRQHandler+0x556>
 8003790:	239c      	movs	r3, #156	@ 0x9c
 8003792:	18fb      	adds	r3, r7, r3
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	2380      	movs	r3, #128	@ 0x80
 8003798:	03db      	lsls	r3, r3, #15
 800379a:	4013      	ands	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2280      	movs	r2, #128	@ 0x80
 80037a4:	0352      	lsls	r2, r2, #13
 80037a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 fd5e 	bl	800426c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037b0:	e02f      	b.n	8003812 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037b2:	23a4      	movs	r3, #164	@ 0xa4
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2280      	movs	r2, #128	@ 0x80
 80037ba:	4013      	ands	r3, r2
 80037bc:	d00f      	beq.n	80037de <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037be:	23a0      	movs	r3, #160	@ 0xa0
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2280      	movs	r2, #128	@ 0x80
 80037c6:	4013      	ands	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d01e      	beq.n	8003810 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	0010      	movs	r0, r2
 80037da:	4798      	blx	r3
    }
    return;
 80037dc:	e018      	b.n	8003810 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037de:	23a4      	movs	r3, #164	@ 0xa4
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2240      	movs	r2, #64	@ 0x40
 80037e6:	4013      	ands	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_UART_IRQHandler+0x5b6>
 80037ea:	23a0      	movs	r3, #160	@ 0xa0
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2240      	movs	r2, #64	@ 0x40
 80037f2:	4013      	ands	r3, r2
 80037f4:	d00d      	beq.n	8003812 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 fd0c 	bl	8004216 <UART_EndTransmit_IT>
    return;
 80037fe:	e008      	b.n	8003812 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003800:	46c0      	nop			@ (mov r8, r8)
 8003802:	e006      	b.n	8003812 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	e004      	b.n	8003812 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	e002      	b.n	8003812 <HAL_UART_IRQHandler+0x5b6>
      return;
 800380c:	46c0      	nop			@ (mov r8, r8)
 800380e:	e000      	b.n	8003812 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003810:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003812:	46bd      	mov	sp, r7
 8003814:	b02b      	add	sp, #172	@ 0xac
 8003816:	bd90      	pop	{r4, r7, pc}
 8003818:	fffffeff 	.word	0xfffffeff
 800381c:	fffffedf 	.word	0xfffffedf

08003820 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	000a      	movs	r2, r1
 800384a:	1cbb      	adds	r3, r7, #2
 800384c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003858:	b5b0      	push	{r4, r5, r7, lr}
 800385a:	b08e      	sub	sp, #56	@ 0x38
 800385c:	af00      	add	r7, sp, #0
 800385e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003860:	231a      	movs	r3, #26
 8003862:	2218      	movs	r2, #24
 8003864:	189b      	adds	r3, r3, r2
 8003866:	19db      	adds	r3, r3, r7
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	431a      	orrs	r2, r3
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	431a      	orrs	r2, r3
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4313      	orrs	r3, r2
 8003882:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4ac3      	ldr	r2, [pc, #780]	@ (8003b98 <UART_SetConfig+0x340>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4abe      	ldr	r2, [pc, #760]	@ (8003b9c <UART_SetConfig+0x344>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	0019      	movs	r1, r3
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4ab8      	ldr	r2, [pc, #736]	@ (8003ba0 <UART_SetConfig+0x348>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038c8:	4313      	orrs	r3, r2
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	4ab4      	ldr	r2, [pc, #720]	@ (8003ba4 <UART_SetConfig+0x34c>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	0019      	movs	r1, r3
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038de:	430a      	orrs	r2, r1
 80038e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4ab0      	ldr	r2, [pc, #704]	@ (8003ba8 <UART_SetConfig+0x350>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d131      	bne.n	8003950 <UART_SetConfig+0xf8>
 80038ec:	4baf      	ldr	r3, [pc, #700]	@ (8003bac <UART_SetConfig+0x354>)
 80038ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f0:	2203      	movs	r2, #3
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d01d      	beq.n	8003934 <UART_SetConfig+0xdc>
 80038f8:	d823      	bhi.n	8003942 <UART_SetConfig+0xea>
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d00c      	beq.n	8003918 <UART_SetConfig+0xc0>
 80038fe:	d820      	bhi.n	8003942 <UART_SetConfig+0xea>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <UART_SetConfig+0xb2>
 8003904:	2b01      	cmp	r3, #1
 8003906:	d00e      	beq.n	8003926 <UART_SetConfig+0xce>
 8003908:	e01b      	b.n	8003942 <UART_SetConfig+0xea>
 800390a:	231b      	movs	r3, #27
 800390c:	2218      	movs	r2, #24
 800390e:	189b      	adds	r3, r3, r2
 8003910:	19db      	adds	r3, r3, r7
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e0b4      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003918:	231b      	movs	r3, #27
 800391a:	2218      	movs	r2, #24
 800391c:	189b      	adds	r3, r3, r2
 800391e:	19db      	adds	r3, r3, r7
 8003920:	2202      	movs	r2, #2
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e0ad      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003926:	231b      	movs	r3, #27
 8003928:	2218      	movs	r2, #24
 800392a:	189b      	adds	r3, r3, r2
 800392c:	19db      	adds	r3, r3, r7
 800392e:	2204      	movs	r2, #4
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e0a6      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003934:	231b      	movs	r3, #27
 8003936:	2218      	movs	r2, #24
 8003938:	189b      	adds	r3, r3, r2
 800393a:	19db      	adds	r3, r3, r7
 800393c:	2208      	movs	r2, #8
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e09f      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003942:	231b      	movs	r3, #27
 8003944:	2218      	movs	r2, #24
 8003946:	189b      	adds	r3, r3, r2
 8003948:	19db      	adds	r3, r3, r7
 800394a:	2210      	movs	r2, #16
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e098      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a96      	ldr	r2, [pc, #600]	@ (8003bb0 <UART_SetConfig+0x358>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d131      	bne.n	80039be <UART_SetConfig+0x166>
 800395a:	4b94      	ldr	r3, [pc, #592]	@ (8003bac <UART_SetConfig+0x354>)
 800395c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395e:	220c      	movs	r2, #12
 8003960:	4013      	ands	r3, r2
 8003962:	2b0c      	cmp	r3, #12
 8003964:	d01d      	beq.n	80039a2 <UART_SetConfig+0x14a>
 8003966:	d823      	bhi.n	80039b0 <UART_SetConfig+0x158>
 8003968:	2b08      	cmp	r3, #8
 800396a:	d00c      	beq.n	8003986 <UART_SetConfig+0x12e>
 800396c:	d820      	bhi.n	80039b0 <UART_SetConfig+0x158>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <UART_SetConfig+0x120>
 8003972:	2b04      	cmp	r3, #4
 8003974:	d00e      	beq.n	8003994 <UART_SetConfig+0x13c>
 8003976:	e01b      	b.n	80039b0 <UART_SetConfig+0x158>
 8003978:	231b      	movs	r3, #27
 800397a:	2218      	movs	r2, #24
 800397c:	189b      	adds	r3, r3, r2
 800397e:	19db      	adds	r3, r3, r7
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	e07d      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003986:	231b      	movs	r3, #27
 8003988:	2218      	movs	r2, #24
 800398a:	189b      	adds	r3, r3, r2
 800398c:	19db      	adds	r3, r3, r7
 800398e:	2202      	movs	r2, #2
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	e076      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003994:	231b      	movs	r3, #27
 8003996:	2218      	movs	r2, #24
 8003998:	189b      	adds	r3, r3, r2
 800399a:	19db      	adds	r3, r3, r7
 800399c:	2204      	movs	r2, #4
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e06f      	b.n	8003a82 <UART_SetConfig+0x22a>
 80039a2:	231b      	movs	r3, #27
 80039a4:	2218      	movs	r2, #24
 80039a6:	189b      	adds	r3, r3, r2
 80039a8:	19db      	adds	r3, r3, r7
 80039aa:	2208      	movs	r2, #8
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e068      	b.n	8003a82 <UART_SetConfig+0x22a>
 80039b0:	231b      	movs	r3, #27
 80039b2:	2218      	movs	r2, #24
 80039b4:	189b      	adds	r3, r3, r2
 80039b6:	19db      	adds	r3, r3, r7
 80039b8:	2210      	movs	r2, #16
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e061      	b.n	8003a82 <UART_SetConfig+0x22a>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7c      	ldr	r2, [pc, #496]	@ (8003bb4 <UART_SetConfig+0x35c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d106      	bne.n	80039d6 <UART_SetConfig+0x17e>
 80039c8:	231b      	movs	r3, #27
 80039ca:	2218      	movs	r2, #24
 80039cc:	189b      	adds	r3, r3, r2
 80039ce:	19db      	adds	r3, r3, r7
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	e055      	b.n	8003a82 <UART_SetConfig+0x22a>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a77      	ldr	r2, [pc, #476]	@ (8003bb8 <UART_SetConfig+0x360>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d106      	bne.n	80039ee <UART_SetConfig+0x196>
 80039e0:	231b      	movs	r3, #27
 80039e2:	2218      	movs	r2, #24
 80039e4:	189b      	adds	r3, r3, r2
 80039e6:	19db      	adds	r3, r3, r7
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	e049      	b.n	8003a82 <UART_SetConfig+0x22a>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6b      	ldr	r2, [pc, #428]	@ (8003ba0 <UART_SetConfig+0x348>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d13e      	bne.n	8003a76 <UART_SetConfig+0x21e>
 80039f8:	4b6c      	ldr	r3, [pc, #432]	@ (8003bac <UART_SetConfig+0x354>)
 80039fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039fc:	23c0      	movs	r3, #192	@ 0xc0
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4013      	ands	r3, r2
 8003a02:	22c0      	movs	r2, #192	@ 0xc0
 8003a04:	0112      	lsls	r2, r2, #4
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d027      	beq.n	8003a5a <UART_SetConfig+0x202>
 8003a0a:	22c0      	movs	r2, #192	@ 0xc0
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d82a      	bhi.n	8003a68 <UART_SetConfig+0x210>
 8003a12:	2280      	movs	r2, #128	@ 0x80
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d011      	beq.n	8003a3e <UART_SetConfig+0x1e6>
 8003a1a:	2280      	movs	r2, #128	@ 0x80
 8003a1c:	0112      	lsls	r2, r2, #4
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d822      	bhi.n	8003a68 <UART_SetConfig+0x210>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <UART_SetConfig+0x1d8>
 8003a26:	2280      	movs	r2, #128	@ 0x80
 8003a28:	00d2      	lsls	r2, r2, #3
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <UART_SetConfig+0x1f4>
 8003a2e:	e01b      	b.n	8003a68 <UART_SetConfig+0x210>
 8003a30:	231b      	movs	r3, #27
 8003a32:	2218      	movs	r2, #24
 8003a34:	189b      	adds	r3, r3, r2
 8003a36:	19db      	adds	r3, r3, r7
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e021      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003a3e:	231b      	movs	r3, #27
 8003a40:	2218      	movs	r2, #24
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	19db      	adds	r3, r3, r7
 8003a46:	2202      	movs	r2, #2
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e01a      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003a4c:	231b      	movs	r3, #27
 8003a4e:	2218      	movs	r2, #24
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	19db      	adds	r3, r3, r7
 8003a54:	2204      	movs	r2, #4
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e013      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003a5a:	231b      	movs	r3, #27
 8003a5c:	2218      	movs	r2, #24
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	19db      	adds	r3, r3, r7
 8003a62:	2208      	movs	r2, #8
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e00c      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003a68:	231b      	movs	r3, #27
 8003a6a:	2218      	movs	r2, #24
 8003a6c:	189b      	adds	r3, r3, r2
 8003a6e:	19db      	adds	r3, r3, r7
 8003a70:	2210      	movs	r2, #16
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e005      	b.n	8003a82 <UART_SetConfig+0x22a>
 8003a76:	231b      	movs	r3, #27
 8003a78:	2218      	movs	r2, #24
 8003a7a:	189b      	adds	r3, r3, r2
 8003a7c:	19db      	adds	r3, r3, r7
 8003a7e:	2210      	movs	r2, #16
 8003a80:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a46      	ldr	r2, [pc, #280]	@ (8003ba0 <UART_SetConfig+0x348>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d000      	beq.n	8003a8e <UART_SetConfig+0x236>
 8003a8c:	e09a      	b.n	8003bc4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a8e:	231b      	movs	r3, #27
 8003a90:	2218      	movs	r2, #24
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	19db      	adds	r3, r3, r7
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d01d      	beq.n	8003ad8 <UART_SetConfig+0x280>
 8003a9c:	dc20      	bgt.n	8003ae0 <UART_SetConfig+0x288>
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d015      	beq.n	8003ace <UART_SetConfig+0x276>
 8003aa2:	dc1d      	bgt.n	8003ae0 <UART_SetConfig+0x288>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <UART_SetConfig+0x256>
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d005      	beq.n	8003ab8 <UART_SetConfig+0x260>
 8003aac:	e018      	b.n	8003ae0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aae:	f7fe fb0d 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ab6:	e01c      	b.n	8003af2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ab8:	4b3c      	ldr	r3, [pc, #240]	@ (8003bac <UART_SetConfig+0x354>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2210      	movs	r2, #16
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d002      	beq.n	8003ac8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bbc <UART_SetConfig+0x364>)
 8003ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ac6:	e014      	b.n	8003af2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bc0 <UART_SetConfig+0x368>)
 8003aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003acc:	e011      	b.n	8003af2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ace:	f7fe fa4d 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ad6:	e00c      	b.n	8003af2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ade:	e008      	b.n	8003af2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003ae4:	231a      	movs	r3, #26
 8003ae6:	2218      	movs	r2, #24
 8003ae8:	189b      	adds	r3, r3, r2
 8003aea:	19db      	adds	r3, r3, r7
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
        break;
 8003af0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d100      	bne.n	8003afa <UART_SetConfig+0x2a2>
 8003af8:	e133      	b.n	8003d62 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	0013      	movs	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d305      	bcc.n	8003b16 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d906      	bls.n	8003b24 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003b16:	231a      	movs	r3, #26
 8003b18:	2218      	movs	r2, #24
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	19db      	adds	r3, r3, r7
 8003b1e:	2201      	movs	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e11e      	b.n	8003d62 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	6939      	ldr	r1, [r7, #16]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	000b      	movs	r3, r1
 8003b32:	0e1b      	lsrs	r3, r3, #24
 8003b34:	0010      	movs	r0, r2
 8003b36:	0205      	lsls	r5, r0, #8
 8003b38:	431d      	orrs	r5, r3
 8003b3a:	000b      	movs	r3, r1
 8003b3c:	021c      	lsls	r4, r3, #8
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68b8      	ldr	r0, [r7, #8]
 8003b4c:	68f9      	ldr	r1, [r7, #12]
 8003b4e:	1900      	adds	r0, r0, r4
 8003b50:	4169      	adcs	r1, r5
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f7fc fb5e 	bl	8000220 <__aeabi_uldivmod>
 8003b64:	0002      	movs	r2, r0
 8003b66:	000b      	movs	r3, r1
 8003b68:	0013      	movs	r3, r2
 8003b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b6e:	23c0      	movs	r3, #192	@ 0xc0
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d309      	bcc.n	8003b8a <UART_SetConfig+0x332>
 8003b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	035b      	lsls	r3, r3, #13
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d204      	bcs.n	8003b8a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	e0eb      	b.n	8003d62 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003b8a:	231a      	movs	r3, #26
 8003b8c:	2218      	movs	r2, #24
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	19db      	adds	r3, r3, r7
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e0e4      	b.n	8003d62 <UART_SetConfig+0x50a>
 8003b98:	efff69f3 	.word	0xefff69f3
 8003b9c:	ffffcfff 	.word	0xffffcfff
 8003ba0:	40004800 	.word	0x40004800
 8003ba4:	fffff4ff 	.word	0xfffff4ff
 8003ba8:	40013800 	.word	0x40013800
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40004400 	.word	0x40004400
 8003bb4:	40004c00 	.word	0x40004c00
 8003bb8:	40005000 	.word	0x40005000
 8003bbc:	003d0900 	.word	0x003d0900
 8003bc0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	2380      	movs	r3, #128	@ 0x80
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d000      	beq.n	8003bd2 <UART_SetConfig+0x37a>
 8003bd0:	e070      	b.n	8003cb4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003bd2:	231b      	movs	r3, #27
 8003bd4:	2218      	movs	r2, #24
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	19db      	adds	r3, r3, r7
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d822      	bhi.n	8003c26 <UART_SetConfig+0x3ce>
 8003be0:	009a      	lsls	r2, r3, #2
 8003be2:	4b67      	ldr	r3, [pc, #412]	@ (8003d80 <UART_SetConfig+0x528>)
 8003be4:	18d3      	adds	r3, r2, r3
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bea:	f7fe fa6f 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003bf2:	e021      	b.n	8003c38 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7fe fa80 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003bfc:	e01c      	b.n	8003c38 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bfe:	4b61      	ldr	r3, [pc, #388]	@ (8003d84 <UART_SetConfig+0x52c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2210      	movs	r2, #16
 8003c04:	4013      	ands	r3, r2
 8003c06:	d002      	beq.n	8003c0e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c08:	4b5f      	ldr	r3, [pc, #380]	@ (8003d88 <UART_SetConfig+0x530>)
 8003c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c0c:	e014      	b.n	8003c38 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003d8c <UART_SetConfig+0x534>)
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c12:	e011      	b.n	8003c38 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c14:	f7fe f9aa 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c1c:	e00c      	b.n	8003c38 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1e:	2380      	movs	r3, #128	@ 0x80
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c24:	e008      	b.n	8003c38 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003c2a:	231a      	movs	r3, #26
 8003c2c:	2218      	movs	r2, #24
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	19db      	adds	r3, r3, r7
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
        break;
 8003c36:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d100      	bne.n	8003c40 <UART_SetConfig+0x3e8>
 8003c3e:	e090      	b.n	8003d62 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c42:	005a      	lsls	r2, r3, #1
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	18d2      	adds	r2, r2, r3
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0019      	movs	r1, r3
 8003c52:	0010      	movs	r0, r2
 8003c54:	f7fc fa58 	bl	8000108 <__udivsi3>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	2b0f      	cmp	r3, #15
 8003c60:	d921      	bls.n	8003ca6 <UART_SetConfig+0x44e>
 8003c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c64:	2380      	movs	r3, #128	@ 0x80
 8003c66:	025b      	lsls	r3, r3, #9
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d21c      	bcs.n	8003ca6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	200e      	movs	r0, #14
 8003c72:	2418      	movs	r4, #24
 8003c74:	1903      	adds	r3, r0, r4
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	210f      	movs	r1, #15
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c80:	085b      	lsrs	r3, r3, #1
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2207      	movs	r2, #7
 8003c86:	4013      	ands	r3, r2
 8003c88:	b299      	uxth	r1, r3
 8003c8a:	1903      	adds	r3, r0, r4
 8003c8c:	19db      	adds	r3, r3, r7
 8003c8e:	1902      	adds	r2, r0, r4
 8003c90:	19d2      	adds	r2, r2, r7
 8003c92:	8812      	ldrh	r2, [r2, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	1902      	adds	r2, r0, r4
 8003c9e:	19d2      	adds	r2, r2, r7
 8003ca0:	8812      	ldrh	r2, [r2, #0]
 8003ca2:	60da      	str	r2, [r3, #12]
 8003ca4:	e05d      	b.n	8003d62 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca6:	231a      	movs	r3, #26
 8003ca8:	2218      	movs	r2, #24
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	19db      	adds	r3, r3, r7
 8003cae:	2201      	movs	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e056      	b.n	8003d62 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cb4:	231b      	movs	r3, #27
 8003cb6:	2218      	movs	r2, #24
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d822      	bhi.n	8003d08 <UART_SetConfig+0x4b0>
 8003cc2:	009a      	lsls	r2, r3, #2
 8003cc4:	4b32      	ldr	r3, [pc, #200]	@ (8003d90 <UART_SetConfig+0x538>)
 8003cc6:	18d3      	adds	r3, r2, r3
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe f9fe 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cd4:	e021      	b.n	8003d1a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd6:	f7fe fa0f 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cde:	e01c      	b.n	8003d1a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ce0:	4b28      	ldr	r3, [pc, #160]	@ (8003d84 <UART_SetConfig+0x52c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d002      	beq.n	8003cf0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003cea:	4b27      	ldr	r3, [pc, #156]	@ (8003d88 <UART_SetConfig+0x530>)
 8003cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003cee:	e014      	b.n	8003d1a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003cf0:	4b26      	ldr	r3, [pc, #152]	@ (8003d8c <UART_SetConfig+0x534>)
 8003cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cf4:	e011      	b.n	8003d1a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cf6:	f7fe f939 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cfe:	e00c      	b.n	8003d1a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d00:	2380      	movs	r3, #128	@ 0x80
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d06:	e008      	b.n	8003d1a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003d0c:	231a      	movs	r3, #26
 8003d0e:	2218      	movs	r2, #24
 8003d10:	189b      	adds	r3, r3, r2
 8003d12:	19db      	adds	r3, r3, r7
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
        break;
 8003d18:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	085a      	lsrs	r2, r3, #1
 8003d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d28:	18d2      	adds	r2, r2, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	0019      	movs	r1, r3
 8003d30:	0010      	movs	r0, r2
 8003d32:	f7fc f9e9 	bl	8000108 <__udivsi3>
 8003d36:	0003      	movs	r3, r0
 8003d38:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	2b0f      	cmp	r3, #15
 8003d3e:	d90a      	bls.n	8003d56 <UART_SetConfig+0x4fe>
 8003d40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d42:	2380      	movs	r3, #128	@ 0x80
 8003d44:	025b      	lsls	r3, r3, #9
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d205      	bcs.n	8003d56 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60da      	str	r2, [r3, #12]
 8003d54:	e005      	b.n	8003d62 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003d56:	231a      	movs	r3, #26
 8003d58:	2218      	movs	r2, #24
 8003d5a:	189b      	adds	r3, r3, r2
 8003d5c:	19db      	adds	r3, r3, r7
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	2200      	movs	r2, #0
 8003d66:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d6e:	231a      	movs	r3, #26
 8003d70:	2218      	movs	r2, #24
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	19db      	adds	r3, r3, r7
 8003d76:	781b      	ldrb	r3, [r3, #0]
}
 8003d78:	0018      	movs	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b00e      	add	sp, #56	@ 0x38
 8003d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d80:	08004310 	.word	0x08004310
 8003d84:	40021000 	.word	0x40021000
 8003d88:	003d0900 	.word	0x003d0900
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	08004334 	.word	0x08004334

08003d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	2201      	movs	r2, #1
 8003da2:	4013      	ands	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed8 <UART_AdvFeatureConfig+0x144>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a43      	ldr	r2, [pc, #268]	@ (8003edc <UART_AdvFeatureConfig+0x148>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	2204      	movs	r2, #4
 8003de6:	4013      	ands	r3, r2
 8003de8:	d00b      	beq.n	8003e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ee0 <UART_AdvFeatureConfig+0x14c>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	2208      	movs	r2, #8
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4a34      	ldr	r2, [pc, #208]	@ (8003ee4 <UART_AdvFeatureConfig+0x150>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	2210      	movs	r2, #16
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee8 <UART_AdvFeatureConfig+0x154>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	4a25      	ldr	r2, [pc, #148]	@ (8003eec <UART_AdvFeatureConfig+0x158>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	2240      	movs	r2, #64	@ 0x40
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d01d      	beq.n	8003eae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <UART_AdvFeatureConfig+0x15c>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e8e:	2380      	movs	r3, #128	@ 0x80
 8003e90:	035b      	lsls	r3, r3, #13
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d10b      	bne.n	8003eae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a15      	ldr	r2, [pc, #84]	@ (8003ef4 <UART_AdvFeatureConfig+0x160>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	2280      	movs	r2, #128	@ 0x80
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef8 <UART_AdvFeatureConfig+0x164>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
  }
}
 8003ed0:	46c0      	nop			@ (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	fffdffff 	.word	0xfffdffff
 8003edc:	fffeffff 	.word	0xfffeffff
 8003ee0:	fffbffff 	.word	0xfffbffff
 8003ee4:	ffff7fff 	.word	0xffff7fff
 8003ee8:	ffffefff 	.word	0xffffefff
 8003eec:	ffffdfff 	.word	0xffffdfff
 8003ef0:	ffefffff 	.word	0xffefffff
 8003ef4:	ff9fffff 	.word	0xff9fffff
 8003ef8:	fff7ffff 	.word	0xfff7ffff

08003efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b092      	sub	sp, #72	@ 0x48
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2284      	movs	r2, #132	@ 0x84
 8003f08:	2100      	movs	r1, #0
 8003f0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f0c:	f7fc ffce 	bl	8000eac <HAL_GetTick>
 8003f10:	0003      	movs	r3, r0
 8003f12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d12c      	bne.n	8003f7c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f24:	2280      	movs	r2, #128	@ 0x80
 8003f26:	0391      	lsls	r1, r2, #14
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4a46      	ldr	r2, [pc, #280]	@ (8004044 <UART_CheckIdleState+0x148>)
 8003f2c:	9200      	str	r2, [sp, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f000 f88c 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003f34:	1e03      	subs	r3, r0, #0
 8003f36:	d021      	beq.n	8003f7c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f38:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f42:	2301      	movs	r3, #1
 8003f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f48:	f383 8810 	msr	PRIMASK, r3
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2180      	movs	r1, #128	@ 0x80
 8003f5a:	438a      	bics	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f64:	f383 8810 	msr	PRIMASK, r3
}
 8003f68:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2278      	movs	r2, #120	@ 0x78
 8003f74:	2100      	movs	r1, #0
 8003f76:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e05f      	b.n	800403c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2204      	movs	r2, #4
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d146      	bne.n	8004018 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f8c:	2280      	movs	r2, #128	@ 0x80
 8003f8e:	03d1      	lsls	r1, r2, #15
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4a2c      	ldr	r2, [pc, #176]	@ (8004044 <UART_CheckIdleState+0x148>)
 8003f94:	9200      	str	r2, [sp, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f000 f858 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003f9c:	1e03      	subs	r3, r0, #0
 8003f9e:	d03b      	beq.n	8004018 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003faa:	2301      	movs	r3, #1
 8003fac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f383 8810 	msr	PRIMASK, r3
}
 8003fb4:	46c0      	nop			@ (mov r8, r8)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4921      	ldr	r1, [pc, #132]	@ (8004048 <UART_CheckIdleState+0x14c>)
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f383 8810 	msr	PRIMASK, r3
}
 8003fd0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fd8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fdc:	2301      	movs	r3, #1
 8003fde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f383 8810 	msr	PRIMASK, r3
}
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	438a      	bics	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	f383 8810 	msr	PRIMASK, r3
}
 8004002:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2280      	movs	r2, #128	@ 0x80
 8004008:	2120      	movs	r1, #32
 800400a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2278      	movs	r2, #120	@ 0x78
 8004010:	2100      	movs	r1, #0
 8004012:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e011      	b.n	800403c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2280      	movs	r2, #128	@ 0x80
 8004022:	2120      	movs	r1, #32
 8004024:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2278      	movs	r2, #120	@ 0x78
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b010      	add	sp, #64	@ 0x40
 8004042:	bd80      	pop	{r7, pc}
 8004044:	01ffffff 	.word	0x01ffffff
 8004048:	fffffedf 	.word	0xfffffedf

0800404c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	1dfb      	adds	r3, r7, #7
 800405a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405c:	e04b      	b.n	80040f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	3301      	adds	r3, #1
 8004062:	d048      	beq.n	80040f6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004064:	f7fc ff22 	bl	8000eac <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e04b      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2204      	movs	r2, #4
 8004086:	4013      	ands	r3, r2
 8004088:	d035      	beq.n	80040f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2208      	movs	r2, #8
 8004092:	4013      	ands	r3, r2
 8004094:	2b08      	cmp	r3, #8
 8004096:	d111      	bne.n	80040bc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2208      	movs	r2, #8
 800409e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	0018      	movs	r0, r3
 80040a4:	f000 f83c 	bl	8004120 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2284      	movs	r2, #132	@ 0x84
 80040ac:	2108      	movs	r1, #8
 80040ae:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2278      	movs	r2, #120	@ 0x78
 80040b4:	2100      	movs	r1, #0
 80040b6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e02c      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	2380      	movs	r3, #128	@ 0x80
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	401a      	ands	r2, r3
 80040c8:	2380      	movs	r3, #128	@ 0x80
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d112      	bne.n	80040f6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2280      	movs	r2, #128	@ 0x80
 80040d6:	0112      	lsls	r2, r2, #4
 80040d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	0018      	movs	r0, r3
 80040de:	f000 f81f 	bl	8004120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2284      	movs	r2, #132	@ 0x84
 80040e6:	2120      	movs	r1, #32
 80040e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2278      	movs	r2, #120	@ 0x78
 80040ee:	2100      	movs	r1, #0
 80040f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e00f      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	425a      	negs	r2, r3
 8004106:	4153      	adcs	r3, r2
 8004108:	b2db      	uxtb	r3, r3
 800410a:	001a      	movs	r2, r3
 800410c:	1dfb      	adds	r3, r7, #7
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d0a4      	beq.n	800405e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b004      	add	sp, #16
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08e      	sub	sp, #56	@ 0x38
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8310 	mrs	r3, PRIMASK
 800412c:	617b      	str	r3, [r7, #20]
  return(result);
 800412e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004130:	637b      	str	r3, [r7, #52]	@ 0x34
 8004132:	2301      	movs	r3, #1
 8004134:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4926      	ldr	r1, [pc, #152]	@ (80041e4 <UART_EndRxTransfer+0xc4>)
 800414a:	400a      	ands	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004150:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415a:	f3ef 8310 	mrs	r3, PRIMASK
 800415e:	623b      	str	r3, [r7, #32]
  return(result);
 8004160:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004162:	633b      	str	r3, [r7, #48]	@ 0x30
 8004164:	2301      	movs	r3, #1
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	f383 8810 	msr	PRIMASK, r3
}
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2101      	movs	r1, #1
 800417c:	438a      	bics	r2, r1
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	f383 8810 	msr	PRIMASK, r3
}
 800418a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004190:	2b01      	cmp	r3, #1
 8004192:	d118      	bne.n	80041c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004194:	f3ef 8310 	mrs	r3, PRIMASK
 8004198:	60bb      	str	r3, [r7, #8]
  return(result);
 800419a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800419e:	2301      	movs	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f383 8810 	msr	PRIMASK, r3
}
 80041a8:	46c0      	nop			@ (mov r8, r8)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2110      	movs	r1, #16
 80041b6:	438a      	bics	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f383 8810 	msr	PRIMASK, r3
}
 80041c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2280      	movs	r2, #128	@ 0x80
 80041ca:	2120      	movs	r1, #32
 80041cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	46bd      	mov	sp, r7
 80041de:	b00e      	add	sp, #56	@ 0x38
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	fffffedf 	.word	0xfffffedf

080041e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	225a      	movs	r2, #90	@ 0x5a
 80041fa:	2100      	movs	r1, #0
 80041fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2252      	movs	r2, #82	@ 0x52
 8004202:	2100      	movs	r1, #0
 8004204:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff fb11 	bl	8003830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b004      	add	sp, #16
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421e:	f3ef 8310 	mrs	r3, PRIMASK
 8004222:	60bb      	str	r3, [r7, #8]
  return(result);
 8004224:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	2301      	movs	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f383 8810 	msr	PRIMASK, r3
}
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2140      	movs	r1, #64	@ 0x40
 8004240:	438a      	bics	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f383 8810 	msr	PRIMASK, r3
}
 800424e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	0018      	movs	r0, r3
 8004260:	f7ff fade 	bl	8003820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004264:	46c0      	nop			@ (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	b006      	add	sp, #24
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004274:	46c0      	nop			@ (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	b002      	add	sp, #8
 800427a:	bd80      	pop	{r7, pc}

0800427c <memset>:
 800427c:	0003      	movs	r3, r0
 800427e:	1882      	adds	r2, r0, r2
 8004280:	4293      	cmp	r3, r2
 8004282:	d100      	bne.n	8004286 <memset+0xa>
 8004284:	4770      	bx	lr
 8004286:	7019      	strb	r1, [r3, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	e7f9      	b.n	8004280 <memset+0x4>

0800428c <__libc_init_array>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	2600      	movs	r6, #0
 8004290:	4c0c      	ldr	r4, [pc, #48]	@ (80042c4 <__libc_init_array+0x38>)
 8004292:	4d0d      	ldr	r5, [pc, #52]	@ (80042c8 <__libc_init_array+0x3c>)
 8004294:	1b64      	subs	r4, r4, r5
 8004296:	10a4      	asrs	r4, r4, #2
 8004298:	42a6      	cmp	r6, r4
 800429a:	d109      	bne.n	80042b0 <__libc_init_array+0x24>
 800429c:	2600      	movs	r6, #0
 800429e:	f000 f819 	bl	80042d4 <_init>
 80042a2:	4c0a      	ldr	r4, [pc, #40]	@ (80042cc <__libc_init_array+0x40>)
 80042a4:	4d0a      	ldr	r5, [pc, #40]	@ (80042d0 <__libc_init_array+0x44>)
 80042a6:	1b64      	subs	r4, r4, r5
 80042a8:	10a4      	asrs	r4, r4, #2
 80042aa:	42a6      	cmp	r6, r4
 80042ac:	d105      	bne.n	80042ba <__libc_init_array+0x2e>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	00b3      	lsls	r3, r6, #2
 80042b2:	58eb      	ldr	r3, [r5, r3]
 80042b4:	4798      	blx	r3
 80042b6:	3601      	adds	r6, #1
 80042b8:	e7ee      	b.n	8004298 <__libc_init_array+0xc>
 80042ba:	00b3      	lsls	r3, r6, #2
 80042bc:	58eb      	ldr	r3, [r5, r3]
 80042be:	4798      	blx	r3
 80042c0:	3601      	adds	r6, #1
 80042c2:	e7f2      	b.n	80042aa <__libc_init_array+0x1e>
 80042c4:	08004360 	.word	0x08004360
 80042c8:	08004360 	.word	0x08004360
 80042cc:	08004364 	.word	0x08004364
 80042d0:	08004360 	.word	0x08004360

080042d4 <_init>:
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042da:	bc08      	pop	{r3}
 80042dc:	469e      	mov	lr, r3
 80042de:	4770      	bx	lr

080042e0 <_fini>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e6:	bc08      	pop	{r3}
 80042e8:	469e      	mov	lr, r3
 80042ea:	4770      	bx	lr
