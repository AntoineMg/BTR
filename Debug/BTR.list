
BTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056ec  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080057ac  080057ac  000067ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005880  08005880  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005880  08005880  00006880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005888  08005888  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005888  08005888  00006888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800588c  0800588c  0000688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005890  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000006c  080058fc  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080058fc  00007328  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e805  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260b  00000000  00000000  00015899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00017ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a30  00000000  00000000  00018be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001678a  00000000  00000000  00019618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001038e  00000000  00000000  0002fda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f41  00000000  00000000  00040130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7071  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003604  00000000  00000000  000c70b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ca6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005794 	.word	0x08005794

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08005794 	.word	0x08005794

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	@ (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	@ (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4699      	mov	r9, r3
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	469c      	mov	ip, r3
 8000452:	0413      	lsls	r3, r2, #16
 8000454:	4647      	mov	r7, r8
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0404      	lsls	r4, r0, #16
 8000460:	0c24      	lsrs	r4, r4, #16
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	0c10      	lsrs	r0, r2, #16
 8000468:	434b      	muls	r3, r1
 800046a:	4365      	muls	r5, r4
 800046c:	4341      	muls	r1, r0
 800046e:	4360      	muls	r0, r4
 8000470:	0c2c      	lsrs	r4, r5, #16
 8000472:	18c0      	adds	r0, r0, r3
 8000474:	1824      	adds	r4, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	42a3      	cmp	r3, r4
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4356      	muls	r6, r2
 800048a:	0c23      	lsrs	r3, r4, #16
 800048c:	042d      	lsls	r5, r5, #16
 800048e:	0c2d      	lsrs	r5, r5, #16
 8000490:	1989      	adds	r1, r1, r6
 8000492:	4463      	add	r3, ip
 8000494:	0424      	lsls	r4, r4, #16
 8000496:	1960      	adds	r0, r4, r5
 8000498:	18c9      	adds	r1, r1, r3
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8d8 	bl	8000678 <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8d3 	bl	8000678 <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__clzsi2>:
 800063c:	211c      	movs	r1, #28
 800063e:	2301      	movs	r3, #1
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	4298      	cmp	r0, r3
 8000644:	d301      	bcc.n	800064a <__clzsi2+0xe>
 8000646:	0c00      	lsrs	r0, r0, #16
 8000648:	3910      	subs	r1, #16
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	4298      	cmp	r0, r3
 800064e:	d301      	bcc.n	8000654 <__clzsi2+0x18>
 8000650:	0a00      	lsrs	r0, r0, #8
 8000652:	3908      	subs	r1, #8
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	4298      	cmp	r0, r3
 8000658:	d301      	bcc.n	800065e <__clzsi2+0x22>
 800065a:	0900      	lsrs	r0, r0, #4
 800065c:	3904      	subs	r1, #4
 800065e:	a202      	add	r2, pc, #8	@ (adr r2, 8000668 <__clzsi2+0x2c>)
 8000660:	5c10      	ldrb	r0, [r2, r0]
 8000662:	1840      	adds	r0, r0, r1
 8000664:	4770      	bx	lr
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	02020304 	.word	0x02020304
 800066c:	01010101 	.word	0x01010101
	...

08000678 <__clzdi2>:
 8000678:	b510      	push	{r4, lr}
 800067a:	2900      	cmp	r1, #0
 800067c:	d103      	bne.n	8000686 <__clzdi2+0xe>
 800067e:	f7ff ffdd 	bl	800063c <__clzsi2>
 8000682:	3020      	adds	r0, #32
 8000684:	e002      	b.n	800068c <__clzdi2+0x14>
 8000686:	0008      	movs	r0, r1
 8000688:	f7ff ffd8 	bl	800063c <__clzsi2>
 800068c:	bd10      	pop	{r4, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)

08000690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b08b      	sub	sp, #44	@ 0x2c
 8000694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	2414      	movs	r4, #20
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2314      	movs	r3, #20
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f004 f9eb 	bl	8004a7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b61      	ldr	r3, [pc, #388]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006aa:	4b60      	ldr	r3, [pc, #384]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006ac:	2104      	movs	r1, #4
 80006ae:	430a      	orrs	r2, r1
 80006b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006b2:	4b5e      	ldr	r3, [pc, #376]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006b6:	2204      	movs	r2, #4
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	4b5b      	ldr	r3, [pc, #364]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006c2:	4b5a      	ldr	r3, [pc, #360]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	430a      	orrs	r2, r1
 80006c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ca:	4b58      	ldr	r3, [pc, #352]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b55      	ldr	r3, [pc, #340]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006da:	4b54      	ldr	r3, [pc, #336]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006dc:	2101      	movs	r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006e2:	4b52      	ldr	r3, [pc, #328]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006e6:	2201      	movs	r2, #1
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b4f      	ldr	r3, [pc, #316]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006f2:	4b4e      	ldr	r3, [pc, #312]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006f4:	2102      	movs	r1, #2
 80006f6:	430a      	orrs	r2, r1
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006fa:	4b4c      	ldr	r3, [pc, #304]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006fe:	2202      	movs	r2, #2
 8000700:	4013      	ands	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CapteurUs1Trig_Pin|cd3_Pin, GPIO_PIN_RESET);
 8000706:	2382      	movs	r3, #130	@ 0x82
 8000708:	0159      	lsls	r1, r3, #5
 800070a:	23a0      	movs	r3, #160	@ 0xa0
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	2200      	movs	r2, #0
 8000710:	0018      	movs	r0, r3
 8000712:	f001 f95c 	bl	80019ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CapteurUs2Trig_GPIO_Port, CapteurUs2Trig_Pin, GPIO_PIN_RESET);
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	015b      	lsls	r3, r3, #5
 800071a:	4845      	ldr	r0, [pc, #276]	@ (8000830 <MX_GPIO_Init+0x1a0>)
 800071c:	2200      	movs	r2, #0
 800071e:	0019      	movs	r1, r3
 8000720:	f001 f955 	bl	80019ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin|Mot1_Ctrl2_Pin|Mot2_Ctrl1_Pin|Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 8000724:	23f0      	movs	r3, #240	@ 0xf0
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4842      	ldr	r0, [pc, #264]	@ (8000834 <MX_GPIO_Init+0x1a4>)
 800072a:	2200      	movs	r2, #0
 800072c:	0019      	movs	r1, r3
 800072e:	f001 f94e 	bl	80019ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2280      	movs	r2, #128	@ 0x80
 8000736:	0192      	lsls	r2, r2, #6
 8000738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2284      	movs	r2, #132	@ 0x84
 800073e:	0392      	lsls	r2, r2, #14
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000748:	193b      	adds	r3, r7, r4
 800074a:	4a3a      	ldr	r2, [pc, #232]	@ (8000834 <MX_GPIO_Init+0x1a4>)
 800074c:	0019      	movs	r1, r3
 800074e:	0010      	movs	r0, r2
 8000750:	f000 ffa2 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CapteurUs1Echo_Pin|cd2_Pin;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2282      	movs	r2, #130	@ 0x82
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	22c4      	movs	r2, #196	@ 0xc4
 8000760:	0392      	lsls	r2, r2, #14
 8000762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	193a      	adds	r2, r7, r4
 800076c:	23a0      	movs	r3, #160	@ 0xa0
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f000 ff90 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CapteurUs1Trig_Pin|cd3_Pin;
 8000778:	0021      	movs	r1, r4
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2282      	movs	r2, #130	@ 0x82
 800077e:	0152      	lsls	r2, r2, #5
 8000780:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	000c      	movs	r4, r1
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2201      	movs	r2, #1
 8000788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	193a      	adds	r2, r7, r4
 8000798:	23a0      	movs	r3, #160	@ 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 ff7a 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CapteurUs2Trig_Pin;
 80007a4:	0021      	movs	r1, r4
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2280      	movs	r2, #128	@ 0x80
 80007aa:	0152      	lsls	r2, r2, #5
 80007ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	000c      	movs	r4, r1
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	2201      	movs	r2, #1
 80007b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CapteurUs2Trig_GPIO_Port, &GPIO_InitStruct);
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000830 <MX_GPIO_Init+0x1a0>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f000 ff65 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CapteurUs2Echo_Pin|Mot1_Enc_A_Pin|Mot1_Enc_B_Pin;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	4a19      	ldr	r2, [pc, #100]	@ (8000838 <MX_GPIO_Init+0x1a8>)
 80007d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <MX_GPIO_Init+0x1a0>)
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f000 ff56 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Mot1_Ctrl1_Pin|Mot1_Ctrl2_Pin|Mot2_Ctrl1_Pin|Mot2_Ctrl2_Pin;
 80007ec:	0021      	movs	r1, r4
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	22f0      	movs	r2, #240	@ 0xf0
 80007f2:	0092      	lsls	r2, r2, #2
 80007f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2201      	movs	r2, #1
 80007fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	187b      	adds	r3, r7, r1
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <MX_GPIO_Init+0x1a4>)
 800080c:	0019      	movs	r1, r3
 800080e:	0010      	movs	r0, r2
 8000810:	f000 ff42 	bl	8001698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2007      	movs	r0, #7
 800081a:	f000 fe83 	bl	8001524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800081e:	2007      	movs	r0, #7
 8000820:	f000 fe95 	bl	800154e <HAL_NVIC_EnableIRQ>

}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b00b      	add	sp, #44	@ 0x2c
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	50000400 	.word	0x50000400
 8000834:	50000800 	.word	0x50000800
 8000838:	00002018 	.word	0x00002018

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 fd30 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f834 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f7ff ff22 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800084c:	f000 fc84 	bl	8001158 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000850:	f000 fab2 	bl	8000db8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000854:	f000 fb14 	bl	8000e80 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000858:	f000 fb9a 	bl	8000f90 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <main+0x6c>)
 800085e:	2108      	movs	r1, #8
 8000860:	0018      	movs	r0, r3
 8000862:	f002 f973 	bl	8002b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <main+0x6c>)
 8000868:	210c      	movs	r1, #12
 800086a:	0018      	movs	r0, r3
 800086c:	f002 f96e 	bl	8002b4c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <main+0x70>)
 8000872:	213c      	movs	r1, #60	@ 0x3c
 8000874:	0018      	movs	r0, r3
 8000876:	f002 fa9b 	bl	8002db0 <HAL_TIM_Encoder_Start>

  Motors_SetDirection(NEUTRAL);
 800087a:	2000      	movs	r0, #0
 800087c:	f000 f8ca 	bl	8000a14 <Motors_SetDirection>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //GenerePWM(50);
  while (1)
  {
	  Motors_SetDirection(BACKWARD);
 8000880:	2002      	movs	r0, #2
 8000882:	f000 f8c7 	bl	8000a14 <Motors_SetDirection>

	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 12345);

	  //Motors_Move(15,30);

	  Motors_SetSpeed(L_MOTOR, 150);
 8000886:	2196      	movs	r1, #150	@ 0x96
 8000888:	2000      	movs	r0, #0
 800088a:	f000 f947 	bl	8000b1c <Motors_SetSpeed>
	  Motors_SetSpeed(R_MOTOR, 150);
 800088e:	2196      	movs	r1, #150	@ 0x96
 8000890:	2001      	movs	r0, #1
 8000892:	f000 f943 	bl	8000b1c <Motors_SetSpeed>


	  Encoders_GetData();
 8000896:	f000 f963 	bl	8000b60 <Encoders_GetData>
	  HAL_Delay(1000);
 800089a:	23fa      	movs	r3, #250	@ 0xfa
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fd70 	bl	8001384 <HAL_Delay>
	  Motors_SetDirection(BACKWARD);
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	e7eb      	b.n	8000880 <main+0x44>
 80008a8:	200000d0 	.word	0x200000d0
 80008ac:	20000090 	.word	0x20000090

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b09f      	sub	sp, #124	@ 0x7c
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	2440      	movs	r4, #64	@ 0x40
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	0018      	movs	r0, r3
 80008bc:	2338      	movs	r3, #56	@ 0x38
 80008be:	001a      	movs	r2, r3
 80008c0:	2100      	movs	r1, #0
 80008c2:	f004 f8db 	bl	8004a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c6:	232c      	movs	r3, #44	@ 0x2c
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	0018      	movs	r0, r3
 80008cc:	2314      	movs	r3, #20
 80008ce:	001a      	movs	r2, r3
 80008d0:	2100      	movs	r1, #0
 80008d2:	f004 f8d3 	bl	8004a7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	0018      	movs	r0, r3
 80008da:	2328      	movs	r3, #40	@ 0x28
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f004 f8cc 	bl	8004a7c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <SystemClock_Config+0xc8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a24      	ldr	r2, [pc, #144]	@ (800097c <SystemClock_Config+0xcc>)
 80008ea:	401a      	ands	r2, r3
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <SystemClock_Config+0xc8>)
 80008ee:	2180      	movs	r1, #128	@ 0x80
 80008f0:	0109      	lsls	r1, r1, #4
 80008f2:	430a      	orrs	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f6:	0021      	movs	r1, r4
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2202      	movs	r2, #2
 80008fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2201      	movs	r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2210      	movs	r2, #16
 8000908:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	187b      	adds	r3, r7, r1
 8000912:	0018      	movs	r0, r3
 8000914:	f001 f894 	bl	8001a40 <HAL_RCC_OscConfig>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800091c:	f000 f958 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	212c      	movs	r1, #44	@ 0x2c
 8000922:	187b      	adds	r3, r7, r1
 8000924:	220f      	movs	r2, #15
 8000926:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2201      	movs	r2, #1
 800092c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2100      	movs	r1, #0
 8000944:	0018      	movs	r0, r3
 8000946:	f001 fc4f 	bl	80021e8 <HAL_RCC_ClockConfig>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800094e:	f000 f93f 	bl	8000bd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2202      	movs	r2, #2
 8000956:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fe65 	bl	8002630 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800096a:	f000 f931 	bl	8000bd0 <Error_Handler>
  }
}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b01f      	add	sp, #124	@ 0x7c
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	40007000 	.word	0x40007000
 800097c:	ffffe7ff 	.word	0xffffe7ff

08000980 <__io_putchar>:

/* USER CODE BEGIN 4 */
//FONCTIONS

int __io_putchar(int ch){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <__io_putchar+0x20>)
 800098a:	1d39      	adds	r1, r7, #4
 800098c:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <__io_putchar+0x24>)
 800098e:	2201      	movs	r2, #1
 8000990:	f002 fef0 	bl	8003774 <HAL_UART_Transmit>
	return ch;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	0018      	movs	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	0000ffff 	.word	0x0000ffff
 80009a4:	20000150 	.word	0x20000150

080009a8 <HAL_GPIO_EXTI_Callback>:
	//Sortie Etat Bas
	HAL_GPIO_WritePin(CapteurUs1Trig_GPIO_Port, CapteurUs1Trig_Pin, GPIO_PIN_RESET);
}

//Callback lors d'interruptions sur EXTI 4:15
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0002      	movs	r2, r0
 80009b0:	1dbb      	adds	r3, r7, #6
 80009b2:	801a      	strh	r2, [r3, #0]
    // Vérifie quel pin a déclenché l'interruption
    if (GPIO_Pin == CapteurUs1Echo_Pin) {
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	2b20      	cmp	r3, #32
 80009ba:	d121      	bne.n	8000a00 <HAL_GPIO_EXTI_Callback+0x58>

    	//Verif rising
        if (HAL_GPIO_ReadPin(CapteurUs1Echo_GPIO_Port, CapteurUs1Echo_Pin) == GPIO_PIN_SET){
 80009bc:	23a0      	movs	r3, #160	@ 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	2120      	movs	r1, #32
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 ffe6 	bl	8001994 <HAL_GPIO_ReadPin>
 80009c8:	0003      	movs	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d104      	bne.n	80009d8 <HAL_GPIO_EXTI_Callback+0x30>
        	//Lancer le timer
        	HAL_TIM_Base_Start(&htim6);
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <HAL_GPIO_EXTI_Callback+0x60>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 f80b 	bl	80029ec <HAL_TIM_Base_Start>
        	g_int_distCapteurUs1 = TIM6->CNT;
        	TIM6->CNT = 0;

        }
    }
}
 80009d6:	e013      	b.n	8000a00 <HAL_GPIO_EXTI_Callback+0x58>
        else if (HAL_GPIO_ReadPin(CapteurUs1Echo_GPIO_Port, CapteurUs1Echo_Pin) == GPIO_PIN_RESET){
 80009d8:	23a0      	movs	r3, #160	@ 0xa0
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	2120      	movs	r1, #32
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 ffd8 	bl	8001994 <HAL_GPIO_ReadPin>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d10b      	bne.n	8000a00 <HAL_GPIO_EXTI_Callback+0x58>
        	HAL_TIM_Base_Stop(&htim6);
 80009e8:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <HAL_GPIO_EXTI_Callback+0x60>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f002 f848 	bl	8002a80 <HAL_TIM_Base_Stop>
        	g_int_distCapteurUs1 = TIM6->CNT;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x64>)
 80009f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_GPIO_EXTI_Callback+0x68>)
 80009f8:	701a      	strb	r2, [r3, #0]
        	TIM6->CNT = 0;
 80009fa:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000110 	.word	0x20000110
 8000a0c:	40001000 	.word	0x40001000
 8000a10:	20000000 	.word	0x20000000

08000a14 <Motors_SetDirection>:
	    Motors_SetSpeed(L_MOTOR, l_int_Lspeed);
	    Motors_SetSpeed(R_MOTOR, l_int_Rspeed);

}

void Motors_SetDirection(TDirection x_direction){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	701a      	strb	r2, [r3, #0]
	//Gerer les ports CTRL1 et CTRL2 des moteurs
	//Cest par ici qu'on met la securite du delai de changement de dircetion avec
	if(x_direction == NEUTRAL){
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d11a      	bne.n	8000a5e <Motors_SetDirection+0x4a>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_RESET);
 8000a28:	4b3b      	ldr	r3, [pc, #236]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2140      	movs	r1, #64	@ 0x40
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 ffcd 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);
 8000a34:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 ffc7 	bl	80019ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4834      	ldr	r0, [pc, #208]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	0019      	movs	r1, r3
 8000a4a:	f000 ffc0 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4831      	ldr	r0, [pc, #196]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	0019      	movs	r1, r3
 8000a58:	f000 ffb9 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);

		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
	}
}
 8000a5c:	e057      	b.n	8000b0e <Motors_SetDirection+0xfa>
	else if(x_direction == FORWARD){
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d11a      	bne.n	8000a9c <Motors_SetDirection+0x88>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_RESET);
 8000a66:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2140      	movs	r1, #64	@ 0x40
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 ffae 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_SET);
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	2180      	movs	r1, #128	@ 0x80
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 ffa8 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_SET);
 8000a7e:	2380      	movs	r3, #128	@ 0x80
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4825      	ldr	r0, [pc, #148]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	0019      	movs	r1, r3
 8000a88:	f000 ffa1 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4821      	ldr	r0, [pc, #132]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	0019      	movs	r1, r3
 8000a96:	f000 ff9a 	bl	80019ce <HAL_GPIO_WritePin>
}
 8000a9a:	e038      	b.n	8000b0e <Motors_SetDirection+0xfa>
	else if(x_direction == BACKWARD){
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d11a      	bne.n	8000ada <Motors_SetDirection+0xc6>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_SET);
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2140      	movs	r1, #64	@ 0x40
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 ff8f 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);
 8000ab0:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2180      	movs	r1, #128	@ 0x80
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 ff89 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4815      	ldr	r0, [pc, #84]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	f000 ff82 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_SET);
 8000aca:	2380      	movs	r3, #128	@ 0x80
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4812      	ldr	r0, [pc, #72]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	f000 ff7b 	bl	80019ce <HAL_GPIO_WritePin>
}
 8000ad8:	e019      	b.n	8000b0e <Motors_SetDirection+0xfa>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_RESET);
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	2140      	movs	r1, #64	@ 0x40
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 ff74 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2180      	movs	r1, #128	@ 0x80
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 ff6e 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
 8000af2:	2380      	movs	r3, #128	@ 0x80
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4808      	ldr	r0, [pc, #32]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	0019      	movs	r1, r3
 8000afc:	f000 ff67 	bl	80019ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <Motors_SetDirection+0x104>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	0019      	movs	r1, r3
 8000b0a:	f000 ff60 	bl	80019ce <HAL_GPIO_WritePin>
}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	50000800 	.word	0x50000800

08000b1c <Motors_SetSpeed>:
	//Arrete tout les moteurs
	Motors_SetSpeed(L_MOTOR,0);
	Motors_SetSpeed(R_MOTOR,0);
}

void Motors_SetSpeed(TNumMotor x_numMotor, uint8_t x_int_speed){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	0002      	movs	r2, r0
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	1dbb      	adds	r3, r7, #6
 8000b2a:	1c0a      	adds	r2, r1, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
	//Controle chaque moteur individuellement
	if(x_numMotor==L_MOTOR){
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d105      	bne.n	8000b42 <Motors_SetSpeed+0x26>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, x_int_speed);
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <Motors_SetSpeed+0x40>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	1dba      	adds	r2, r7, #6
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	else if(x_numMotor==R_MOTOR){
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, x_int_speed);
		}
}
 8000b40:	e008      	b.n	8000b54 <Motors_SetSpeed+0x38>
	else if(x_numMotor==R_MOTOR){
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d104      	bne.n	8000b54 <Motors_SetSpeed+0x38>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, x_int_speed);
 8000b4a:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <Motors_SetSpeed+0x40>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	1dba      	adds	r2, r7, #6
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000d0 	.word	0x200000d0

08000b60 <Encoders_GetData>:

void Encoders_GetData(void){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
	int32_t l_int_distanceParcourue = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
	int32_t l_int_rpm;

	// Lire la position actuelle
	int32_t positionActuelle = __HAL_TIM_GET_COUNTER(&htim2);
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <Encoders_GetData+0x60>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b70:	60bb      	str	r3, [r7, #8]

	// Calculer la distance parcourue depuis la dernière lecture
	l_int_distanceParcourue = positionActuelle;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	60fb      	str	r3, [r7, #12]

	// Réinitialiser le compteur
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <Encoders_GetData+0x60>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24

	// Ajouter la distance parcourue à la position totale
	g_int_mot1PositionActuelle += l_int_distanceParcourue;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <Encoders_GetData+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	18d2      	adds	r2, r2, r3
 8000b86:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <Encoders_GetData+0x64>)
 8000b88:	601a      	str	r2, [r3, #0]

	l_int_rpm = (l_int_distanceParcourue*30)/224;
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	1a9b      	subs	r3, r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	21e0      	movs	r1, #224	@ 0xe0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff fb4a 	bl	8000230 <__divsi3>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	607b      	str	r3, [r7, #4]

	// Afficher la distance parcourue (ou vitesse)
	printf("\n\n\r Distance parcourue : %ld", l_int_distanceParcourue);
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <Encoders_GetData+0x68>)
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f003 ff58 	bl	8004a5c <iprintf>
	printf("\n\r Vitesse : %i RPM", l_int_rpm);
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <Encoders_GetData+0x6c>)
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f003 ff52 	bl	8004a5c <iprintf>

}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b004      	add	sp, #16
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000090 	.word	0x20000090
 8000bc4:	20000088 	.word	0x20000088
 8000bc8:	080057ac 	.word	0x080057ac
 8000bcc:	080057cc 	.word	0x080057cc

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <HAL_MspInit+0x24>)
 8000be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_MspInit+0x24>)
 8000be6:	2101      	movs	r1, #1
 8000be8:	430a      	orrs	r2, r1
 8000bea:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <HAL_MspInit+0x24>)
 8000bee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <HAL_MspInit+0x24>)
 8000bf2:	2180      	movs	r1, #128	@ 0x80
 8000bf4:	0549      	lsls	r1, r1, #21
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	e7fd      	b.n	8000c08 <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	e7fd      	b.n	8000c10 <HardFault_Handler+0x4>

08000c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 fb8e 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CapteurUs1Echo_Pin);
 8000c3a:	2020      	movs	r0, #32
 8000c3c:	f000 fee4 	bl	8001a08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(cd2_Pin);
 8000c40:	2380      	movs	r3, #128	@ 0x80
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 fedf 	bl	8001a08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c4a:	2380      	movs	r3, #128	@ 0x80
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 feda 	bl	8001a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */


  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <USART2_IRQHandler+0x14>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 fe26 	bl	80038b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	20000150 	.word	0x20000150

08000c74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	e00a      	b.n	8000c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c86:	e000      	b.n	8000c8a <_read+0x16>
 8000c88:	bf00      	nop
 8000c8a:	0001      	movs	r1, r0
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	b2ca      	uxtb	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf0      	blt.n	8000c86 <_read+0x12>
  }

  return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b006      	add	sp, #24
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e009      	b.n	8000cd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff fe59 	bl	8000980 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf1      	blt.n	8000cc0 <_write+0x12>
  }
  return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b006      	add	sp, #24
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_close>:

int _close(int file)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	425b      	negs	r3, r3
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2280      	movs	r2, #128	@ 0x80
 8000d08:	0192      	lsls	r2, r2, #6
 8000d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_isatty>:

int _isatty(int file)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b004      	add	sp, #16
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	@ (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f003 fe8c 	bl	8004a8c <__errno>
 8000d74:	0003      	movs	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	425b      	negs	r3, r3
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	18d2      	adds	r2, r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <_sbrk+0x64>)
 8000d90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b006      	add	sp, #24
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20005000 	.word	0x20005000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	2000008c 	.word	0x2000008c
 8000da8:	20000328 	.word	0x20000328

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b08d      	sub	sp, #52	@ 0x34
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dbe:	240c      	movs	r4, #12
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	2324      	movs	r3, #36	@ 0x24
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f003 fe57 	bl	8004a7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f003 fe50 	bl	8004a7c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ddc:	4b26      	ldr	r3, [pc, #152]	@ (8000e78 <MX_TIM2_Init+0xc0>)
 8000dde:	2280      	movs	r2, #128	@ 0x80
 8000de0:	05d2      	lsls	r2, r2, #23
 8000de2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000de4:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <MX_TIM2_Init+0xc0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <MX_TIM2_Init+0xc0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000df0:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <MX_TIM2_Init+0xc0>)
 8000df2:	4a22      	ldr	r2, [pc, #136]	@ (8000e7c <MX_TIM2_Init+0xc4>)
 8000df4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <MX_TIM2_Init+0xc0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <MX_TIM2_Init+0xc0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e02:	0021      	movs	r1, r4
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2201      	movs	r2, #1
 8000e14:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e3a:	187a      	adds	r2, r7, r1
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_TIM2_Init+0xc0>)
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f001 ff15 	bl	8002c70 <HAL_TIM_Encoder_Init>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e4a:	f7ff fec1 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e5a:	1d3a      	adds	r2, r7, #4
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <MX_TIM2_Init+0xc0>)
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 fbd5 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e6a:	f7ff feb1 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b00d      	add	sp, #52	@ 0x34
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	20000090 	.word	0x20000090
 8000e7c:	0000ffff 	.word	0x0000ffff

08000e80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	2318      	movs	r3, #24
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	001a      	movs	r2, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	f003 fdf3 	bl	8004a7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e96:	2310      	movs	r3, #16
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f003 fdeb 	bl	8004a7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	2310      	movs	r3, #16
 8000eac:	001a      	movs	r2, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f003 fde4 	bl	8004a7c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eb4:	4b34      	ldr	r3, [pc, #208]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000eb6:	4a35      	ldr	r2, [pc, #212]	@ (8000f8c <MX_TIM3_Init+0x10c>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000eba:	4b33      	ldr	r3, [pc, #204]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b31      	ldr	r3, [pc, #196]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000ec6:	4b30      	ldr	r3, [pc, #192]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000ec8:	22c8      	movs	r2, #200	@ 0xc8
 8000eca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f001 fd46 	bl	800296c <HAL_TIM_Base_Init>
 8000ee0:	1e03      	subs	r3, r0, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ee4:	f7ff fe74 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	2118      	movs	r1, #24
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2280      	movs	r2, #128	@ 0x80
 8000eee:	0152      	lsls	r2, r2, #5
 8000ef0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ef2:	187a      	adds	r2, r7, r1
 8000ef4:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f002 f895 	bl	8003028 <HAL_TIM_ConfigClockSource>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f02:	f7ff fe65 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f001 fdd7 	bl	8002abc <HAL_TIM_PWM_Init>
 8000f0e:	1e03      	subs	r3, r0, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f12:	f7ff fe5d 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f16:	2110      	movs	r1, #16
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f24:	187a      	adds	r2, r7, r1
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000f28:	0011      	movs	r1, r2
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f002 fb70 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000f34:	f7ff fe4c 	bl	8000bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f38:	003b      	movs	r3, r7
 8000f3a:	2260      	movs	r2, #96	@ 0x60
 8000f3c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f3e:	003b      	movs	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f44:	003b      	movs	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f50:	0039      	movs	r1, r7
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000f54:	2208      	movs	r2, #8
 8000f56:	0018      	movs	r0, r3
 8000f58:	f001 ffa0 	bl	8002e9c <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000f60:	f7ff fe36 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f64:	0039      	movs	r1, r7
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000f68:	220c      	movs	r2, #12
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f001 ff96 	bl	8002e9c <HAL_TIM_PWM_ConfigChannel>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000f74:	f7ff fe2c 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <MX_TIM3_Init+0x108>)
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 f8ae 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000f80:	46c0      	nop			@ (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b00a      	add	sp, #40	@ 0x28
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000d0 	.word	0x200000d0
 8000f8c:	40000400 	.word	0x40000400

08000f90 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f96:	003b      	movs	r3, r7
 8000f98:	0018      	movs	r0, r3
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	f003 fd6c 	bl	8004a7c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_TIM6_Init+0x6c>)
 8000fa6:	4a16      	ldr	r2, [pc, #88]	@ (8001000 <MX_TIM6_Init+0x70>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 941;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_TIM6_Init+0x6c>)
 8000fac:	4a15      	ldr	r2, [pc, #84]	@ (8001004 <MX_TIM6_Init+0x74>)
 8000fae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_TIM6_Init+0x6c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_TIM6_Init+0x6c>)
 8000fb8:	4a13      	ldr	r2, [pc, #76]	@ (8001008 <MX_TIM6_Init+0x78>)
 8000fba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_TIM6_Init+0x6c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_TIM6_Init+0x6c>)
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 fcd1 	bl	800296c <HAL_TIM_Base_Init>
 8000fca:	1e03      	subs	r3, r0, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000fce:	f7ff fdff 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd8:	003b      	movs	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fde:	003a      	movs	r2, r7
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_TIM6_Init+0x6c>)
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f002 fb13 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	1e03      	subs	r3, r0, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000fee:	f7ff fdef 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	20000110 	.word	0x20000110
 8001000:	40001000 	.word	0x40001000
 8001004:	000003ad 	.word	0x000003ad
 8001008:	0000ffff 	.word	0x0000ffff

0800100c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	240c      	movs	r4, #12
 8001016:	193b      	adds	r3, r7, r4
 8001018:	0018      	movs	r0, r3
 800101a:	2314      	movs	r3, #20
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f003 fd2c 	bl	8004a7c <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2380      	movs	r3, #128	@ 0x80
 800102a:	05db      	lsls	r3, r3, #23
 800102c:	429a      	cmp	r2, r3
 800102e:	d128      	bne.n	8001082 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <HAL_TIM_Encoder_MspInit+0x80>)
 8001032:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_TIM_Encoder_MspInit+0x80>)
 8001036:	2101      	movs	r1, #1
 8001038:	430a      	orrs	r2, r1
 800103a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <HAL_TIM_Encoder_MspInit+0x80>)
 800103e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_TIM_Encoder_MspInit+0x80>)
 8001042:	2101      	movs	r1, #1
 8001044:	430a      	orrs	r2, r1
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <HAL_TIM_Encoder_MspInit+0x80>)
 800104a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104c:	2201      	movs	r2, #1
 800104e:	4013      	ands	r3, r2
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001054:	0021      	movs	r1, r4
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2203      	movs	r2, #3
 800105a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2202      	movs	r2, #2
 8001060:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2202      	movs	r2, #2
 8001072:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	187a      	adds	r2, r7, r1
 8001076:	23a0      	movs	r3, #160	@ 0xa0
 8001078:	05db      	lsls	r3, r3, #23
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f000 fb0b 	bl	8001698 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b009      	add	sp, #36	@ 0x24
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <HAL_TIM_Base_MspInit+0x40>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d106      	bne.n	80010b0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <HAL_TIM_Base_MspInit+0x44>)
 80010a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_TIM_Base_MspInit+0x44>)
 80010a8:	2102      	movs	r1, #2
 80010aa:	430a      	orrs	r2, r1
 80010ac:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80010ae:	e00a      	b.n	80010c6 <HAL_TIM_Base_MspInit+0x36>
  else if(tim_baseHandle->Instance==TIM6)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d105      	bne.n	80010c6 <HAL_TIM_Base_MspInit+0x36>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_TIM_Base_MspInit+0x44>)
 80010bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <HAL_TIM_Base_MspInit+0x44>)
 80010c0:	2110      	movs	r1, #16
 80010c2:	430a      	orrs	r2, r1
 80010c4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	40000400 	.word	0x40000400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40001000 	.word	0x40001000

080010dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	240c      	movs	r4, #12
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	0018      	movs	r0, r3
 80010ea:	2314      	movs	r3, #20
 80010ec:	001a      	movs	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	f003 fcc4 	bl	8004a7c <memset>
  if(timHandle->Instance==TIM3)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <HAL_TIM_MspPostInit+0x70>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d121      	bne.n	8001142 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_TIM_MspPostInit+0x74>)
 8001100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <HAL_TIM_MspPostInit+0x74>)
 8001104:	2102      	movs	r1, #2
 8001106:	430a      	orrs	r2, r1
 8001108:	62da      	str	r2, [r3, #44]	@ 0x2c
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_TIM_MspPostInit+0x74>)
 800110c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800110e:	2202      	movs	r2, #2
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Mot1_Enable_Pin|Mot2_Enable_Pin;
 8001116:	0021      	movs	r1, r4
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2203      	movs	r2, #3
 800111c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2202      	movs	r2, #2
 8001122:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2202      	movs	r2, #2
 8001134:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	187b      	adds	r3, r7, r1
 8001138:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <HAL_TIM_MspPostInit+0x78>)
 800113a:	0019      	movs	r1, r3
 800113c:	0010      	movs	r0, r2
 800113e:	f000 faab 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b009      	add	sp, #36	@ 0x24
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	40000400 	.word	0x40000400
 8001150:	40021000 	.word	0x40021000
 8001154:	50000400 	.word	0x50000400

08001158 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 800115e:	4a15      	ldr	r2, [pc, #84]	@ (80011b4 <MX_USART2_UART_Init+0x5c>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001164:	2296      	movs	r2, #150	@ 0x96
 8001166:	0192      	lsls	r2, r2, #6
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 800119c:	0018      	movs	r0, r3
 800119e:	f002 fa95 	bl	80036cc <HAL_UART_Init>
 80011a2:	1e03      	subs	r3, r0, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011a6:	f7ff fd13 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000150 	.word	0x20000150
 80011b4:	40004400 	.word	0x40004400

080011b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	240c      	movs	r4, #12
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	0018      	movs	r0, r3
 80011c6:	2314      	movs	r3, #20
 80011c8:	001a      	movs	r2, r3
 80011ca:	2100      	movs	r1, #0
 80011cc:	f003 fc56 	bl	8004a7c <memset>
  if(uartHandle->Instance==USART2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <HAL_UART_MspInit+0x90>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d131      	bne.n	800123e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011da:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <HAL_UART_MspInit+0x94>)
 80011dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011de:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <HAL_UART_MspInit+0x94>)
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	0289      	lsls	r1, r1, #10
 80011e4:	430a      	orrs	r2, r1
 80011e6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_UART_MspInit+0x94>)
 80011ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ec:	4b17      	ldr	r3, [pc, #92]	@ (800124c <HAL_UART_MspInit+0x94>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_UART_MspInit+0x94>)
 80011f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f8:	2201      	movs	r2, #1
 80011fa:	4013      	ands	r3, r2
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001200:	0021      	movs	r1, r4
 8001202:	187b      	adds	r3, r7, r1
 8001204:	220c      	movs	r2, #12
 8001206:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2202      	movs	r2, #2
 800120c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2203      	movs	r2, #3
 8001218:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2204      	movs	r2, #4
 800121e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	187a      	adds	r2, r7, r1
 8001222:	23a0      	movs	r3, #160	@ 0xa0
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f000 fa35 	bl	8001698 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	201c      	movs	r0, #28
 8001234:	f000 f976 	bl	8001524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001238:	201c      	movs	r0, #28
 800123a:	f000 f988 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b009      	add	sp, #36	@ 0x24
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	40004400 	.word	0x40004400
 800124c:	40021000 	.word	0x40021000

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001250:	480d      	ldr	r0, [pc, #52]	@ (8001288 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001252:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001254:	f7ff fdaa 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <LoopForever+0x6>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	@ (8001290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <LoopForever+0xe>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	@ (800129c <LoopForever+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800127e:	f003 fc0b 	bl	8004a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fadb 	bl	800083c <main>

08001286 <LoopForever>:

LoopForever:
    b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
   ldr   r0, =_estack
 8001288:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001294:	08005890 	.word	0x08005890
  ldr r2, =_sbss
 8001298:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800129c:	20000328 	.word	0x20000328

080012a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC1_COMP_IRQHandler>
	...

080012a4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_Init+0x3c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_Init+0x3c>)
 80012b6:	2140      	movs	r1, #64	@ 0x40
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 f811 	bl	80012e4 <HAL_InitTick>
 80012c2:	1e03      	subs	r3, r0, #0
 80012c4:	d003      	beq.n	80012ce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e001      	b.n	80012d2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ce:	f7ff fc85 	bl	8000bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <HAL_InitTick+0x5c>)
 80012ee:	681c      	ldr	r4, [r3, #0]
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <HAL_InitTick+0x60>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	0019      	movs	r1, r3
 80012f6:	23fa      	movs	r3, #250	@ 0xfa
 80012f8:	0098      	lsls	r0, r3, #2
 80012fa:	f7fe ff0f 	bl	800011c <__udivsi3>
 80012fe:	0003      	movs	r3, r0
 8001300:	0019      	movs	r1, r3
 8001302:	0020      	movs	r0, r4
 8001304:	f7fe ff0a 	bl	800011c <__udivsi3>
 8001308:	0003      	movs	r3, r0
 800130a:	0018      	movs	r0, r3
 800130c:	f000 f92f 	bl	800156e <HAL_SYSTICK_Config>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d001      	beq.n	8001318 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e00f      	b.n	8001338 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d80b      	bhi.n	8001336 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	2301      	movs	r3, #1
 8001322:	425b      	negs	r3, r3
 8001324:	2200      	movs	r2, #0
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f8fc 	bl	8001524 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_InitTick+0x64>)
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b003      	add	sp, #12
 800133e:	bd90      	pop	{r4, r7, pc}
 8001340:	20000004 	.word	0x20000004
 8001344:	2000000c 	.word	0x2000000c
 8001348:	20000008 	.word	0x20000008

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_IncTick+0x1c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	001a      	movs	r2, r3
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <HAL_IncTick+0x20>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	18d2      	adds	r2, r2, r3
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <HAL_IncTick+0x20>)
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	2000000c 	.word	0x2000000c
 800136c:	200001d8 	.word	0x200001d8

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b02      	ldr	r3, [pc, #8]	@ (8001380 <HAL_GetTick+0x10>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	200001d8 	.word	0x200001d8

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff fff0 	bl	8001370 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3301      	adds	r3, #1
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	001a      	movs	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	189b      	adds	r3, r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	f7ff ffe0 	bl	8001370 <HAL_GetTick>
 80013b0:	0002      	movs	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	46c0      	nop			@ (mov r8, r8)
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	2000000c 	.word	0x2000000c

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	0002      	movs	r2, r0
 80013d4:	1dfb      	adds	r3, r7, #7
 80013d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80013de:	d809      	bhi.n	80013f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	001a      	movs	r2, r3
 80013e6:	231f      	movs	r3, #31
 80013e8:	401a      	ands	r2, r3
 80013ea:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <__NVIC_EnableIRQ+0x30>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	4091      	lsls	r1, r2
 80013f0:	000a      	movs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
  }
}
 80013f4:	46c0      	nop			@ (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	0002      	movs	r2, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b7f      	cmp	r3, #127	@ 0x7f
 8001414:	d828      	bhi.n	8001468 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001416:	4a2f      	ldr	r2, [pc, #188]	@ (80014d4 <__NVIC_SetPriority+0xd4>)
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b25b      	sxtb	r3, r3
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	33c0      	adds	r3, #192	@ 0xc0
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	589b      	ldr	r3, [r3, r2]
 8001426:	1dfa      	adds	r2, r7, #7
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	0011      	movs	r1, r2
 800142c:	2203      	movs	r2, #3
 800142e:	400a      	ands	r2, r1
 8001430:	00d2      	lsls	r2, r2, #3
 8001432:	21ff      	movs	r1, #255	@ 0xff
 8001434:	4091      	lsls	r1, r2
 8001436:	000a      	movs	r2, r1
 8001438:	43d2      	mvns	r2, r2
 800143a:	401a      	ands	r2, r3
 800143c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	22ff      	movs	r2, #255	@ 0xff
 8001444:	401a      	ands	r2, r3
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	0018      	movs	r0, r3
 800144c:	2303      	movs	r3, #3
 800144e:	4003      	ands	r3, r0
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001454:	481f      	ldr	r0, [pc, #124]	@ (80014d4 <__NVIC_SetPriority+0xd4>)
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	430a      	orrs	r2, r1
 8001460:	33c0      	adds	r3, #192	@ 0xc0
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001466:	e031      	b.n	80014cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001468:	4a1b      	ldr	r2, [pc, #108]	@ (80014d8 <__NVIC_SetPriority+0xd8>)
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	0019      	movs	r1, r3
 8001470:	230f      	movs	r3, #15
 8001472:	400b      	ands	r3, r1
 8001474:	3b08      	subs	r3, #8
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3306      	adds	r3, #6
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	18d3      	adds	r3, r2, r3
 800147e:	3304      	adds	r3, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	1dfa      	adds	r2, r7, #7
 8001484:	7812      	ldrb	r2, [r2, #0]
 8001486:	0011      	movs	r1, r2
 8001488:	2203      	movs	r2, #3
 800148a:	400a      	ands	r2, r1
 800148c:	00d2      	lsls	r2, r2, #3
 800148e:	21ff      	movs	r1, #255	@ 0xff
 8001490:	4091      	lsls	r1, r2
 8001492:	000a      	movs	r2, r1
 8001494:	43d2      	mvns	r2, r2
 8001496:	401a      	ands	r2, r3
 8001498:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	22ff      	movs	r2, #255	@ 0xff
 80014a0:	401a      	ands	r2, r3
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	0018      	movs	r0, r3
 80014a8:	2303      	movs	r3, #3
 80014aa:	4003      	ands	r3, r0
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b0:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <__NVIC_SetPriority+0xd8>)
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	001c      	movs	r4, r3
 80014b8:	230f      	movs	r3, #15
 80014ba:	4023      	ands	r3, r4
 80014bc:	3b08      	subs	r3, #8
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	430a      	orrs	r2, r1
 80014c2:	3306      	adds	r3, #6
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	18c3      	adds	r3, r0, r3
 80014c8:	3304      	adds	r3, #4
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	46c0      	nop			@ (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b003      	add	sp, #12
 80014d2:	bd90      	pop	{r4, r7, pc}
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	045b      	lsls	r3, r3, #17
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d301      	bcc.n	80014f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f0:	2301      	movs	r3, #1
 80014f2:	e010      	b.n	8001516 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <SysTick_Config+0x44>)
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	3a01      	subs	r2, #1
 80014fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fc:	2301      	movs	r3, #1
 80014fe:	425b      	negs	r3, r3
 8001500:	2103      	movs	r1, #3
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff ff7c 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <SysTick_Config+0x44>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <SysTick_Config+0x44>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	210f      	movs	r1, #15
 8001530:	187b      	adds	r3, r7, r1
 8001532:	1c02      	adds	r2, r0, #0
 8001534:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	187b      	adds	r3, r7, r1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	0011      	movs	r1, r2
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ff5d 	bl	8001400 <__NVIC_SetPriority>
}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b004      	add	sp, #16
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	0002      	movs	r2, r0
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b25b      	sxtb	r3, r3
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff ff33 	bl	80013cc <__NVIC_EnableIRQ>
}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff ffaf 	bl	80014dc <SysTick_Config>
 800157e:	0003      	movs	r3, r0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001590:	230f      	movs	r3, #15
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2225      	movs	r2, #37	@ 0x25
 800159c:	5c9b      	ldrb	r3, [r3, r2]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d008      	beq.n	80015b6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2204      	movs	r2, #4
 80015a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2224      	movs	r2, #36	@ 0x24
 80015ae:	2100      	movs	r1, #0
 80015b0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e024      	b.n	8001600 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	210e      	movs	r1, #14
 80015c2:	438a      	bics	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2101      	movs	r1, #1
 80015d2:	438a      	bics	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	221c      	movs	r2, #28
 80015dc:	401a      	ands	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	2101      	movs	r1, #1
 80015e4:	4091      	lsls	r1, r2
 80015e6:	000a      	movs	r2, r1
 80015e8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2225      	movs	r2, #37	@ 0x25
 80015ee:	2101      	movs	r1, #1
 80015f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2224      	movs	r2, #36	@ 0x24
 80015f6:	2100      	movs	r1, #0
 80015f8:	5499      	strb	r1, [r3, r2]

    return status;
 80015fa:	230f      	movs	r3, #15
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b004      	add	sp, #16
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001610:	210f      	movs	r1, #15
 8001612:	187b      	adds	r3, r7, r1
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2225      	movs	r2, #37	@ 0x25
 800161c:	5c9b      	ldrb	r3, [r3, r2]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d006      	beq.n	8001632 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2204      	movs	r2, #4
 8001628:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e02a      	b.n	8001688 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	210e      	movs	r1, #14
 800163e:	438a      	bics	r2, r1
 8001640:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	438a      	bics	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	221c      	movs	r2, #28
 8001658:	401a      	ands	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	2101      	movs	r1, #1
 8001660:	4091      	lsls	r1, r2
 8001662:	000a      	movs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2225      	movs	r2, #37	@ 0x25
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2224      	movs	r2, #36	@ 0x24
 8001672:	2100      	movs	r1, #0
 8001674:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	0010      	movs	r0, r2
 8001686:	4798      	blx	r3
    }
  }
  return status;
 8001688:	230f      	movs	r3, #15
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	781b      	ldrb	r3, [r3, #0]
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b004      	add	sp, #16
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80016ae:	e155      	b.n	800195c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4091      	lsls	r1, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d100      	bne.n	80016c8 <HAL_GPIO_Init+0x30>
 80016c6:	e146      	b.n	8001956 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d005      	beq.n	80016e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d130      	bne.n	8001742 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	409a      	lsls	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	43da      	mvns	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	409a      	lsls	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001716:	2201      	movs	r2, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	2201      	movs	r2, #1
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	2b03      	cmp	r3, #3
 800174c:	d017      	beq.n	800177e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	43da      	mvns	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2203      	movs	r2, #3
 8001784:	4013      	ands	r3, r2
 8001786:	2b02      	cmp	r3, #2
 8001788:	d123      	bne.n	80017d2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	58d3      	ldr	r3, [r2, r3]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2207      	movs	r2, #7
 800179c:	4013      	ands	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2107      	movs	r1, #7
 80017b6:	400b      	ands	r3, r1
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	6939      	ldr	r1, [r7, #16]
 80017d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2203      	movs	r2, #3
 80017f0:	401a      	ands	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	23c0      	movs	r3, #192	@ 0xc0
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	4013      	ands	r3, r2
 8001810:	d100      	bne.n	8001814 <HAL_GPIO_Init+0x17c>
 8001812:	e0a0      	b.n	8001956 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001814:	4b57      	ldr	r3, [pc, #348]	@ (8001974 <HAL_GPIO_Init+0x2dc>)
 8001816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001818:	4b56      	ldr	r3, [pc, #344]	@ (8001974 <HAL_GPIO_Init+0x2dc>)
 800181a:	2101      	movs	r1, #1
 800181c:	430a      	orrs	r2, r1
 800181e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001820:	4a55      	ldr	r2, [pc, #340]	@ (8001978 <HAL_GPIO_Init+0x2e0>)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	589b      	ldr	r3, [r3, r2]
 800182c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2203      	movs	r2, #3
 8001832:	4013      	ands	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	409a      	lsls	r2, r3
 800183a:	0013      	movs	r3, r2
 800183c:	43da      	mvns	r2, r3
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	23a0      	movs	r3, #160	@ 0xa0
 8001848:	05db      	lsls	r3, r3, #23
 800184a:	429a      	cmp	r2, r3
 800184c:	d01f      	beq.n	800188e <HAL_GPIO_Init+0x1f6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4a      	ldr	r2, [pc, #296]	@ (800197c <HAL_GPIO_Init+0x2e4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x1f2>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a49      	ldr	r2, [pc, #292]	@ (8001980 <HAL_GPIO_Init+0x2e8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x1ee>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a48      	ldr	r2, [pc, #288]	@ (8001984 <HAL_GPIO_Init+0x2ec>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x1ea>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a47      	ldr	r2, [pc, #284]	@ (8001988 <HAL_GPIO_Init+0x2f0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x1e6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a46      	ldr	r2, [pc, #280]	@ (800198c <HAL_GPIO_Init+0x2f4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x1e2>
 8001876:	2305      	movs	r3, #5
 8001878:	e00a      	b.n	8001890 <HAL_GPIO_Init+0x1f8>
 800187a:	2306      	movs	r3, #6
 800187c:	e008      	b.n	8001890 <HAL_GPIO_Init+0x1f8>
 800187e:	2304      	movs	r3, #4
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x1f8>
 8001882:	2303      	movs	r3, #3
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x1f8>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x1f8>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x1f8>
 800188e:	2300      	movs	r3, #0
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	2103      	movs	r1, #3
 8001894:	400a      	ands	r2, r1
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4093      	lsls	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a0:	4935      	ldr	r1, [pc, #212]	@ (8001978 <HAL_GPIO_Init+0x2e0>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ae:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <HAL_GPIO_Init+0x2f8>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	2380      	movs	r3, #128	@ 0x80
 80018c4:	035b      	lsls	r3, r3, #13
 80018c6:	4013      	ands	r3, r2
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <HAL_GPIO_Init+0x2f8>)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <HAL_GPIO_Init+0x2f8>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43da      	mvns	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	039b      	lsls	r3, r3, #14
 80018f0:	4013      	ands	r3, r2
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018fc:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <HAL_GPIO_Init+0x2f8>)
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001902:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <HAL_GPIO_Init+0x2f8>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	2380      	movs	r3, #128	@ 0x80
 8001918:	029b      	lsls	r3, r3, #10
 800191a:	4013      	ands	r3, r2
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <HAL_GPIO_Init+0x2f8>)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800192c:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <HAL_GPIO_Init+0x2f8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43da      	mvns	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	025b      	lsls	r3, r3, #9
 8001944:	4013      	ands	r3, r2
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_GPIO_Init+0x2f8>)
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	40da      	lsrs	r2, r3
 8001964:	1e13      	subs	r3, r2, #0
 8001966:	d000      	beq.n	800196a <HAL_GPIO_Init+0x2d2>
 8001968:	e6a2      	b.n	80016b0 <HAL_GPIO_Init+0x18>
  }
}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b006      	add	sp, #24
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	50000400 	.word	0x50000400
 8001980:	50000800 	.word	0x50000800
 8001984:	50000c00 	.word	0x50000c00
 8001988:	50001000 	.word	0x50001000
 800198c:	50001c00 	.word	0x50001c00
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	000a      	movs	r2, r1
 800199e:	1cbb      	adds	r3, r7, #2
 80019a0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	1cba      	adds	r2, r7, #2
 80019a8:	8812      	ldrh	r2, [r2, #0]
 80019aa:	4013      	ands	r3, r2
 80019ac:	d004      	beq.n	80019b8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80019ae:	230f      	movs	r3, #15
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	e003      	b.n	80019c0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019b8:	230f      	movs	r3, #15
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80019c0:	230f      	movs	r3, #15
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b004      	add	sp, #16
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	0008      	movs	r0, r1
 80019d8:	0011      	movs	r1, r2
 80019da:	1cbb      	adds	r3, r7, #2
 80019dc:	1c02      	adds	r2, r0, #0
 80019de:	801a      	strh	r2, [r3, #0]
 80019e0:	1c7b      	adds	r3, r7, #1
 80019e2:	1c0a      	adds	r2, r1, #0
 80019e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e6:	1c7b      	adds	r3, r7, #1
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ee:	1cbb      	adds	r3, r7, #2
 80019f0:	881a      	ldrh	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80019f6:	e003      	b.n	8001a00 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80019f8:	1cbb      	adds	r3, r7, #2
 80019fa:	881a      	ldrh	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a00:	46c0      	nop			@ (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	0002      	movs	r2, r0
 8001a10:	1dbb      	adds	r3, r7, #6
 8001a12:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	1dba      	adds	r2, r7, #6
 8001a1a:	8812      	ldrh	r2, [r2, #0]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d008      	beq.n	8001a32 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a22:	1dba      	adds	r2, r7, #6
 8001a24:	8812      	ldrh	r2, [r2, #0]
 8001a26:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a28:	1dbb      	adds	r3, r7, #6
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7fe ffbb 	bl	80009a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08a      	sub	sp, #40	@ 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f000 fbbf 	bl	80021d2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a54:	4bc9      	ldr	r3, [pc, #804]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	220c      	movs	r2, #12
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a5e:	4bc7      	ldr	r3, [pc, #796]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	2380      	movs	r3, #128	@ 0x80
 8001a64:	025b      	lsls	r3, r3, #9
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d100      	bne.n	8001a76 <HAL_RCC_OscConfig+0x36>
 8001a74:	e07e      	b.n	8001b74 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d007      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d112      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x68>
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	025b      	lsls	r3, r3, #9
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	4bbb      	ldr	r3, [pc, #748]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	029b      	lsls	r3, r3, #10
 8001a94:	4013      	ands	r3, r2
 8001a96:	d100      	bne.n	8001a9a <HAL_RCC_OscConfig+0x5a>
 8001a98:	e06b      	b.n	8001b72 <HAL_RCC_OscConfig+0x132>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d167      	bne.n	8001b72 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f000 fb95 	bl	80021d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	2380      	movs	r3, #128	@ 0x80
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x84>
 8001ab4:	4bb1      	ldr	r3, [pc, #708]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4bb0      	ldr	r3, [pc, #704]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	0249      	lsls	r1, r1, #9
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e027      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	23a0      	movs	r3, #160	@ 0xa0
 8001aca:	02db      	lsls	r3, r3, #11
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d10e      	bne.n	8001aee <HAL_RCC_OscConfig+0xae>
 8001ad0:	4baa      	ldr	r3, [pc, #680]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4ba9      	ldr	r3, [pc, #676]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001ad6:	2180      	movs	r1, #128	@ 0x80
 8001ad8:	02c9      	lsls	r1, r1, #11
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	4ba7      	ldr	r3, [pc, #668]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4ba6      	ldr	r3, [pc, #664]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	e012      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001aee:	4ba3      	ldr	r3, [pc, #652]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4ba2      	ldr	r3, [pc, #648]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001af4:	49a2      	ldr	r1, [pc, #648]	@ (8001d80 <HAL_RCC_OscConfig+0x340>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	4ba0      	ldr	r3, [pc, #640]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	025b      	lsls	r3, r3, #9
 8001b02:	4013      	ands	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4b9c      	ldr	r3, [pc, #624]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b9b      	ldr	r3, [pc, #620]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001b0e:	499d      	ldr	r1, [pc, #628]	@ (8001d84 <HAL_RCC_OscConfig+0x344>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d015      	beq.n	8001b48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fc28 	bl	8001370 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b26:	f7ff fc23 	bl	8001370 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b64      	cmp	r3, #100	@ 0x64
 8001b32:	d902      	bls.n	8001b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f000 fb4c 	bl	80021d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b3a:	4b90      	ldr	r3, [pc, #576]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	029b      	lsls	r3, r3, #10
 8001b42:	4013      	ands	r3, r2
 8001b44:	d0ef      	beq.n	8001b26 <HAL_RCC_OscConfig+0xe6>
 8001b46:	e015      	b.n	8001b74 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fc12 	bl	8001370 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b52:	f7ff fc0d 	bl	8001370 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b64      	cmp	r3, #100	@ 0x64
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e336      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b64:	4b85      	ldr	r3, [pc, #532]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	029b      	lsls	r3, r3, #10
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x112>
 8001b70:	e000      	b.n	8001b74 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b72:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d100      	bne.n	8001b80 <HAL_RCC_OscConfig+0x140>
 8001b7e:	e099      	b.n	8001cb4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	2220      	movs	r2, #32
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001b8e:	4b7b      	ldr	r3, [pc, #492]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b7a      	ldr	r3, [pc, #488]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001b94:	2120      	movs	r1, #32
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	4393      	bics	r3, r2
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d13e      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1ec>
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d13b      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001bb4:	4b71      	ldr	r3, [pc, #452]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x188>
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e304      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8001d88 <HAL_RCC_OscConfig+0x348>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	021a      	lsls	r2, r3, #8
 8001bd8:	4b68      	ldr	r3, [pc, #416]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bde:	4b67      	ldr	r3, [pc, #412]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2209      	movs	r2, #9
 8001be4:	4393      	bics	r3, r2
 8001be6:	0019      	movs	r1, r3
 8001be8:	4b64      	ldr	r3, [pc, #400]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf0:	f000 fc42 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8001bf4:	0001      	movs	r1, r0
 8001bf6:	4b61      	ldr	r3, [pc, #388]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	4013      	ands	r3, r2
 8001c00:	4a62      	ldr	r2, [pc, #392]	@ (8001d8c <HAL_RCC_OscConfig+0x34c>)
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
 8001c04:	000a      	movs	r2, r1
 8001c06:	40da      	lsrs	r2, r3
 8001c08:	4b61      	ldr	r3, [pc, #388]	@ (8001d90 <HAL_RCC_OscConfig+0x350>)
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c0c:	4b61      	ldr	r3, [pc, #388]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2513      	movs	r5, #19
 8001c12:	197c      	adds	r4, r7, r5
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff fb65 	bl	80012e4 <HAL_InitTick>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c1e:	197b      	adds	r3, r7, r5
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d046      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001c26:	197b      	adds	r3, r7, r5
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	e2d2      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d027      	beq.n	8001c82 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c32:	4b52      	ldr	r3, [pc, #328]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2209      	movs	r2, #9
 8001c38:	4393      	bics	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fb94 	bl	8001370 <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fb8f 	bl	8001370 <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e2b8      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c60:	4b46      	ldr	r3, [pc, #280]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2204      	movs	r2, #4
 8001c66:	4013      	ands	r3, r2
 8001c68:	d0f1      	beq.n	8001c4e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b44      	ldr	r3, [pc, #272]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4a46      	ldr	r2, [pc, #280]	@ (8001d88 <HAL_RCC_OscConfig+0x348>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	021a      	lsls	r2, r3, #8
 8001c7a:	4b40      	ldr	r3, [pc, #256]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	e018      	b.n	8001cb4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c82:	4b3e      	ldr	r3, [pc, #248]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4b3d      	ldr	r3, [pc, #244]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	438a      	bics	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fb6f 	bl	8001370 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c98:	f7ff fb6a 	bl	8001370 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e293      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001caa:	4b34      	ldr	r3, [pc, #208]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d1f1      	bne.n	8001c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2210      	movs	r2, #16
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d100      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x280>
 8001cbe:	e0a2      	b.n	8001e06 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d140      	bne.n	8001d48 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x29e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e279      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cde:	4b27      	ldr	r3, [pc, #156]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d98 <HAL_RCC_OscConfig+0x358>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cec:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf2:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	0a19      	lsrs	r1, r3, #8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	061a      	lsls	r2, r3, #24
 8001d00:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	0b5b      	lsrs	r3, r3, #13
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	2280      	movs	r2, #128	@ 0x80
 8001d10:	0212      	lsls	r2, r2, #8
 8001d12:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	400b      	ands	r3, r1
 8001d1e:	491b      	ldr	r1, [pc, #108]	@ (8001d8c <HAL_RCC_OscConfig+0x34c>)
 8001d20:	5ccb      	ldrb	r3, [r1, r3]
 8001d22:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_RCC_OscConfig+0x350>)
 8001d26:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d28:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_RCC_OscConfig+0x354>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2513      	movs	r5, #19
 8001d2e:	197c      	adds	r4, r7, r5
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff fad7 	bl	80012e4 <HAL_InitTick>
 8001d36:	0003      	movs	r3, r0
 8001d38:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d3a:	197b      	adds	r3, r7, r5
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d061      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001d42:	197b      	adds	r3, r7, r5
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	e244      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d040      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d50:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <HAL_RCC_OscConfig+0x33c>)
 8001d56:	2180      	movs	r1, #128	@ 0x80
 8001d58:	0049      	lsls	r1, r1, #1
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fb07 	bl	8001370 <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d66:	e019      	b.n	8001d9c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d68:	f7ff fb02 	bl	8001370 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d912      	bls.n	8001d9c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e22b      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	fffeffff 	.word	0xfffeffff
 8001d84:	fffbffff 	.word	0xfffbffff
 8001d88:	ffffe0ff 	.word	0xffffe0ff
 8001d8c:	080057e0 	.word	0x080057e0
 8001d90:	20000004 	.word	0x20000004
 8001d94:	20000008 	.word	0x20000008
 8001d98:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d9c:	4bca      	ldr	r3, [pc, #808]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d0df      	beq.n	8001d68 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da8:	4bc7      	ldr	r3, [pc, #796]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4ac7      	ldr	r2, [pc, #796]	@ (80020cc <HAL_RCC_OscConfig+0x68c>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001db6:	4bc4      	ldr	r3, [pc, #784]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dbc:	4bc2      	ldr	r3, [pc, #776]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	0a19      	lsrs	r1, r3, #8
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	061a      	lsls	r2, r3, #24
 8001dca:	4bbf      	ldr	r3, [pc, #764]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	e019      	b.n	8001e06 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dd2:	4bbd      	ldr	r3, [pc, #756]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4bbc      	ldr	r3, [pc, #752]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001dd8:	49bd      	ldr	r1, [pc, #756]	@ (80020d0 <HAL_RCC_OscConfig+0x690>)
 8001dda:	400a      	ands	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7ff fac7 	bl	8001370 <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de8:	f7ff fac2 	bl	8001370 <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1eb      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dfa:	4bb3      	ldr	r3, [pc, #716]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d036      	beq.n	8001e7e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e18:	4bab      	ldr	r3, [pc, #684]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001e1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e1c:	4baa      	ldr	r3, [pc, #680]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	430a      	orrs	r2, r1
 8001e22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff faa4 	bl	8001370 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fa9f 	bl	8001370 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e1c8      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e40:	4ba1      	ldr	r3, [pc, #644]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d0f1      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3ee>
 8001e4a:	e018      	b.n	8001e7e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4c:	4b9e      	ldr	r3, [pc, #632]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001e4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e50:	4b9d      	ldr	r3, [pc, #628]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001e52:	2101      	movs	r1, #1
 8001e54:	438a      	bics	r2, r1
 8001e56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff fa8a 	bl	8001370 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e62:	f7ff fa85 	bl	8001370 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1ae      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e74:	4b94      	ldr	r3, [pc, #592]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d1f1      	bne.n	8001e62 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2204      	movs	r2, #4
 8001e84:	4013      	ands	r3, r2
 8001e86:	d100      	bne.n	8001e8a <HAL_RCC_OscConfig+0x44a>
 8001e88:	e0ae      	b.n	8001fe8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2023      	movs	r0, #35	@ 0x23
 8001e8c:	183b      	adds	r3, r7, r0
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b8d      	ldr	r3, [pc, #564]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	055b      	lsls	r3, r3, #21
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b8a      	ldr	r3, [pc, #552]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ea2:	4b89      	ldr	r3, [pc, #548]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001ea4:	2180      	movs	r1, #128	@ 0x80
 8001ea6:	0549      	lsls	r1, r1, #21
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001eac:	183b      	adds	r3, r7, r0
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b88      	ldr	r3, [pc, #544]	@ (80020d4 <HAL_RCC_OscConfig+0x694>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d11a      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ebe:	4b85      	ldr	r3, [pc, #532]	@ (80020d4 <HAL_RCC_OscConfig+0x694>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b84      	ldr	r3, [pc, #528]	@ (80020d4 <HAL_RCC_OscConfig+0x694>)
 8001ec4:	2180      	movs	r1, #128	@ 0x80
 8001ec6:	0049      	lsls	r1, r1, #1
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fa50 	bl	8001370 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed6:	f7ff fa4b 	bl	8001370 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b64      	cmp	r3, #100	@ 0x64
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e174      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee8:	4b7a      	ldr	r3, [pc, #488]	@ (80020d4 <HAL_RCC_OscConfig+0x694>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4d0>
 8001f00:	4b71      	ldr	r3, [pc, #452]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f04:	4b70      	ldr	r3, [pc, #448]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f06:	2180      	movs	r1, #128	@ 0x80
 8001f08:	0049      	lsls	r1, r1, #1
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f0e:	e031      	b.n	8001f74 <HAL_RCC_OscConfig+0x534>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10c      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4f2>
 8001f18:	4b6b      	ldr	r3, [pc, #428]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f1e:	496c      	ldr	r1, [pc, #432]	@ (80020d0 <HAL_RCC_OscConfig+0x690>)
 8001f20:	400a      	ands	r2, r1
 8001f22:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f24:	4b68      	ldr	r3, [pc, #416]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f28:	4b67      	ldr	r3, [pc, #412]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f2a:	496b      	ldr	r1, [pc, #428]	@ (80020d8 <HAL_RCC_OscConfig+0x698>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f30:	e020      	b.n	8001f74 <HAL_RCC_OscConfig+0x534>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	23a0      	movs	r3, #160	@ 0xa0
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d10e      	bne.n	8001f5c <HAL_RCC_OscConfig+0x51c>
 8001f3e:	4b62      	ldr	r3, [pc, #392]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f42:	4b61      	ldr	r3, [pc, #388]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f44:	2180      	movs	r1, #128	@ 0x80
 8001f46:	00c9      	lsls	r1, r1, #3
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f50:	4b5d      	ldr	r3, [pc, #372]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f52:	2180      	movs	r1, #128	@ 0x80
 8001f54:	0049      	lsls	r1, r1, #1
 8001f56:	430a      	orrs	r2, r1
 8001f58:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0x534>
 8001f5c:	4b5a      	ldr	r3, [pc, #360]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f60:	4b59      	ldr	r3, [pc, #356]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f62:	495b      	ldr	r1, [pc, #364]	@ (80020d0 <HAL_RCC_OscConfig+0x690>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f68:	4b57      	ldr	r3, [pc, #348]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f6c:	4b56      	ldr	r3, [pc, #344]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f6e:	495a      	ldr	r1, [pc, #360]	@ (80020d8 <HAL_RCC_OscConfig+0x698>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d015      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f9f8 	bl	8001370 <HAL_GetTick>
 8001f80:	0003      	movs	r3, r0
 8001f82:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f84:	e009      	b.n	8001f9a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff f9f3 	bl	8001370 <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	4a52      	ldr	r2, [pc, #328]	@ (80020dc <HAL_RCC_OscConfig+0x69c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e11b      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001f9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f9e:	2380      	movs	r3, #128	@ 0x80
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d0ef      	beq.n	8001f86 <HAL_RCC_OscConfig+0x546>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f9e2 	bl	8001370 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fb0:	e009      	b.n	8001fc6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff f9dd 	bl	8001370 <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	4a47      	ldr	r2, [pc, #284]	@ (80020dc <HAL_RCC_OscConfig+0x69c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e105      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fc6:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001fc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d1ef      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fd2:	2323      	movs	r3, #35	@ 0x23
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001fde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fe0:	4b39      	ldr	r3, [pc, #228]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001fe2:	493f      	ldr	r1, [pc, #252]	@ (80020e0 <HAL_RCC_OscConfig+0x6a0>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2220      	movs	r2, #32
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d049      	beq.n	8002086 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d026      	beq.n	8002048 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ffa:	4b33      	ldr	r3, [pc, #204]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	4b32      	ldr	r3, [pc, #200]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8002000:	2101      	movs	r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	4b30      	ldr	r3, [pc, #192]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 8002008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800200a:	4b2f      	ldr	r3, [pc, #188]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 800200c:	2101      	movs	r1, #1
 800200e:	430a      	orrs	r2, r1
 8002010:	635a      	str	r2, [r3, #52]	@ 0x34
 8002012:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_RCC_OscConfig+0x6a4>)
 8002014:	6a1a      	ldr	r2, [r3, #32]
 8002016:	4b33      	ldr	r3, [pc, #204]	@ (80020e4 <HAL_RCC_OscConfig+0x6a4>)
 8002018:	2180      	movs	r1, #128	@ 0x80
 800201a:	0189      	lsls	r1, r1, #6
 800201c:	430a      	orrs	r2, r1
 800201e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff f9a6 	bl	8001370 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800202a:	f7ff f9a1 	bl	8001370 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0ca      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800203c:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2202      	movs	r2, #2
 8002042:	4013      	ands	r3, r2
 8002044:	d0f1      	beq.n	800202a <HAL_RCC_OscConfig+0x5ea>
 8002046:	e01e      	b.n	8002086 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002048:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 800204e:	2101      	movs	r1, #1
 8002050:	438a      	bics	r2, r1
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <HAL_RCC_OscConfig+0x6a4>)
 8002056:	6a1a      	ldr	r2, [r3, #32]
 8002058:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <HAL_RCC_OscConfig+0x6a4>)
 800205a:	4923      	ldr	r1, [pc, #140]	@ (80020e8 <HAL_RCC_OscConfig+0x6a8>)
 800205c:	400a      	ands	r2, r1
 800205e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff f986 	bl	8001370 <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206a:	f7ff f981 	bl	8001370 <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0aa      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2202      	movs	r2, #2
 8002082:	4013      	ands	r3, r2
 8002084:	d1f1      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	d100      	bne.n	8002090 <HAL_RCC_OscConfig+0x650>
 800208e:	e09f      	b.n	80021d0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d100      	bne.n	8002098 <HAL_RCC_OscConfig+0x658>
 8002096:	e078      	b.n	800218a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	2b02      	cmp	r3, #2
 800209e:	d159      	bne.n	8002154 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_RCC_OscConfig+0x688>)
 80020a6:	4911      	ldr	r1, [pc, #68]	@ (80020ec <HAL_RCC_OscConfig+0x6ac>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff f960 	bl	8001370 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b6:	f7ff f95b 	bl	8001370 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d915      	bls.n	80020f0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e084      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	ffff1fff 	.word	0xffff1fff
 80020d0:	fffffeff 	.word	0xfffffeff
 80020d4:	40007000 	.word	0x40007000
 80020d8:	fffffbff 	.word	0xfffffbff
 80020dc:	00001388 	.word	0x00001388
 80020e0:	efffffff 	.word	0xefffffff
 80020e4:	40010000 	.word	0x40010000
 80020e8:	ffffdfff 	.word	0xffffdfff
 80020ec:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020f0:	4b3a      	ldr	r3, [pc, #232]	@ (80021dc <HAL_RCC_OscConfig+0x79c>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	049b      	lsls	r3, r3, #18
 80020f8:	4013      	ands	r3, r2
 80020fa:	d1dc      	bne.n	80020b6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fc:	4b37      	ldr	r3, [pc, #220]	@ (80021dc <HAL_RCC_OscConfig+0x79c>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a37      	ldr	r2, [pc, #220]	@ (80021e0 <HAL_RCC_OscConfig+0x7a0>)
 8002102:	4013      	ands	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002114:	431a      	orrs	r2, r3
 8002116:	4b31      	ldr	r3, [pc, #196]	@ (80021dc <HAL_RCC_OscConfig+0x79c>)
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211c:	4b2f      	ldr	r3, [pc, #188]	@ (80021dc <HAL_RCC_OscConfig+0x79c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b2e      	ldr	r3, [pc, #184]	@ (80021dc <HAL_RCC_OscConfig+0x79c>)
 8002122:	2180      	movs	r1, #128	@ 0x80
 8002124:	0449      	lsls	r1, r1, #17
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff f921 	bl	8001370 <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002134:	f7ff f91c 	bl	8001370 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e045      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002146:	4b25      	ldr	r3, [pc, #148]	@ (80021dc <HAL_RCC_OscConfig+0x79c>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	049b      	lsls	r3, r3, #18
 800214e:	4013      	ands	r3, r2
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x6f4>
 8002152:	e03d      	b.n	80021d0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002154:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <HAL_RCC_OscConfig+0x79c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <HAL_RCC_OscConfig+0x79c>)
 800215a:	4922      	ldr	r1, [pc, #136]	@ (80021e4 <HAL_RCC_OscConfig+0x7a4>)
 800215c:	400a      	ands	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff f906 	bl	8001370 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216a:	f7ff f901 	bl	8001370 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e02a      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800217c:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <HAL_RCC_OscConfig+0x79c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	049b      	lsls	r3, r3, #18
 8002184:	4013      	ands	r3, r2
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x72a>
 8002188:	e022      	b.n	80021d0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e01d      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002196:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <HAL_RCC_OscConfig+0x79c>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d10f      	bne.n	80021cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	23f0      	movs	r3, #240	@ 0xf0
 80021b0:	039b      	lsls	r3, r3, #14
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	23c0      	movs	r3, #192	@ 0xc0
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	401a      	ands	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b00a      	add	sp, #40	@ 0x28
 80021d8:	bdb0      	pop	{r4, r5, r7, pc}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	40021000 	.word	0x40021000
 80021e0:	ff02ffff 	.word	0xff02ffff
 80021e4:	feffffff 	.word	0xfeffffff

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e128      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b96      	ldr	r3, [pc, #600]	@ (8002458 <HAL_RCC_ClockConfig+0x270>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d91e      	bls.n	8002248 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b93      	ldr	r3, [pc, #588]	@ (8002458 <HAL_RCC_ClockConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	4393      	bics	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	4b90      	ldr	r3, [pc, #576]	@ (8002458 <HAL_RCC_ClockConfig+0x270>)
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800221c:	f7ff f8a8 	bl	8001370 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002224:	e009      	b.n	800223a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002226:	f7ff f8a3 	bl	8001370 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	4a8a      	ldr	r2, [pc, #552]	@ (800245c <HAL_RCC_ClockConfig+0x274>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e109      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b87      	ldr	r3, [pc, #540]	@ (8002458 <HAL_RCC_ClockConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	4013      	ands	r3, r2
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d1ee      	bne.n	8002226 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2202      	movs	r2, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002252:	4b83      	ldr	r3, [pc, #524]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	22f0      	movs	r2, #240	@ 0xf0
 8002258:	4393      	bics	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	4b7f      	ldr	r3, [pc, #508]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002262:	430a      	orrs	r2, r1
 8002264:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	4013      	ands	r3, r2
 800226e:	d100      	bne.n	8002272 <HAL_RCC_ClockConfig+0x8a>
 8002270:	e089      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800227a:	4b79      	ldr	r3, [pc, #484]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	029b      	lsls	r3, r3, #10
 8002282:	4013      	ands	r3, r2
 8002284:	d120      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0e1      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002292:	4b73      	ldr	r3, [pc, #460]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	049b      	lsls	r3, r3, #18
 800229a:	4013      	ands	r3, r2
 800229c:	d114      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0d5      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d106      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2204      	movs	r2, #4
 80022b0:	4013      	ands	r3, r2
 80022b2:	d109      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0ca      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022b8:	4b69      	ldr	r3, [pc, #420]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	@ 0x80
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4013      	ands	r3, r2
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0c2      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c8:	4b65      	ldr	r3, [pc, #404]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2203      	movs	r2, #3
 80022ce:	4393      	bics	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4b62      	ldr	r3, [pc, #392]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7ff f848 	bl	8001370 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d111      	bne.n	8002310 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ec:	e009      	b.n	8002302 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ee:	f7ff f83f 	bl	8001370 <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	4a58      	ldr	r2, [pc, #352]	@ (800245c <HAL_RCC_ClockConfig+0x274>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0a5      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002302:	4b57      	ldr	r3, [pc, #348]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	220c      	movs	r2, #12
 8002308:	4013      	ands	r3, r2
 800230a:	2b08      	cmp	r3, #8
 800230c:	d1ef      	bne.n	80022ee <HAL_RCC_ClockConfig+0x106>
 800230e:	e03a      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d111      	bne.n	800233c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002318:	e009      	b.n	800232e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231a:	f7ff f829 	bl	8001370 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	4a4d      	ldr	r2, [pc, #308]	@ (800245c <HAL_RCC_ClockConfig+0x274>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e08f      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800232e:	4b4c      	ldr	r3, [pc, #304]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	220c      	movs	r2, #12
 8002334:	4013      	ands	r3, r2
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d1ef      	bne.n	800231a <HAL_RCC_ClockConfig+0x132>
 800233a:	e024      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d11b      	bne.n	800237c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002344:	e009      	b.n	800235a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7ff f813 	bl	8001370 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	4a42      	ldr	r2, [pc, #264]	@ (800245c <HAL_RCC_ClockConfig+0x274>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e079      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800235a:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	220c      	movs	r2, #12
 8002360:	4013      	ands	r3, r2
 8002362:	2b04      	cmp	r3, #4
 8002364:	d1ef      	bne.n	8002346 <HAL_RCC_ClockConfig+0x15e>
 8002366:	e00e      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002368:	f7ff f802 	bl	8001370 <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	4a3a      	ldr	r2, [pc, #232]	@ (800245c <HAL_RCC_ClockConfig+0x274>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e068      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800237c:	4b38      	ldr	r3, [pc, #224]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	220c      	movs	r2, #12
 8002382:	4013      	ands	r3, r2
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <HAL_RCC_ClockConfig+0x270>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	4013      	ands	r3, r2
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d21e      	bcs.n	80023d2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4b30      	ldr	r3, [pc, #192]	@ (8002458 <HAL_RCC_ClockConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	4393      	bics	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	4b2e      	ldr	r3, [pc, #184]	@ (8002458 <HAL_RCC_ClockConfig+0x270>)
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023a6:	f7fe ffe3 	bl	8001370 <HAL_GetTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	e009      	b.n	80023c4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f7fe ffde 	bl	8001370 <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	4a28      	ldr	r2, [pc, #160]	@ (800245c <HAL_RCC_ClockConfig+0x274>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e044      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c4:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <HAL_RCC_ClockConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4013      	ands	r3, r2
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d1ee      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2204      	movs	r2, #4
 80023d8:	4013      	ands	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a20      	ldr	r2, [pc, #128]	@ (8002464 <HAL_RCC_ClockConfig+0x27c>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2208      	movs	r2, #8
 80023f6:	4013      	ands	r3, r2
 80023f8:	d00a      	beq.n	8002410 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023fa:	4b19      	ldr	r3, [pc, #100]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002468 <HAL_RCC_ClockConfig+0x280>)
 8002400:	4013      	ands	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	00da      	lsls	r2, r3, #3
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 800240c:	430a      	orrs	r2, r1
 800240e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002410:	f000 f832 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002414:	0001      	movs	r1, r0
 8002416:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <HAL_RCC_ClockConfig+0x278>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	220f      	movs	r2, #15
 800241e:	4013      	ands	r3, r2
 8002420:	4a12      	ldr	r2, [pc, #72]	@ (800246c <HAL_RCC_ClockConfig+0x284>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	000a      	movs	r2, r1
 8002426:	40da      	lsrs	r2, r3
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <HAL_RCC_ClockConfig+0x288>)
 800242a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800242c:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <HAL_RCC_ClockConfig+0x28c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	250b      	movs	r5, #11
 8002432:	197c      	adds	r4, r7, r5
 8002434:	0018      	movs	r0, r3
 8002436:	f7fe ff55 	bl	80012e4 <HAL_InitTick>
 800243a:	0003      	movs	r3, r0
 800243c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800243e:	197b      	adds	r3, r7, r5
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002446:	197b      	adds	r3, r7, r5
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	e000      	b.n	800244e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b004      	add	sp, #16
 8002454:	bdb0      	pop	{r4, r5, r7, pc}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	40022000 	.word	0x40022000
 800245c:	00001388 	.word	0x00001388
 8002460:	40021000 	.word	0x40021000
 8002464:	fffff8ff 	.word	0xfffff8ff
 8002468:	ffffc7ff 	.word	0xffffc7ff
 800246c:	080057e0 	.word	0x080057e0
 8002470:	20000004 	.word	0x20000004
 8002474:	20000008 	.word	0x20000008

08002478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b5b0      	push	{r4, r5, r7, lr}
 800247a:	b08e      	sub	sp, #56	@ 0x38
 800247c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800247e:	4b4c      	ldr	r3, [pc, #304]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002486:	230c      	movs	r3, #12
 8002488:	4013      	ands	r3, r2
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d014      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x40>
 800248e:	d900      	bls.n	8002492 <HAL_RCC_GetSysClockFreq+0x1a>
 8002490:	e07b      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x112>
 8002492:	2b04      	cmp	r3, #4
 8002494:	d002      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x24>
 8002496:	2b08      	cmp	r3, #8
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800249a:	e076      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800249c:	4b44      	ldr	r3, [pc, #272]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2210      	movs	r2, #16
 80024a2:	4013      	ands	r3, r2
 80024a4:	d002      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80024a6:	4b43      	ldr	r3, [pc, #268]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80024aa:	e07c      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80024ac:	4b42      	ldr	r3, [pc, #264]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x140>)
 80024ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80024b0:	e079      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024b2:	4b42      	ldr	r3, [pc, #264]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x144>)
 80024b4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80024b6:	e076      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ba:	0c9a      	lsrs	r2, r3, #18
 80024bc:	230f      	movs	r3, #15
 80024be:	401a      	ands	r2, r3
 80024c0:	4b3f      	ldr	r3, [pc, #252]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x148>)
 80024c2:	5c9b      	ldrb	r3, [r3, r2]
 80024c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c8:	0d9a      	lsrs	r2, r3, #22
 80024ca:	2303      	movs	r3, #3
 80024cc:	4013      	ands	r3, r2
 80024ce:	3301      	adds	r3, #1
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d2:	4b37      	ldr	r3, [pc, #220]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x138>)
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	025b      	lsls	r3, r3, #9
 80024da:	4013      	ands	r3, r2
 80024dc:	d01a      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	4a35      	ldr	r2, [pc, #212]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x144>)
 80024e8:	2300      	movs	r3, #0
 80024ea:	69b8      	ldr	r0, [r7, #24]
 80024ec:	69f9      	ldr	r1, [r7, #28]
 80024ee:	f7fd ffab 	bl	8000448 <__aeabi_lmul>
 80024f2:	0002      	movs	r2, r0
 80024f4:	000b      	movs	r3, r1
 80024f6:	0010      	movs	r0, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f7fd ff7f 	bl	8000408 <__aeabi_uldivmod>
 800250a:	0002      	movs	r2, r0
 800250c:	000b      	movs	r3, r1
 800250e:	0013      	movs	r3, r2
 8002510:	637b      	str	r3, [r7, #52]	@ 0x34
 8002512:	e037      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002514:	4b26      	ldr	r3, [pc, #152]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2210      	movs	r2, #16
 800251a:	4013      	ands	r3, r2
 800251c:	d01a      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800251e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4a23      	ldr	r2, [pc, #140]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002528:	2300      	movs	r3, #0
 800252a:	68b8      	ldr	r0, [r7, #8]
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	f7fd ff8b 	bl	8000448 <__aeabi_lmul>
 8002532:	0002      	movs	r2, r0
 8002534:	000b      	movs	r3, r1
 8002536:	0010      	movs	r0, r2
 8002538:	0019      	movs	r1, r3
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f7fd ff5f 	bl	8000408 <__aeabi_uldivmod>
 800254a:	0002      	movs	r2, r0
 800254c:	000b      	movs	r3, r1
 800254e:	0013      	movs	r3, r2
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
 8002552:	e017      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002556:	0018      	movs	r0, r3
 8002558:	2300      	movs	r3, #0
 800255a:	0019      	movs	r1, r3
 800255c:	4a16      	ldr	r2, [pc, #88]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x140>)
 800255e:	2300      	movs	r3, #0
 8002560:	f7fd ff72 	bl	8000448 <__aeabi_lmul>
 8002564:	0002      	movs	r2, r0
 8002566:	000b      	movs	r3, r1
 8002568:	0010      	movs	r0, r2
 800256a:	0019      	movs	r1, r3
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	001c      	movs	r4, r3
 8002570:	2300      	movs	r3, #0
 8002572:	001d      	movs	r5, r3
 8002574:	0022      	movs	r2, r4
 8002576:	002b      	movs	r3, r5
 8002578:	f7fd ff46 	bl	8000408 <__aeabi_uldivmod>
 800257c:	0002      	movs	r2, r0
 800257e:	000b      	movs	r3, r1
 8002580:	0013      	movs	r3, r2
 8002582:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002588:	e00d      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800258a:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	0b5b      	lsrs	r3, r3, #13
 8002590:	2207      	movs	r2, #7
 8002592:	4013      	ands	r3, r2
 8002594:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	3301      	adds	r3, #1
 800259a:	2280      	movs	r2, #128	@ 0x80
 800259c:	0212      	lsls	r2, r2, #8
 800259e:	409a      	lsls	r2, r3
 80025a0:	0013      	movs	r3, r2
 80025a2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80025a4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b00e      	add	sp, #56	@ 0x38
 80025ae:	bdb0      	pop	{r4, r5, r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	003d0900 	.word	0x003d0900
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	007a1200 	.word	0x007a1200
 80025c0:	080057f8 	.word	0x080057f8

080025c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b02      	ldr	r3, [pc, #8]	@ (80025d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025dc:	f7ff fff2 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e0:	0001      	movs	r1, r0
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	2207      	movs	r2, #7
 80025ea:	4013      	ands	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	40d9      	lsrs	r1, r3
 80025f2:	000b      	movs	r3, r1
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	40021000 	.word	0x40021000
 8002600:	080057f0 	.word	0x080057f0

08002604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002608:	f7ff ffdc 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 800260c:	0001      	movs	r1, r0
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	0adb      	lsrs	r3, r3, #11
 8002614:	2207      	movs	r2, #7
 8002616:	4013      	ands	r3, r2
 8002618:	4a04      	ldr	r2, [pc, #16]	@ (800262c <HAL_RCC_GetPCLK2Freq+0x28>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	40d9      	lsrs	r1, r3
 800261e:	000b      	movs	r3, r1
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	40021000 	.word	0x40021000
 800262c:	080057f0 	.word	0x080057f0

08002630 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002638:	2317      	movs	r3, #23
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2220      	movs	r2, #32
 8002646:	4013      	ands	r3, r2
 8002648:	d106      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	@ 0x80
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	4013      	ands	r3, r2
 8002654:	d100      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002656:	e104      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002658:	4bb9      	ldr	r3, [pc, #740]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800265a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	055b      	lsls	r3, r3, #21
 8002660:	4013      	ands	r3, r2
 8002662:	d10a      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002664:	4bb6      	ldr	r3, [pc, #728]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002668:	4bb5      	ldr	r3, [pc, #724]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800266a:	2180      	movs	r1, #128	@ 0x80
 800266c:	0549      	lsls	r1, r1, #21
 800266e:	430a      	orrs	r2, r1
 8002670:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002672:	2317      	movs	r3, #23
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4bb2      	ldr	r3, [pc, #712]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4013      	ands	r3, r2
 8002684:	d11a      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4baf      	ldr	r3, [pc, #700]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4bae      	ldr	r3, [pc, #696]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	0049      	lsls	r1, r1, #1
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002694:	f7fe fe6c 	bl	8001370 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	e008      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7fe fe67 	bl	8001370 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b64      	cmp	r3, #100	@ 0x64
 80026aa:	d901      	bls.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e143      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4ba4      	ldr	r3, [pc, #656]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	d0f0      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80026bc:	4ba0      	ldr	r3, [pc, #640]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	23c0      	movs	r3, #192	@ 0xc0
 80026c2:	039b      	lsls	r3, r3, #14
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	23c0      	movs	r3, #192	@ 0xc0
 80026ce:	039b      	lsls	r3, r3, #14
 80026d0:	4013      	ands	r3, r2
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d107      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	23c0      	movs	r3, #192	@ 0xc0
 80026de:	039b      	lsls	r3, r3, #14
 80026e0:	4013      	ands	r3, r2
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d013      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	23c0      	movs	r3, #192	@ 0xc0
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	401a      	ands	r2, r3
 80026f2:	23c0      	movs	r3, #192	@ 0xc0
 80026f4:	029b      	lsls	r3, r3, #10
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d10a      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80026fa:	4b91      	ldr	r3, [pc, #580]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	029b      	lsls	r3, r3, #10
 8002702:	401a      	ands	r2, r3
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	029b      	lsls	r3, r3, #10
 8002708:	429a      	cmp	r2, r3
 800270a:	d101      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e113      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002710:	4b8b      	ldr	r3, [pc, #556]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002712:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002714:	23c0      	movs	r3, #192	@ 0xc0
 8002716:	029b      	lsls	r3, r3, #10
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d049      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	23c0      	movs	r3, #192	@ 0xc0
 8002728:	029b      	lsls	r3, r3, #10
 800272a:	4013      	ands	r3, r2
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	429a      	cmp	r2, r3
 8002730:	d004      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2220      	movs	r2, #32
 8002738:	4013      	ands	r3, r2
 800273a:	d10d      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	23c0      	movs	r3, #192	@ 0xc0
 8002742:	029b      	lsls	r3, r3, #10
 8002744:	4013      	ands	r3, r2
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d034      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	4013      	ands	r3, r2
 8002756:	d02e      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002758:	4b79      	ldr	r3, [pc, #484]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800275a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275c:	4a7a      	ldr	r2, [pc, #488]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800275e:	4013      	ands	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002762:	4b77      	ldr	r3, [pc, #476]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002764:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002766:	4b76      	ldr	r3, [pc, #472]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002768:	2180      	movs	r1, #128	@ 0x80
 800276a:	0309      	lsls	r1, r1, #12
 800276c:	430a      	orrs	r2, r1
 800276e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002770:	4b73      	ldr	r3, [pc, #460]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002772:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002774:	4b72      	ldr	r3, [pc, #456]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002776:	4975      	ldr	r1, [pc, #468]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002778:	400a      	ands	r2, r1
 800277a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800277c:	4b70      	ldr	r3, [pc, #448]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4013      	ands	r3, r2
 800278a:	d014      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fdf0 	bl	8001370 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002794:	e009      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7fe fdeb 	bl	8001370 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0c6      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027aa:	4b65      	ldr	r3, [pc, #404]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	d0ef      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	4013      	ands	r3, r2
 80027c0:	d01f      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	23c0      	movs	r3, #192	@ 0xc0
 80027c8:	029b      	lsls	r3, r3, #10
 80027ca:	401a      	ands	r2, r3
 80027cc:	23c0      	movs	r3, #192	@ 0xc0
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d10c      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80027d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a5e      	ldr	r2, [pc, #376]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80027da:	4013      	ands	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	23c0      	movs	r3, #192	@ 0xc0
 80027e4:	039b      	lsls	r3, r3, #14
 80027e6:	401a      	ands	r2, r3
 80027e8:	4b55      	ldr	r3, [pc, #340]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	4b54      	ldr	r3, [pc, #336]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	23c0      	movs	r3, #192	@ 0xc0
 80027f8:	029b      	lsls	r3, r3, #10
 80027fa:	401a      	ands	r2, r3
 80027fc:	4b50      	ldr	r3, [pc, #320]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2220      	movs	r2, #32
 8002808:	4013      	ands	r3, r2
 800280a:	d01f      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	23c0      	movs	r3, #192	@ 0xc0
 8002812:	029b      	lsls	r3, r3, #10
 8002814:	401a      	ands	r2, r3
 8002816:	23c0      	movs	r3, #192	@ 0xc0
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	429a      	cmp	r2, r3
 800281c:	d10c      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800281e:	4b48      	ldr	r3, [pc, #288]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a4c      	ldr	r2, [pc, #304]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002824:	4013      	ands	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	23c0      	movs	r3, #192	@ 0xc0
 800282e:	039b      	lsls	r3, r3, #14
 8002830:	401a      	ands	r2, r3
 8002832:	4b43      	ldr	r3, [pc, #268]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	4b41      	ldr	r3, [pc, #260]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800283a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	23c0      	movs	r3, #192	@ 0xc0
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	401a      	ands	r2, r3
 8002846:	4b3e      	ldr	r3, [pc, #248]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002848:	430a      	orrs	r2, r1
 800284a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800284c:	2317      	movs	r3, #23
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b3a      	ldr	r3, [pc, #232]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800285a:	4b39      	ldr	r3, [pc, #228]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800285c:	493e      	ldr	r1, [pc, #248]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800285e:	400a      	ands	r2, r1
 8002860:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2201      	movs	r2, #1
 8002868:	4013      	ands	r3, r2
 800286a:	d009      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800286c:	4b34      	ldr	r3, [pc, #208]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002870:	2203      	movs	r2, #3
 8002872:	4393      	bics	r3, r2
 8002874:	0019      	movs	r1, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	4b31      	ldr	r3, [pc, #196]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800287c:	430a      	orrs	r2, r1
 800287e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	d009      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800288a:	4b2d      	ldr	r3, [pc, #180]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288e:	220c      	movs	r2, #12
 8002890:	4393      	bics	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	4b29      	ldr	r3, [pc, #164]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800289a:	430a      	orrs	r2, r1
 800289c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2204      	movs	r2, #4
 80028a4:	4013      	ands	r3, r2
 80028a6:	d009      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028a8:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ac:	4a2b      	ldr	r2, [pc, #172]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2208      	movs	r2, #8
 80028c2:	4013      	ands	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ca:	4a25      	ldr	r2, [pc, #148]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699a      	ldr	r2, [r3, #24]
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	2380      	movs	r3, #128	@ 0x80
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4013      	ands	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028e6:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	4a17      	ldr	r2, [pc, #92]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	0019      	movs	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69da      	ldr	r2, [r3, #28]
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028f6:	430a      	orrs	r2, r1
 80028f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2240      	movs	r2, #64	@ 0x40
 8002900:	4013      	ands	r3, r2
 8002902:	d009      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002904:	4b0e      	ldr	r3, [pc, #56]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002908:	4a16      	ldr	r2, [pc, #88]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002914:	430a      	orrs	r2, r1
 8002916:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2280      	movs	r2, #128	@ 0x80
 800291e:	4013      	ands	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002922:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	4a10      	ldr	r2, [pc, #64]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1a      	ldr	r2, [r3, #32]
 8002930:	4b03      	ldr	r3, [pc, #12]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002932:	430a      	orrs	r2, r1
 8002934:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	0018      	movs	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	b006      	add	sp, #24
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
 8002948:	fffcffff 	.word	0xfffcffff
 800294c:	fff7ffff 	.word	0xfff7ffff
 8002950:	00001388 	.word	0x00001388
 8002954:	ffcfffff 	.word	0xffcfffff
 8002958:	efffffff 	.word	0xefffffff
 800295c:	fffff3ff 	.word	0xfffff3ff
 8002960:	ffffcfff 	.word	0xffffcfff
 8002964:	fbffffff 	.word	0xfbffffff
 8002968:	fff3ffff 	.word	0xfff3ffff

0800296c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e032      	b.n	80029e4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2239      	movs	r2, #57	@ 0x39
 8002982:	5c9b      	ldrb	r3, [r3, r2]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2238      	movs	r2, #56	@ 0x38
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f7fe fb7b 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2239      	movs	r2, #57	@ 0x39
 800299e:	2102      	movs	r1, #2
 80029a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	0019      	movs	r1, r3
 80029ac:	0010      	movs	r0, r2
 80029ae:	f000 fc0f 	bl	80031d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	223e      	movs	r2, #62	@ 0x3e
 80029b6:	2101      	movs	r1, #1
 80029b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	223a      	movs	r2, #58	@ 0x3a
 80029be:	2101      	movs	r1, #1
 80029c0:	5499      	strb	r1, [r3, r2]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	223b      	movs	r2, #59	@ 0x3b
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	223c      	movs	r2, #60	@ 0x3c
 80029ce:	2101      	movs	r1, #1
 80029d0:	5499      	strb	r1, [r3, r2]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	223d      	movs	r2, #61	@ 0x3d
 80029d6:	2101      	movs	r1, #1
 80029d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2239      	movs	r2, #57	@ 0x39
 80029de:	2101      	movs	r1, #1
 80029e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2239      	movs	r2, #57	@ 0x39
 80029f8:	5c9b      	ldrb	r3, [r3, r2]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d001      	beq.n	8002a04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e033      	b.n	8002a6c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2239      	movs	r2, #57	@ 0x39
 8002a08:	2102      	movs	r1, #2
 8002a0a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	05db      	lsls	r3, r3, #23
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d00e      	beq.n	8002a36 <HAL_TIM_Base_Start+0x4a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a15      	ldr	r2, [pc, #84]	@ (8002a74 <HAL_TIM_Base_Start+0x88>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_TIM_Base_Start+0x4a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a14      	ldr	r2, [pc, #80]	@ (8002a78 <HAL_TIM_Base_Start+0x8c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_TIM_Base_Start+0x4a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a12      	ldr	r2, [pc, #72]	@ (8002a7c <HAL_TIM_Base_Start+0x90>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d111      	bne.n	8002a5a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d010      	beq.n	8002a6a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2101      	movs	r1, #1
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	e007      	b.n	8002a6a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2101      	movs	r1, #1
 8002a66:	430a      	orrs	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40010800 	.word	0x40010800
 8002a7c:	40011400 	.word	0x40011400

08002a80 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <HAL_TIM_Base_Stop+0x38>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	d107      	bne.n	8002aa4 <HAL_TIM_Base_Stop+0x24>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	438a      	bics	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2239      	movs	r2, #57	@ 0x39
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	00001111 	.word	0x00001111

08002abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e032      	b.n	8002b34 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2239      	movs	r2, #57	@ 0x39
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2238      	movs	r2, #56	@ 0x38
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 f829 	bl	8002b3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2239      	movs	r2, #57	@ 0x39
 8002aee:	2102      	movs	r1, #2
 8002af0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f000 fb67 	bl	80031d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	223e      	movs	r2, #62	@ 0x3e
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	223a      	movs	r2, #58	@ 0x3a
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223b      	movs	r2, #59	@ 0x3b
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	223c      	movs	r2, #60	@ 0x3c
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	223d      	movs	r2, #61	@ 0x3d
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2239      	movs	r2, #57	@ 0x39
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b44:	46c0      	nop			@ (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d108      	bne.n	8002b6e <HAL_TIM_PWM_Start+0x22>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	223a      	movs	r2, #58	@ 0x3a
 8002b60:	5c9b      	ldrb	r3, [r3, r2]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	1e5a      	subs	r2, r3, #1
 8002b68:	4193      	sbcs	r3, r2
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e01f      	b.n	8002bae <HAL_TIM_PWM_Start+0x62>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d108      	bne.n	8002b86 <HAL_TIM_PWM_Start+0x3a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	223b      	movs	r2, #59	@ 0x3b
 8002b78:	5c9b      	ldrb	r3, [r3, r2]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	1e5a      	subs	r2, r3, #1
 8002b80:	4193      	sbcs	r3, r2
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	e013      	b.n	8002bae <HAL_TIM_PWM_Start+0x62>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d108      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x52>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	223c      	movs	r2, #60	@ 0x3c
 8002b90:	5c9b      	ldrb	r3, [r3, r2]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	1e5a      	subs	r2, r3, #1
 8002b98:	4193      	sbcs	r3, r2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e007      	b.n	8002bae <HAL_TIM_PWM_Start+0x62>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	223d      	movs	r2, #61	@ 0x3d
 8002ba2:	5c9b      	ldrb	r3, [r3, r2]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	1e5a      	subs	r2, r3, #1
 8002baa:	4193      	sbcs	r3, r2
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e052      	b.n	8002c5c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_PWM_Start+0x7a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	223a      	movs	r2, #58	@ 0x3a
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	5499      	strb	r1, [r3, r2]
 8002bc4:	e013      	b.n	8002bee <HAL_TIM_PWM_Start+0xa2>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x8a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	223b      	movs	r2, #59	@ 0x3b
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	5499      	strb	r1, [r3, r2]
 8002bd4:	e00b      	b.n	8002bee <HAL_TIM_PWM_Start+0xa2>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x9a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	223c      	movs	r2, #60	@ 0x3c
 8002be0:	2102      	movs	r1, #2
 8002be2:	5499      	strb	r1, [r3, r2]
 8002be4:	e003      	b.n	8002bee <HAL_TIM_PWM_Start+0xa2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	223d      	movs	r2, #61	@ 0x3d
 8002bea:	2102      	movs	r1, #2
 8002bec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 fce6 	bl	80035c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2380      	movs	r3, #128	@ 0x80
 8002c02:	05db      	lsls	r3, r3, #23
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d00e      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xda>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a15      	ldr	r2, [pc, #84]	@ (8002c64 <HAL_TIM_PWM_Start+0x118>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xda>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <HAL_TIM_PWM_Start+0x11c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xda>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <HAL_TIM_PWM_Start+0x120>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d111      	bne.n	8002c4a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d010      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2101      	movs	r1, #1
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c48:	e007      	b.n	8002c5a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2101      	movs	r1, #1
 8002c56:	430a      	orrs	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b004      	add	sp, #16
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40010800 	.word	0x40010800
 8002c6c:	40011400 	.word	0x40011400

08002c70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e088      	b.n	8002d96 <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2239      	movs	r2, #57	@ 0x39
 8002c88:	5c9b      	ldrb	r3, [r3, r2]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2238      	movs	r2, #56	@ 0x38
 8002c94:	2100      	movs	r1, #0
 8002c96:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7fe f9b6 	bl	800100c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2239      	movs	r2, #57	@ 0x39
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	493b      	ldr	r1, [pc, #236]	@ (8002da0 <HAL_TIM_Encoder_Init+0x130>)
 8002cb4:	400a      	ands	r2, r1
 8002cb6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	0010      	movs	r0, r2
 8002cc4:	f000 fa84 	bl	80031d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4a2d      	ldr	r2, [pc, #180]	@ (8002da4 <HAL_TIM_Encoder_Init+0x134>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4a28      	ldr	r2, [pc, #160]	@ (8002da8 <HAL_TIM_Encoder_Init+0x138>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4a27      	ldr	r2, [pc, #156]	@ (8002dac <HAL_TIM_Encoder_Init+0x13c>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	011a      	lsls	r2, r3, #4
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	031b      	lsls	r3, r3, #12
 8002d32:	4313      	orrs	r3, r2
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2222      	movs	r2, #34	@ 0x22
 8002d3e:	4393      	bics	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2288      	movs	r2, #136	@ 0x88
 8002d46:	4393      	bics	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	4313      	orrs	r3, r2
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	223e      	movs	r2, #62	@ 0x3e
 8002d78:	2101      	movs	r1, #1
 8002d7a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	223a      	movs	r2, #58	@ 0x3a
 8002d80:	2101      	movs	r1, #1
 8002d82:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	223b      	movs	r2, #59	@ 0x3b
 8002d88:	2101      	movs	r1, #1
 8002d8a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2239      	movs	r2, #57	@ 0x39
 8002d90:	2101      	movs	r1, #1
 8002d92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	0018      	movs	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b006      	add	sp, #24
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			@ (mov r8, r8)
 8002da0:	ffffbff8 	.word	0xffffbff8
 8002da4:	fffffcfc 	.word	0xfffffcfc
 8002da8:	fffff3f3 	.word	0xfffff3f3
 8002dac:	ffff0f0f 	.word	0xffff0f0f

08002db0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002dba:	200f      	movs	r0, #15
 8002dbc:	183b      	adds	r3, r7, r0
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	213a      	movs	r1, #58	@ 0x3a
 8002dc2:	5c52      	ldrb	r2, [r2, r1]
 8002dc4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002dc6:	230e      	movs	r3, #14
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	213b      	movs	r1, #59	@ 0x3b
 8002dce:	5c52      	ldrb	r2, [r2, r1]
 8002dd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <HAL_TIM_Encoder_Start+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dd8:	183b      	adds	r3, r7, r0
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d001      	beq.n	8002de4 <HAL_TIM_Encoder_Start+0x34>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e056      	b.n	8002e92 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	223a      	movs	r2, #58	@ 0x3a
 8002de8:	2102      	movs	r1, #2
 8002dea:	5499      	strb	r1, [r3, r2]
 8002dec:	e022      	b.n	8002e34 <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d10b      	bne.n	8002e0c <HAL_TIM_Encoder_Start+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002df4:	230e      	movs	r3, #14
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d001      	beq.n	8002e02 <HAL_TIM_Encoder_Start+0x52>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e047      	b.n	8002e92 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	223b      	movs	r2, #59	@ 0x3b
 8002e06:	2102      	movs	r1, #2
 8002e08:	5499      	strb	r1, [r3, r2]
 8002e0a:	e013      	b.n	8002e34 <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d104      	bne.n	8002e20 <HAL_TIM_Encoder_Start+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e16:	230e      	movs	r3, #14
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d001      	beq.n	8002e24 <HAL_TIM_Encoder_Start+0x74>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e036      	b.n	8002e92 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	223a      	movs	r2, #58	@ 0x3a
 8002e28:	2102      	movs	r1, #2
 8002e2a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	223b      	movs	r2, #59	@ 0x3b
 8002e30:	2102      	movs	r1, #2
 8002e32:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_Encoder_Start+0x92>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d008      	beq.n	8002e52 <HAL_TIM_Encoder_Start+0xa2>
 8002e40:	e00f      	b.n	8002e62 <HAL_TIM_Encoder_Start+0xb2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2201      	movs	r2, #1
 8002e48:	2100      	movs	r1, #0
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 fbbc 	bl	80035c8 <TIM_CCxChannelCmd>
      break;
 8002e50:	e016      	b.n	8002e80 <HAL_TIM_Encoder_Start+0xd0>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	2104      	movs	r1, #4
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fbb4 	bl	80035c8 <TIM_CCxChannelCmd>
      break;
 8002e60:	e00e      	b.n	8002e80 <HAL_TIM_Encoder_Start+0xd0>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2201      	movs	r2, #1
 8002e68:	2100      	movs	r1, #0
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 fbac 	bl	80035c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	2104      	movs	r1, #4
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 fba5 	bl	80035c8 <TIM_CCxChannelCmd>
      break;
 8002e7e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b004      	add	sp, #16
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea8:	2317      	movs	r3, #23
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2238      	movs	r2, #56	@ 0x38
 8002eb4:	5c9b      	ldrb	r3, [r3, r2]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x22>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e0ad      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2238      	movs	r2, #56	@ 0x38
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b0c      	cmp	r3, #12
 8002eca:	d100      	bne.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x32>
 8002ecc:	e076      	b.n	8002fbc <HAL_TIM_PWM_ConfigChannel+0x120>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	d900      	bls.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002ed4:	e095      	b.n	8003002 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d04e      	beq.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0xde>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d900      	bls.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002ee2:	e08e      	b.n	8003002 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d021      	beq.n	8002f34 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002ef0:	e087      	b.n	8003002 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	0011      	movs	r1, r2
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 f9c6 	bl	800328c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2108      	movs	r1, #8
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2104      	movs	r1, #4
 8002f1c:	438a      	bics	r2, r1
 8002f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6999      	ldr	r1, [r3, #24]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	619a      	str	r2, [r3, #24]
      break;
 8002f32:	e06b      	b.n	800300c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 f9e1 	bl	8003304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699a      	ldr	r2, [r3, #24]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2180      	movs	r1, #128	@ 0x80
 8002f4e:	0109      	lsls	r1, r1, #4
 8002f50:	430a      	orrs	r2, r1
 8002f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4931      	ldr	r1, [pc, #196]	@ (8003024 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002f60:	400a      	ands	r2, r1
 8002f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6999      	ldr	r1, [r3, #24]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	021a      	lsls	r2, r3, #8
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	619a      	str	r2, [r3, #24]
      break;
 8002f78:	e048      	b.n	800300c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	0011      	movs	r1, r2
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fa00 	bl	8003388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2108      	movs	r1, #8
 8002f94:	430a      	orrs	r2, r1
 8002f96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	438a      	bics	r2, r1
 8002fa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69d9      	ldr	r1, [r3, #28]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	61da      	str	r2, [r3, #28]
      break;
 8002fba:	e027      	b.n	800300c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 fa1f 	bl	8003408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2180      	movs	r1, #128	@ 0x80
 8002fd6:	0109      	lsls	r1, r1, #4
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	490f      	ldr	r1, [pc, #60]	@ (8003024 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002fe8:	400a      	ands	r2, r1
 8002fea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69d9      	ldr	r1, [r3, #28]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	61da      	str	r2, [r3, #28]
      break;
 8003000:	e004      	b.n	800300c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003002:	2317      	movs	r3, #23
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
      break;
 800300a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2238      	movs	r2, #56	@ 0x38
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]

  return status;
 8003014:	2317      	movs	r3, #23
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	781b      	ldrb	r3, [r3, #0]
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b006      	add	sp, #24
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	fffffbff 	.word	0xfffffbff

08003028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003032:	230f      	movs	r3, #15
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2238      	movs	r2, #56	@ 0x38
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_TIM_ConfigClockSource+0x20>
 8003044:	2302      	movs	r3, #2
 8003046:	e0bc      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x19a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2238      	movs	r2, #56	@ 0x38
 800304c:	2101      	movs	r1, #1
 800304e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2239      	movs	r2, #57	@ 0x39
 8003054:	2102      	movs	r1, #2
 8003056:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2277      	movs	r2, #119	@ 0x77
 8003064:	4393      	bics	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4a58      	ldr	r2, [pc, #352]	@ (80031cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800306c:	4013      	ands	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2280      	movs	r2, #128	@ 0x80
 800307e:	0192      	lsls	r2, r2, #6
 8003080:	4293      	cmp	r3, r2
 8003082:	d040      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0xde>
 8003084:	2280      	movs	r2, #128	@ 0x80
 8003086:	0192      	lsls	r2, r2, #6
 8003088:	4293      	cmp	r3, r2
 800308a:	d900      	bls.n	800308e <HAL_TIM_ConfigClockSource+0x66>
 800308c:	e088      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x178>
 800308e:	2280      	movs	r2, #128	@ 0x80
 8003090:	0152      	lsls	r2, r2, #5
 8003092:	4293      	cmp	r3, r2
 8003094:	d100      	bne.n	8003098 <HAL_TIM_ConfigClockSource+0x70>
 8003096:	e088      	b.n	80031aa <HAL_TIM_ConfigClockSource+0x182>
 8003098:	2280      	movs	r2, #128	@ 0x80
 800309a:	0152      	lsls	r2, r2, #5
 800309c:	4293      	cmp	r3, r2
 800309e:	d900      	bls.n	80030a2 <HAL_TIM_ConfigClockSource+0x7a>
 80030a0:	e07e      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x178>
 80030a2:	2b70      	cmp	r3, #112	@ 0x70
 80030a4:	d018      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0xb0>
 80030a6:	d900      	bls.n	80030aa <HAL_TIM_ConfigClockSource+0x82>
 80030a8:	e07a      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x178>
 80030aa:	2b60      	cmp	r3, #96	@ 0x60
 80030ac:	d04f      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x126>
 80030ae:	d900      	bls.n	80030b2 <HAL_TIM_ConfigClockSource+0x8a>
 80030b0:	e076      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x178>
 80030b2:	2b50      	cmp	r3, #80	@ 0x50
 80030b4:	d03b      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x106>
 80030b6:	d900      	bls.n	80030ba <HAL_TIM_ConfigClockSource+0x92>
 80030b8:	e072      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x178>
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	d057      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x146>
 80030be:	d900      	bls.n	80030c2 <HAL_TIM_ConfigClockSource+0x9a>
 80030c0:	e06e      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x178>
 80030c2:	2b30      	cmp	r3, #48	@ 0x30
 80030c4:	d063      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x166>
 80030c6:	d86b      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x178>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d060      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x166>
 80030cc:	d868      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x178>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d05d      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x166>
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d05b      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x166>
 80030d6:	e063      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030e8:	f000 fa4e 	bl	8003588 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2277      	movs	r2, #119	@ 0x77
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	609a      	str	r2, [r3, #8]
      break;
 8003104:	e052      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003116:	f000 fa37 	bl	8003588 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2180      	movs	r1, #128	@ 0x80
 8003126:	01c9      	lsls	r1, r1, #7
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]
      break;
 800312c:	e03e      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800313a:	001a      	movs	r2, r3
 800313c:	f000 f9aa 	bl	8003494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2150      	movs	r1, #80	@ 0x50
 8003146:	0018      	movs	r0, r3
 8003148:	f000 fa04 	bl	8003554 <TIM_ITRx_SetConfig>
      break;
 800314c:	e02e      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800315a:	001a      	movs	r2, r3
 800315c:	f000 f9c8 	bl	80034f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2160      	movs	r1, #96	@ 0x60
 8003166:	0018      	movs	r0, r3
 8003168:	f000 f9f4 	bl	8003554 <TIM_ITRx_SetConfig>
      break;
 800316c:	e01e      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317a:	001a      	movs	r2, r3
 800317c:	f000 f98a 	bl	8003494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2140      	movs	r1, #64	@ 0x40
 8003186:	0018      	movs	r0, r3
 8003188:	f000 f9e4 	bl	8003554 <TIM_ITRx_SetConfig>
      break;
 800318c:	e00e      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0019      	movs	r1, r3
 8003198:	0010      	movs	r0, r2
 800319a:	f000 f9db 	bl	8003554 <TIM_ITRx_SetConfig>
      break;
 800319e:	e005      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80031a0:	230f      	movs	r3, #15
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
      break;
 80031a8:	e000      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80031aa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2239      	movs	r2, #57	@ 0x39
 80031b0:	2101      	movs	r1, #1
 80031b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2238      	movs	r2, #56	@ 0x38
 80031b8:	2100      	movs	r1, #0
 80031ba:	5499      	strb	r1, [r3, r2]

  return status;
 80031bc:	230f      	movs	r3, #15
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	781b      	ldrb	r3, [r3, #0]
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b004      	add	sp, #16
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	ffff00ff 	.word	0xffff00ff

080031d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	2380      	movs	r3, #128	@ 0x80
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d00b      	beq.n	8003202 <TIM_Base_SetConfig+0x32>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a23      	ldr	r2, [pc, #140]	@ (800327c <TIM_Base_SetConfig+0xac>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <TIM_Base_SetConfig+0x32>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a22      	ldr	r2, [pc, #136]	@ (8003280 <TIM_Base_SetConfig+0xb0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <TIM_Base_SetConfig+0x32>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <TIM_Base_SetConfig+0xb4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d108      	bne.n	8003214 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2270      	movs	r2, #112	@ 0x70
 8003206:	4393      	bics	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	05db      	lsls	r3, r3, #23
 800321a:	429a      	cmp	r2, r3
 800321c:	d00b      	beq.n	8003236 <TIM_Base_SetConfig+0x66>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a16      	ldr	r2, [pc, #88]	@ (800327c <TIM_Base_SetConfig+0xac>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d007      	beq.n	8003236 <TIM_Base_SetConfig+0x66>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a15      	ldr	r2, [pc, #84]	@ (8003280 <TIM_Base_SetConfig+0xb0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d003      	beq.n	8003236 <TIM_Base_SetConfig+0x66>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a14      	ldr	r2, [pc, #80]	@ (8003284 <TIM_Base_SetConfig+0xb4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d108      	bne.n	8003248 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a13      	ldr	r2, [pc, #76]	@ (8003288 <TIM_Base_SetConfig+0xb8>)
 800323a:	4013      	ands	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2280      	movs	r2, #128	@ 0x80
 800324c:	4393      	bics	r3, r2
 800324e:	001a      	movs	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	615a      	str	r2, [r3, #20]
}
 8003274:	46c0      	nop			@ (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b004      	add	sp, #16
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40000400 	.word	0x40000400
 8003280:	40010800 	.word	0x40010800
 8003284:	40011400 	.word	0x40011400
 8003288:	fffffcff 	.word	0xfffffcff

0800328c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	2201      	movs	r2, #1
 800329c:	4393      	bics	r3, r2
 800329e:	001a      	movs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2270      	movs	r2, #112	@ 0x70
 80032ba:	4393      	bics	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2203      	movs	r2, #3
 80032c2:	4393      	bics	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2202      	movs	r2, #2
 80032d4:	4393      	bics	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	621a      	str	r2, [r3, #32]
}
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b006      	add	sp, #24
 8003302:	bd80      	pop	{r7, pc}

08003304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	2210      	movs	r2, #16
 8003314:	4393      	bics	r3, r2
 8003316:	001a      	movs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a13      	ldr	r2, [pc, #76]	@ (8003380 <TIM_OC2_SetConfig+0x7c>)
 8003332:	4013      	ands	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a12      	ldr	r2, [pc, #72]	@ (8003384 <TIM_OC2_SetConfig+0x80>)
 800333a:	4013      	ands	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2220      	movs	r2, #32
 800334e:	4393      	bics	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	621a      	str	r2, [r3, #32]
}
 8003378:	46c0      	nop			@ (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b006      	add	sp, #24
 800337e:	bd80      	pop	{r7, pc}
 8003380:	ffff8fff 	.word	0xffff8fff
 8003384:	fffffcff 	.word	0xfffffcff

08003388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4a1a      	ldr	r2, [pc, #104]	@ (8003400 <TIM_OC3_SetConfig+0x78>)
 8003398:	401a      	ands	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2270      	movs	r2, #112	@ 0x70
 80033b4:	4393      	bics	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2203      	movs	r2, #3
 80033bc:	4393      	bics	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003404 <TIM_OC3_SetConfig+0x7c>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	621a      	str	r2, [r3, #32]
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b006      	add	sp, #24
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	fffffeff 	.word	0xfffffeff
 8003404:	fffffdff 	.word	0xfffffdff

08003408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4a1b      	ldr	r2, [pc, #108]	@ (8003484 <TIM_OC4_SetConfig+0x7c>)
 8003418:	401a      	ands	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a15      	ldr	r2, [pc, #84]	@ (8003488 <TIM_OC4_SetConfig+0x80>)
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a14      	ldr	r2, [pc, #80]	@ (800348c <TIM_OC4_SetConfig+0x84>)
 800343c:	4013      	ands	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4a10      	ldr	r2, [pc, #64]	@ (8003490 <TIM_OC4_SetConfig+0x88>)
 8003450:	4013      	ands	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	031b      	lsls	r3, r3, #12
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b006      	add	sp, #24
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	ffffefff 	.word	0xffffefff
 8003488:	ffff8fff 	.word	0xffff8fff
 800348c:	fffffcff 	.word	0xfffffcff
 8003490:	ffffdfff 	.word	0xffffdfff

08003494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	2201      	movs	r2, #1
 80034ac:	4393      	bics	r3, r2
 80034ae:	001a      	movs	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	22f0      	movs	r2, #240	@ 0xf0
 80034be:	4393      	bics	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	220a      	movs	r2, #10
 80034d0:	4393      	bics	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	621a      	str	r2, [r3, #32]
}
 80034e8:	46c0      	nop			@ (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b006      	add	sp, #24
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	2210      	movs	r2, #16
 8003502:	4393      	bics	r3, r2
 8003504:	001a      	movs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	4a0d      	ldr	r2, [pc, #52]	@ (8003550 <TIM_TI2_ConfigInputStage+0x60>)
 800351a:	4013      	ands	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	031b      	lsls	r3, r3, #12
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	22a0      	movs	r2, #160	@ 0xa0
 800352c:	4393      	bics	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	621a      	str	r2, [r3, #32]
}
 8003546:	46c0      	nop			@ (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b006      	add	sp, #24
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	ffff0fff 	.word	0xffff0fff

08003554 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2270      	movs	r2, #112	@ 0x70
 8003568:	4393      	bics	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	2207      	movs	r2, #7
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	4a09      	ldr	r2, [pc, #36]	@ (80035c4 <TIM_ETR_SetConfig+0x3c>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	021a      	lsls	r2, r3, #8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	46c0      	nop			@ (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b006      	add	sp, #24
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	ffff00ff 	.word	0xffff00ff

080035c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	221f      	movs	r2, #31
 80035d8:	4013      	ands	r3, r2
 80035da:	2201      	movs	r2, #1
 80035dc:	409a      	lsls	r2, r3
 80035de:	0013      	movs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	43d2      	mvns	r2, r2
 80035ea:	401a      	ands	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1a      	ldr	r2, [r3, #32]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	211f      	movs	r1, #31
 80035f8:	400b      	ands	r3, r1
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4099      	lsls	r1, r3
 80035fe:	000b      	movs	r3, r1
 8003600:	431a      	orrs	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b006      	add	sp, #24
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2238      	movs	r2, #56	@ 0x38
 800361e:	5c9b      	ldrb	r3, [r3, r2]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e047      	b.n	80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2238      	movs	r2, #56	@ 0x38
 800362c:	2101      	movs	r1, #1
 800362e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2239      	movs	r2, #57	@ 0x39
 8003634:	2102      	movs	r1, #2
 8003636:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2270      	movs	r2, #112	@ 0x70
 800364c:	4393      	bics	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	2380      	movs	r3, #128	@ 0x80
 8003668:	05db      	lsls	r3, r3, #23
 800366a:	429a      	cmp	r2, r3
 800366c:	d00e      	beq.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a13      	ldr	r2, [pc, #76]	@ (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a11      	ldr	r2, [pc, #68]	@ (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a10      	ldr	r2, [pc, #64]	@ (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d10c      	bne.n	80036a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2280      	movs	r2, #128	@ 0x80
 8003690:	4393      	bics	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	4313      	orrs	r3, r2
 800369c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2239      	movs	r2, #57	@ 0x39
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2238      	movs	r2, #56	@ 0x38
 80036b2:	2100      	movs	r1, #0
 80036b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40010800 	.word	0x40010800
 80036c8:	40011400 	.word	0x40011400

080036cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e044      	b.n	8003768 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d107      	bne.n	80036f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2278      	movs	r2, #120	@ 0x78
 80036ea:	2100      	movs	r1, #0
 80036ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	0018      	movs	r0, r3
 80036f2:	f7fd fd61 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2224      	movs	r2, #36	@ 0x24
 80036fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2101      	movs	r1, #1
 8003708:	438a      	bics	r2, r1
 800370a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	0018      	movs	r0, r3
 8003710:	f000 fbce 	bl	8003eb0 <UART_SetConfig>
 8003714:	0003      	movs	r3, r0
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e024      	b.n	8003768 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	0018      	movs	r0, r3
 800372a:	f000 fe5f 	bl	80043ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	490d      	ldr	r1, [pc, #52]	@ (8003770 <HAL_UART_Init+0xa4>)
 800373a:	400a      	ands	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	212a      	movs	r1, #42	@ 0x2a
 800374a:	438a      	bics	r2, r1
 800374c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2101      	movs	r1, #1
 800375a:	430a      	orrs	r2, r1
 800375c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f000 fef7 	bl	8004554 <UART_CheckIdleState>
 8003766:	0003      	movs	r3, r0
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}
 8003770:	ffffb7ff 	.word	0xffffb7ff

08003774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	@ 0x28
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	1dbb      	adds	r3, r7, #6
 8003782:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003788:	2b20      	cmp	r3, #32
 800378a:	d000      	beq.n	800378e <HAL_UART_Transmit+0x1a>
 800378c:	e08c      	b.n	80038a8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_UART_Transmit+0x28>
 8003794:	1dbb      	adds	r3, r7, #6
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e084      	b.n	80038aa <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	015b      	lsls	r3, r3, #5
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d109      	bne.n	80037c0 <HAL_UART_Transmit+0x4c>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2201      	movs	r2, #1
 80037b8:	4013      	ands	r3, r2
 80037ba:	d001      	beq.n	80037c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e074      	b.n	80038aa <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2284      	movs	r2, #132	@ 0x84
 80037c4:	2100      	movs	r1, #0
 80037c6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2221      	movs	r2, #33	@ 0x21
 80037cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ce:	f7fd fdcf 	bl	8001370 <HAL_GetTick>
 80037d2:	0003      	movs	r3, r0
 80037d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1dba      	adds	r2, r7, #6
 80037da:	2150      	movs	r1, #80	@ 0x50
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1dba      	adds	r2, r7, #6
 80037e4:	2152      	movs	r1, #82	@ 0x52
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	2380      	movs	r3, #128	@ 0x80
 80037f0:	015b      	lsls	r3, r3, #5
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d108      	bne.n	8003808 <HAL_UART_Transmit+0x94>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	e003      	b.n	8003810 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003810:	e02f      	b.n	8003872 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	0013      	movs	r3, r2
 800381c:	2200      	movs	r2, #0
 800381e:	2180      	movs	r1, #128	@ 0x80
 8003820:	f000 ff40 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d004      	beq.n	8003832 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e03b      	b.n	80038aa <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	001a      	movs	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	05d2      	lsls	r2, r2, #23
 8003844:	0dd2      	lsrs	r2, r2, #23
 8003846:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	3302      	adds	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e007      	b.n	8003860 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3301      	adds	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2252      	movs	r2, #82	@ 0x52
 8003864:	5a9b      	ldrh	r3, [r3, r2]
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b299      	uxth	r1, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2252      	movs	r2, #82	@ 0x52
 8003870:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2252      	movs	r2, #82	@ 0x52
 8003876:	5a9b      	ldrh	r3, [r3, r2]
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1c9      	bne.n	8003812 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	0013      	movs	r3, r2
 8003888:	2200      	movs	r2, #0
 800388a:	2140      	movs	r1, #64	@ 0x40
 800388c:	f000 ff0a 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d004      	beq.n	800389e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e005      	b.n	80038aa <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b008      	add	sp, #32
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b0ab      	sub	sp, #172	@ 0xac
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	22a4      	movs	r2, #164	@ 0xa4
 80038c4:	18b9      	adds	r1, r7, r2
 80038c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	20a0      	movs	r0, #160	@ 0xa0
 80038d0:	1839      	adds	r1, r7, r0
 80038d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	219c      	movs	r1, #156	@ 0x9c
 80038dc:	1879      	adds	r1, r7, r1
 80038de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038e0:	0011      	movs	r1, r2
 80038e2:	18bb      	adds	r3, r7, r2
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a99      	ldr	r2, [pc, #612]	@ (8003b4c <HAL_UART_IRQHandler+0x298>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	2298      	movs	r2, #152	@ 0x98
 80038ec:	18bc      	adds	r4, r7, r2
 80038ee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80038f0:	18bb      	adds	r3, r7, r2
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d114      	bne.n	8003922 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2220      	movs	r2, #32
 80038fe:	4013      	ands	r3, r2
 8003900:	d00f      	beq.n	8003922 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003902:	183b      	adds	r3, r7, r0
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2220      	movs	r2, #32
 8003908:	4013      	ands	r3, r2
 800390a:	d00a      	beq.n	8003922 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003910:	2b00      	cmp	r3, #0
 8003912:	d100      	bne.n	8003916 <HAL_UART_IRQHandler+0x62>
 8003914:	e2a0      	b.n	8003e58 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	0010      	movs	r0, r2
 800391e:	4798      	blx	r3
      }
      return;
 8003920:	e29a      	b.n	8003e58 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003922:	2398      	movs	r3, #152	@ 0x98
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d100      	bne.n	800392e <HAL_UART_IRQHandler+0x7a>
 800392c:	e114      	b.n	8003b58 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800392e:	239c      	movs	r3, #156	@ 0x9c
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2201      	movs	r2, #1
 8003936:	4013      	ands	r3, r2
 8003938:	d106      	bne.n	8003948 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800393a:	23a0      	movs	r3, #160	@ 0xa0
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a83      	ldr	r2, [pc, #524]	@ (8003b50 <HAL_UART_IRQHandler+0x29c>)
 8003942:	4013      	ands	r3, r2
 8003944:	d100      	bne.n	8003948 <HAL_UART_IRQHandler+0x94>
 8003946:	e107      	b.n	8003b58 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003948:	23a4      	movs	r3, #164	@ 0xa4
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	4013      	ands	r3, r2
 8003952:	d012      	beq.n	800397a <HAL_UART_IRQHandler+0xc6>
 8003954:	23a0      	movs	r3, #160	@ 0xa0
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4013      	ands	r3, r2
 8003960:	d00b      	beq.n	800397a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2284      	movs	r2, #132	@ 0x84
 800396e:	589b      	ldr	r3, [r3, r2]
 8003970:	2201      	movs	r2, #1
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2184      	movs	r1, #132	@ 0x84
 8003978:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800397a:	23a4      	movs	r3, #164	@ 0xa4
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2202      	movs	r2, #2
 8003982:	4013      	ands	r3, r2
 8003984:	d011      	beq.n	80039aa <HAL_UART_IRQHandler+0xf6>
 8003986:	239c      	movs	r3, #156	@ 0x9c
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2201      	movs	r2, #1
 800398e:	4013      	ands	r3, r2
 8003990:	d00b      	beq.n	80039aa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2202      	movs	r2, #2
 8003998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2284      	movs	r2, #132	@ 0x84
 800399e:	589b      	ldr	r3, [r3, r2]
 80039a0:	2204      	movs	r2, #4
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2184      	movs	r1, #132	@ 0x84
 80039a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039aa:	23a4      	movs	r3, #164	@ 0xa4
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2204      	movs	r2, #4
 80039b2:	4013      	ands	r3, r2
 80039b4:	d011      	beq.n	80039da <HAL_UART_IRQHandler+0x126>
 80039b6:	239c      	movs	r3, #156	@ 0x9c
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2201      	movs	r2, #1
 80039be:	4013      	ands	r3, r2
 80039c0:	d00b      	beq.n	80039da <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2204      	movs	r2, #4
 80039c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2284      	movs	r2, #132	@ 0x84
 80039ce:	589b      	ldr	r3, [r3, r2]
 80039d0:	2202      	movs	r2, #2
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2184      	movs	r1, #132	@ 0x84
 80039d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039da:	23a4      	movs	r3, #164	@ 0xa4
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2208      	movs	r2, #8
 80039e2:	4013      	ands	r3, r2
 80039e4:	d017      	beq.n	8003a16 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039e6:	23a0      	movs	r3, #160	@ 0xa0
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2220      	movs	r2, #32
 80039ee:	4013      	ands	r3, r2
 80039f0:	d105      	bne.n	80039fe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039f2:	239c      	movs	r3, #156	@ 0x9c
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2201      	movs	r2, #1
 80039fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039fc:	d00b      	beq.n	8003a16 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2208      	movs	r2, #8
 8003a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2284      	movs	r2, #132	@ 0x84
 8003a0a:	589b      	ldr	r3, [r3, r2]
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2184      	movs	r1, #132	@ 0x84
 8003a14:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a16:	23a4      	movs	r3, #164	@ 0xa4
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2380      	movs	r3, #128	@ 0x80
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	4013      	ands	r3, r2
 8003a22:	d013      	beq.n	8003a4c <HAL_UART_IRQHandler+0x198>
 8003a24:	23a0      	movs	r3, #160	@ 0xa0
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	2380      	movs	r3, #128	@ 0x80
 8003a2c:	04db      	lsls	r3, r3, #19
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d00c      	beq.n	8003a4c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2280      	movs	r2, #128	@ 0x80
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2284      	movs	r2, #132	@ 0x84
 8003a40:	589b      	ldr	r3, [r3, r2]
 8003a42:	2220      	movs	r2, #32
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2184      	movs	r1, #132	@ 0x84
 8003a4a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2284      	movs	r2, #132	@ 0x84
 8003a50:	589b      	ldr	r3, [r3, r2]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d100      	bne.n	8003a58 <HAL_UART_IRQHandler+0x1a4>
 8003a56:	e201      	b.n	8003e5c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a58:	23a4      	movs	r3, #164	@ 0xa4
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	4013      	ands	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a64:	23a0      	movs	r3, #160	@ 0xa0
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d008      	beq.n	8003a82 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d004      	beq.n	8003a82 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	0010      	movs	r0, r2
 8003a80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2284      	movs	r2, #132	@ 0x84
 8003a86:	589b      	ldr	r3, [r3, r2]
 8003a88:	2194      	movs	r1, #148	@ 0x94
 8003a8a:	187a      	adds	r2, r7, r1
 8003a8c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2240      	movs	r2, #64	@ 0x40
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b40      	cmp	r3, #64	@ 0x40
 8003a9a:	d004      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2228      	movs	r2, #40	@ 0x28
 8003aa2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aa4:	d047      	beq.n	8003b36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 fe65 	bl	8004778 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2240      	movs	r2, #64	@ 0x40
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d137      	bne.n	8003b2c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003abc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac4:	2090      	movs	r0, #144	@ 0x90
 8003ac6:	183a      	adds	r2, r7, r0
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	2301      	movs	r3, #1
 8003acc:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ace:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ad0:	f383 8810 	msr	PRIMASK, r3
}
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2140      	movs	r1, #64	@ 0x40
 8003ae2:	438a      	bics	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	183b      	adds	r3, r7, r0
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d012      	beq.n	8003b22 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b00:	4a14      	ldr	r2, [pc, #80]	@ (8003b54 <HAL_UART_IRQHandler+0x2a0>)
 8003b02:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7fd fd7d 	bl	8001608 <HAL_DMA_Abort_IT>
 8003b0e:	1e03      	subs	r3, r0, #0
 8003b10:	d01a      	beq.n	8003b48 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	e012      	b.n	8003b48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 f9af 	bl	8003e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2a:	e00d      	b.n	8003b48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 f9aa 	bl	8003e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	e008      	b.n	8003b48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 f9a5 	bl	8003e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2284      	movs	r2, #132	@ 0x84
 8003b42:	2100      	movs	r1, #0
 8003b44:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b46:	e189      	b.n	8003e5c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	46c0      	nop			@ (mov r8, r8)
    return;
 8003b4a:	e187      	b.n	8003e5c <HAL_UART_IRQHandler+0x5a8>
 8003b4c:	0000080f 	.word	0x0000080f
 8003b50:	04000120 	.word	0x04000120
 8003b54:	08004841 	.word	0x08004841

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d000      	beq.n	8003b62 <HAL_UART_IRQHandler+0x2ae>
 8003b60:	e13b      	b.n	8003dda <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b62:	23a4      	movs	r3, #164	@ 0xa4
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2210      	movs	r2, #16
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d100      	bne.n	8003b70 <HAL_UART_IRQHandler+0x2bc>
 8003b6e:	e134      	b.n	8003dda <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b70:	23a0      	movs	r3, #160	@ 0xa0
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2210      	movs	r2, #16
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d100      	bne.n	8003b7e <HAL_UART_IRQHandler+0x2ca>
 8003b7c:	e12d      	b.n	8003dda <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2210      	movs	r2, #16
 8003b84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2240      	movs	r2, #64	@ 0x40
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b40      	cmp	r3, #64	@ 0x40
 8003b92:	d000      	beq.n	8003b96 <HAL_UART_IRQHandler+0x2e2>
 8003b94:	e0a1      	b.n	8003cda <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	217e      	movs	r1, #126	@ 0x7e
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d100      	bne.n	8003bae <HAL_UART_IRQHandler+0x2fa>
 8003bac:	e158      	b.n	8003e60 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2258      	movs	r2, #88	@ 0x58
 8003bb2:	5a9b      	ldrh	r3, [r3, r2]
 8003bb4:	187a      	adds	r2, r7, r1
 8003bb6:	8812      	ldrh	r2, [r2, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d300      	bcc.n	8003bbe <HAL_UART_IRQHandler+0x30a>
 8003bbc:	e150      	b.n	8003e60 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	187a      	adds	r2, r7, r1
 8003bc2:	215a      	movs	r1, #90	@ 0x5a
 8003bc4:	8812      	ldrh	r2, [r2, #0]
 8003bc6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d16f      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bda:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bde:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003be0:	2301      	movs	r3, #1
 8003be2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be6:	f383 8810 	msr	PRIMASK, r3
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	499e      	ldr	r1, [pc, #632]	@ (8003e70 <HAL_UART_IRQHandler+0x5bc>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c02:	f383 8810 	msr	PRIMASK, r3
}
 8003c06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c08:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c10:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c12:	2301      	movs	r3, #1
 8003c14:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c18:	f383 8810 	msr	PRIMASK, r3
}
 8003c1c:	46c0      	nop			@ (mov r8, r8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c30:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c42:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c44:	2301      	movs	r3, #1
 8003c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c4a:	f383 8810 	msr	PRIMASK, r3
}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2140      	movs	r1, #64	@ 0x40
 8003c5c:	438a      	bics	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c62:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2280      	movs	r2, #128	@ 0x80
 8003c70:	2120      	movs	r1, #32
 8003c72:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c84:	2301      	movs	r3, #1
 8003c86:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c8a:	f383 8810 	msr	PRIMASK, r3
}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2110      	movs	r1, #16
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7fd fc69 	bl	8001588 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2258      	movs	r2, #88	@ 0x58
 8003cc0:	5a9a      	ldrh	r2, [r3, r2]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	215a      	movs	r1, #90	@ 0x5a
 8003cc6:	5a5b      	ldrh	r3, [r3, r1]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0011      	movs	r1, r2
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f000 f8e0 	bl	8003e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cd8:	e0c2      	b.n	8003e60 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2258      	movs	r2, #88	@ 0x58
 8003cde:	5a99      	ldrh	r1, [r3, r2]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	225a      	movs	r2, #90	@ 0x5a
 8003ce4:	5a9b      	ldrh	r3, [r3, r2]
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	208e      	movs	r0, #142	@ 0x8e
 8003cea:	183b      	adds	r3, r7, r0
 8003cec:	1a8a      	subs	r2, r1, r2
 8003cee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	225a      	movs	r2, #90	@ 0x5a
 8003cf4:	5a9b      	ldrh	r3, [r3, r2]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d100      	bne.n	8003cfe <HAL_UART_IRQHandler+0x44a>
 8003cfc:	e0b2      	b.n	8003e64 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003cfe:	183b      	adds	r3, r7, r0
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d100      	bne.n	8003d08 <HAL_UART_IRQHandler+0x454>
 8003d06:	e0ad      	b.n	8003e64 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d08:	f3ef 8310 	mrs	r3, PRIMASK
 8003d0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d10:	2488      	movs	r4, #136	@ 0x88
 8003d12:	193a      	adds	r2, r7, r4
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	2301      	movs	r3, #1
 8003d18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f383 8810 	msr	PRIMASK, r3
}
 8003d20:	46c0      	nop			@ (mov r8, r8)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4951      	ldr	r1, [pc, #324]	@ (8003e74 <HAL_UART_IRQHandler+0x5c0>)
 8003d2e:	400a      	ands	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	193b      	adds	r3, r7, r4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f383 8810 	msr	PRIMASK, r3
}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d40:	f3ef 8310 	mrs	r3, PRIMASK
 8003d44:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d46:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d48:	2484      	movs	r4, #132	@ 0x84
 8003d4a:	193a      	adds	r2, r7, r4
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f383 8810 	msr	PRIMASK, r3
}
 8003d58:	46c0      	nop			@ (mov r8, r8)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2101      	movs	r1, #1
 8003d66:	438a      	bics	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2280      	movs	r2, #128	@ 0x80
 8003d7c:	2120      	movs	r1, #32
 8003d7e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d94:	2480      	movs	r4, #128	@ 0x80
 8003d96:	193a      	adds	r2, r7, r4
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da0:	f383 8810 	msr	PRIMASK, r3
}
 8003da4:	46c0      	nop			@ (mov r8, r8)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2110      	movs	r1, #16
 8003db2:	438a      	bics	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	193b      	adds	r3, r7, r4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	f383 8810 	msr	PRIMASK, r3
}
 8003dc2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dca:	183b      	adds	r3, r7, r0
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	0011      	movs	r1, r2
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f000 f860 	bl	8003e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dd8:	e044      	b.n	8003e64 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dda:	23a4      	movs	r3, #164	@ 0xa4
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	035b      	lsls	r3, r3, #13
 8003de4:	4013      	ands	r3, r2
 8003de6:	d010      	beq.n	8003e0a <HAL_UART_IRQHandler+0x556>
 8003de8:	239c      	movs	r3, #156	@ 0x9c
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	03db      	lsls	r3, r3, #15
 8003df2:	4013      	ands	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2280      	movs	r2, #128	@ 0x80
 8003dfc:	0352      	lsls	r2, r2, #13
 8003dfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 fd5e 	bl	80048c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e08:	e02f      	b.n	8003e6a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e0a:	23a4      	movs	r3, #164	@ 0xa4
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2280      	movs	r2, #128	@ 0x80
 8003e12:	4013      	ands	r3, r2
 8003e14:	d00f      	beq.n	8003e36 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e16:	23a0      	movs	r3, #160	@ 0xa0
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2280      	movs	r2, #128	@ 0x80
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01e      	beq.n	8003e68 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	0010      	movs	r0, r2
 8003e32:	4798      	blx	r3
    }
    return;
 8003e34:	e018      	b.n	8003e68 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e36:	23a4      	movs	r3, #164	@ 0xa4
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2240      	movs	r2, #64	@ 0x40
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d013      	beq.n	8003e6a <HAL_UART_IRQHandler+0x5b6>
 8003e42:	23a0      	movs	r3, #160	@ 0xa0
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2240      	movs	r2, #64	@ 0x40
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d00d      	beq.n	8003e6a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f000 fd0c 	bl	800486e <UART_EndTransmit_IT>
    return;
 8003e56:	e008      	b.n	8003e6a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	e006      	b.n	8003e6a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003e5c:	46c0      	nop			@ (mov r8, r8)
 8003e5e:	e004      	b.n	8003e6a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003e60:	46c0      	nop			@ (mov r8, r8)
 8003e62:	e002      	b.n	8003e6a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	e000      	b.n	8003e6a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003e68:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b02b      	add	sp, #172	@ 0xac
 8003e6e:	bd90      	pop	{r4, r7, pc}
 8003e70:	fffffeff 	.word	0xfffffeff
 8003e74:	fffffedf 	.word	0xfffffedf

08003e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b002      	add	sp, #8
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e90:	46c0      	nop			@ (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	000a      	movs	r2, r1
 8003ea2:	1cbb      	adds	r3, r7, #2
 8003ea4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b002      	add	sp, #8
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb0:	b5b0      	push	{r4, r5, r7, lr}
 8003eb2:	b08e      	sub	sp, #56	@ 0x38
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb8:	231a      	movs	r3, #26
 8003eba:	2218      	movs	r2, #24
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	19db      	adds	r3, r3, r7
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4ac3      	ldr	r2, [pc, #780]	@ (80041f0 <UART_SetConfig+0x340>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4abe      	ldr	r2, [pc, #760]	@ (80041f4 <UART_SetConfig+0x344>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4ab8      	ldr	r2, [pc, #736]	@ (80041f8 <UART_SetConfig+0x348>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f20:	4313      	orrs	r3, r2
 8003f22:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	4ab4      	ldr	r2, [pc, #720]	@ (80041fc <UART_SetConfig+0x34c>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	0019      	movs	r1, r3
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4ab0      	ldr	r2, [pc, #704]	@ (8004200 <UART_SetConfig+0x350>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d131      	bne.n	8003fa8 <UART_SetConfig+0xf8>
 8003f44:	4baf      	ldr	r3, [pc, #700]	@ (8004204 <UART_SetConfig+0x354>)
 8003f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f48:	2203      	movs	r2, #3
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d01d      	beq.n	8003f8c <UART_SetConfig+0xdc>
 8003f50:	d823      	bhi.n	8003f9a <UART_SetConfig+0xea>
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d00c      	beq.n	8003f70 <UART_SetConfig+0xc0>
 8003f56:	d820      	bhi.n	8003f9a <UART_SetConfig+0xea>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <UART_SetConfig+0xb2>
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d00e      	beq.n	8003f7e <UART_SetConfig+0xce>
 8003f60:	e01b      	b.n	8003f9a <UART_SetConfig+0xea>
 8003f62:	231b      	movs	r3, #27
 8003f64:	2218      	movs	r2, #24
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	19db      	adds	r3, r3, r7
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e0b4      	b.n	80040da <UART_SetConfig+0x22a>
 8003f70:	231b      	movs	r3, #27
 8003f72:	2218      	movs	r2, #24
 8003f74:	189b      	adds	r3, r3, r2
 8003f76:	19db      	adds	r3, r3, r7
 8003f78:	2202      	movs	r2, #2
 8003f7a:	701a      	strb	r2, [r3, #0]
 8003f7c:	e0ad      	b.n	80040da <UART_SetConfig+0x22a>
 8003f7e:	231b      	movs	r3, #27
 8003f80:	2218      	movs	r2, #24
 8003f82:	189b      	adds	r3, r3, r2
 8003f84:	19db      	adds	r3, r3, r7
 8003f86:	2204      	movs	r2, #4
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e0a6      	b.n	80040da <UART_SetConfig+0x22a>
 8003f8c:	231b      	movs	r3, #27
 8003f8e:	2218      	movs	r2, #24
 8003f90:	189b      	adds	r3, r3, r2
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	2208      	movs	r2, #8
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e09f      	b.n	80040da <UART_SetConfig+0x22a>
 8003f9a:	231b      	movs	r3, #27
 8003f9c:	2218      	movs	r2, #24
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	19db      	adds	r3, r3, r7
 8003fa2:	2210      	movs	r2, #16
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e098      	b.n	80040da <UART_SetConfig+0x22a>
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a96      	ldr	r2, [pc, #600]	@ (8004208 <UART_SetConfig+0x358>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d131      	bne.n	8004016 <UART_SetConfig+0x166>
 8003fb2:	4b94      	ldr	r3, [pc, #592]	@ (8004204 <UART_SetConfig+0x354>)
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb6:	220c      	movs	r2, #12
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b0c      	cmp	r3, #12
 8003fbc:	d01d      	beq.n	8003ffa <UART_SetConfig+0x14a>
 8003fbe:	d823      	bhi.n	8004008 <UART_SetConfig+0x158>
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d00c      	beq.n	8003fde <UART_SetConfig+0x12e>
 8003fc4:	d820      	bhi.n	8004008 <UART_SetConfig+0x158>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <UART_SetConfig+0x120>
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d00e      	beq.n	8003fec <UART_SetConfig+0x13c>
 8003fce:	e01b      	b.n	8004008 <UART_SetConfig+0x158>
 8003fd0:	231b      	movs	r3, #27
 8003fd2:	2218      	movs	r2, #24
 8003fd4:	189b      	adds	r3, r3, r2
 8003fd6:	19db      	adds	r3, r3, r7
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e07d      	b.n	80040da <UART_SetConfig+0x22a>
 8003fde:	231b      	movs	r3, #27
 8003fe0:	2218      	movs	r2, #24
 8003fe2:	189b      	adds	r3, r3, r2
 8003fe4:	19db      	adds	r3, r3, r7
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e076      	b.n	80040da <UART_SetConfig+0x22a>
 8003fec:	231b      	movs	r3, #27
 8003fee:	2218      	movs	r2, #24
 8003ff0:	189b      	adds	r3, r3, r2
 8003ff2:	19db      	adds	r3, r3, r7
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	e06f      	b.n	80040da <UART_SetConfig+0x22a>
 8003ffa:	231b      	movs	r3, #27
 8003ffc:	2218      	movs	r2, #24
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	19db      	adds	r3, r3, r7
 8004002:	2208      	movs	r2, #8
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	e068      	b.n	80040da <UART_SetConfig+0x22a>
 8004008:	231b      	movs	r3, #27
 800400a:	2218      	movs	r2, #24
 800400c:	189b      	adds	r3, r3, r2
 800400e:	19db      	adds	r3, r3, r7
 8004010:	2210      	movs	r2, #16
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e061      	b.n	80040da <UART_SetConfig+0x22a>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7c      	ldr	r2, [pc, #496]	@ (800420c <UART_SetConfig+0x35c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d106      	bne.n	800402e <UART_SetConfig+0x17e>
 8004020:	231b      	movs	r3, #27
 8004022:	2218      	movs	r2, #24
 8004024:	189b      	adds	r3, r3, r2
 8004026:	19db      	adds	r3, r3, r7
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e055      	b.n	80040da <UART_SetConfig+0x22a>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a77      	ldr	r2, [pc, #476]	@ (8004210 <UART_SetConfig+0x360>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d106      	bne.n	8004046 <UART_SetConfig+0x196>
 8004038:	231b      	movs	r3, #27
 800403a:	2218      	movs	r2, #24
 800403c:	189b      	adds	r3, r3, r2
 800403e:	19db      	adds	r3, r3, r7
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	e049      	b.n	80040da <UART_SetConfig+0x22a>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a6b      	ldr	r2, [pc, #428]	@ (80041f8 <UART_SetConfig+0x348>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d13e      	bne.n	80040ce <UART_SetConfig+0x21e>
 8004050:	4b6c      	ldr	r3, [pc, #432]	@ (8004204 <UART_SetConfig+0x354>)
 8004052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004054:	23c0      	movs	r3, #192	@ 0xc0
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	4013      	ands	r3, r2
 800405a:	22c0      	movs	r2, #192	@ 0xc0
 800405c:	0112      	lsls	r2, r2, #4
 800405e:	4293      	cmp	r3, r2
 8004060:	d027      	beq.n	80040b2 <UART_SetConfig+0x202>
 8004062:	22c0      	movs	r2, #192	@ 0xc0
 8004064:	0112      	lsls	r2, r2, #4
 8004066:	4293      	cmp	r3, r2
 8004068:	d82a      	bhi.n	80040c0 <UART_SetConfig+0x210>
 800406a:	2280      	movs	r2, #128	@ 0x80
 800406c:	0112      	lsls	r2, r2, #4
 800406e:	4293      	cmp	r3, r2
 8004070:	d011      	beq.n	8004096 <UART_SetConfig+0x1e6>
 8004072:	2280      	movs	r2, #128	@ 0x80
 8004074:	0112      	lsls	r2, r2, #4
 8004076:	4293      	cmp	r3, r2
 8004078:	d822      	bhi.n	80040c0 <UART_SetConfig+0x210>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <UART_SetConfig+0x1d8>
 800407e:	2280      	movs	r2, #128	@ 0x80
 8004080:	00d2      	lsls	r2, r2, #3
 8004082:	4293      	cmp	r3, r2
 8004084:	d00e      	beq.n	80040a4 <UART_SetConfig+0x1f4>
 8004086:	e01b      	b.n	80040c0 <UART_SetConfig+0x210>
 8004088:	231b      	movs	r3, #27
 800408a:	2218      	movs	r2, #24
 800408c:	189b      	adds	r3, r3, r2
 800408e:	19db      	adds	r3, r3, r7
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e021      	b.n	80040da <UART_SetConfig+0x22a>
 8004096:	231b      	movs	r3, #27
 8004098:	2218      	movs	r2, #24
 800409a:	189b      	adds	r3, r3, r2
 800409c:	19db      	adds	r3, r3, r7
 800409e:	2202      	movs	r2, #2
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e01a      	b.n	80040da <UART_SetConfig+0x22a>
 80040a4:	231b      	movs	r3, #27
 80040a6:	2218      	movs	r2, #24
 80040a8:	189b      	adds	r3, r3, r2
 80040aa:	19db      	adds	r3, r3, r7
 80040ac:	2204      	movs	r2, #4
 80040ae:	701a      	strb	r2, [r3, #0]
 80040b0:	e013      	b.n	80040da <UART_SetConfig+0x22a>
 80040b2:	231b      	movs	r3, #27
 80040b4:	2218      	movs	r2, #24
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	19db      	adds	r3, r3, r7
 80040ba:	2208      	movs	r2, #8
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e00c      	b.n	80040da <UART_SetConfig+0x22a>
 80040c0:	231b      	movs	r3, #27
 80040c2:	2218      	movs	r2, #24
 80040c4:	189b      	adds	r3, r3, r2
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	2210      	movs	r2, #16
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e005      	b.n	80040da <UART_SetConfig+0x22a>
 80040ce:	231b      	movs	r3, #27
 80040d0:	2218      	movs	r2, #24
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	19db      	adds	r3, r3, r7
 80040d6:	2210      	movs	r2, #16
 80040d8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a46      	ldr	r2, [pc, #280]	@ (80041f8 <UART_SetConfig+0x348>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d000      	beq.n	80040e6 <UART_SetConfig+0x236>
 80040e4:	e09a      	b.n	800421c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040e6:	231b      	movs	r3, #27
 80040e8:	2218      	movs	r2, #24
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	19db      	adds	r3, r3, r7
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d01d      	beq.n	8004130 <UART_SetConfig+0x280>
 80040f4:	dc20      	bgt.n	8004138 <UART_SetConfig+0x288>
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d015      	beq.n	8004126 <UART_SetConfig+0x276>
 80040fa:	dc1d      	bgt.n	8004138 <UART_SetConfig+0x288>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <UART_SetConfig+0x256>
 8004100:	2b02      	cmp	r3, #2
 8004102:	d005      	beq.n	8004110 <UART_SetConfig+0x260>
 8004104:	e018      	b.n	8004138 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004106:	f7fe fa67 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 800410a:	0003      	movs	r3, r0
 800410c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800410e:	e01c      	b.n	800414a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004110:	4b3c      	ldr	r3, [pc, #240]	@ (8004204 <UART_SetConfig+0x354>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2210      	movs	r2, #16
 8004116:	4013      	ands	r3, r2
 8004118:	d002      	beq.n	8004120 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800411a:	4b3e      	ldr	r3, [pc, #248]	@ (8004214 <UART_SetConfig+0x364>)
 800411c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800411e:	e014      	b.n	800414a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004120:	4b3d      	ldr	r3, [pc, #244]	@ (8004218 <UART_SetConfig+0x368>)
 8004122:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004124:	e011      	b.n	800414a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe f9a7 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 800412a:	0003      	movs	r3, r0
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800412e:	e00c      	b.n	800414a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004130:	2380      	movs	r3, #128	@ 0x80
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004136:	e008      	b.n	800414a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800413c:	231a      	movs	r3, #26
 800413e:	2218      	movs	r2, #24
 8004140:	189b      	adds	r3, r3, r2
 8004142:	19db      	adds	r3, r3, r7
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
        break;
 8004148:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800414a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d100      	bne.n	8004152 <UART_SetConfig+0x2a2>
 8004150:	e133      	b.n	80043ba <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	0013      	movs	r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	189b      	adds	r3, r3, r2
 800415c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800415e:	429a      	cmp	r2, r3
 8004160:	d305      	bcc.n	800416e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004168:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800416a:	429a      	cmp	r2, r3
 800416c:	d906      	bls.n	800417c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800416e:	231a      	movs	r3, #26
 8004170:	2218      	movs	r2, #24
 8004172:	189b      	adds	r3, r3, r2
 8004174:	19db      	adds	r3, r3, r7
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	e11e      	b.n	80043ba <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800417c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	6939      	ldr	r1, [r7, #16]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	000b      	movs	r3, r1
 800418a:	0e1b      	lsrs	r3, r3, #24
 800418c:	0010      	movs	r0, r2
 800418e:	0205      	lsls	r5, r0, #8
 8004190:	431d      	orrs	r5, r3
 8004192:	000b      	movs	r3, r1
 8004194:	021c      	lsls	r4, r3, #8
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68b8      	ldr	r0, [r7, #8]
 80041a4:	68f9      	ldr	r1, [r7, #12]
 80041a6:	1900      	adds	r0, r0, r4
 80041a8:	4169      	adcs	r1, r5
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	2300      	movs	r3, #0
 80041b2:	607b      	str	r3, [r7, #4]
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f7fc f926 	bl	8000408 <__aeabi_uldivmod>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	0013      	movs	r3, r2
 80041c2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041c6:	23c0      	movs	r3, #192	@ 0xc0
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d309      	bcc.n	80041e2 <UART_SetConfig+0x332>
 80041ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041d0:	2380      	movs	r3, #128	@ 0x80
 80041d2:	035b      	lsls	r3, r3, #13
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d204      	bcs.n	80041e2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041de:	60da      	str	r2, [r3, #12]
 80041e0:	e0eb      	b.n	80043ba <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80041e2:	231a      	movs	r3, #26
 80041e4:	2218      	movs	r2, #24
 80041e6:	189b      	adds	r3, r3, r2
 80041e8:	19db      	adds	r3, r3, r7
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e0e4      	b.n	80043ba <UART_SetConfig+0x50a>
 80041f0:	efff69f3 	.word	0xefff69f3
 80041f4:	ffffcfff 	.word	0xffffcfff
 80041f8:	40004800 	.word	0x40004800
 80041fc:	fffff4ff 	.word	0xfffff4ff
 8004200:	40013800 	.word	0x40013800
 8004204:	40021000 	.word	0x40021000
 8004208:	40004400 	.word	0x40004400
 800420c:	40004c00 	.word	0x40004c00
 8004210:	40005000 	.word	0x40005000
 8004214:	003d0900 	.word	0x003d0900
 8004218:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	2380      	movs	r3, #128	@ 0x80
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	429a      	cmp	r2, r3
 8004226:	d000      	beq.n	800422a <UART_SetConfig+0x37a>
 8004228:	e070      	b.n	800430c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800422a:	231b      	movs	r3, #27
 800422c:	2218      	movs	r2, #24
 800422e:	189b      	adds	r3, r3, r2
 8004230:	19db      	adds	r3, r3, r7
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b08      	cmp	r3, #8
 8004236:	d822      	bhi.n	800427e <UART_SetConfig+0x3ce>
 8004238:	009a      	lsls	r2, r3, #2
 800423a:	4b67      	ldr	r3, [pc, #412]	@ (80043d8 <UART_SetConfig+0x528>)
 800423c:	18d3      	adds	r3, r2, r3
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004242:	f7fe f9c9 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8004246:	0003      	movs	r3, r0
 8004248:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800424a:	e021      	b.n	8004290 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7fe f9da 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 8004250:	0003      	movs	r3, r0
 8004252:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004254:	e01c      	b.n	8004290 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004256:	4b61      	ldr	r3, [pc, #388]	@ (80043dc <UART_SetConfig+0x52c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2210      	movs	r2, #16
 800425c:	4013      	ands	r3, r2
 800425e:	d002      	beq.n	8004266 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004260:	4b5f      	ldr	r3, [pc, #380]	@ (80043e0 <UART_SetConfig+0x530>)
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004264:	e014      	b.n	8004290 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004266:	4b5f      	ldr	r3, [pc, #380]	@ (80043e4 <UART_SetConfig+0x534>)
 8004268:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800426a:	e011      	b.n	8004290 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426c:	f7fe f904 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8004270:	0003      	movs	r3, r0
 8004272:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004274:	e00c      	b.n	8004290 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800427c:	e008      	b.n	8004290 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004282:	231a      	movs	r3, #26
 8004284:	2218      	movs	r2, #24
 8004286:	189b      	adds	r3, r3, r2
 8004288:	19db      	adds	r3, r3, r7
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
        break;
 800428e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004292:	2b00      	cmp	r3, #0
 8004294:	d100      	bne.n	8004298 <UART_SetConfig+0x3e8>
 8004296:	e090      	b.n	80043ba <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429a:	005a      	lsls	r2, r3, #1
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	18d2      	adds	r2, r2, r3
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	0019      	movs	r1, r3
 80042aa:	0010      	movs	r0, r2
 80042ac:	f7fb ff36 	bl	800011c <__udivsi3>
 80042b0:	0003      	movs	r3, r0
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b6:	2b0f      	cmp	r3, #15
 80042b8:	d921      	bls.n	80042fe <UART_SetConfig+0x44e>
 80042ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042bc:	2380      	movs	r3, #128	@ 0x80
 80042be:	025b      	lsls	r3, r3, #9
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d21c      	bcs.n	80042fe <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	200e      	movs	r0, #14
 80042ca:	2418      	movs	r4, #24
 80042cc:	1903      	adds	r3, r0, r4
 80042ce:	19db      	adds	r3, r3, r7
 80042d0:	210f      	movs	r1, #15
 80042d2:	438a      	bics	r2, r1
 80042d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d8:	085b      	lsrs	r3, r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2207      	movs	r2, #7
 80042de:	4013      	ands	r3, r2
 80042e0:	b299      	uxth	r1, r3
 80042e2:	1903      	adds	r3, r0, r4
 80042e4:	19db      	adds	r3, r3, r7
 80042e6:	1902      	adds	r2, r0, r4
 80042e8:	19d2      	adds	r2, r2, r7
 80042ea:	8812      	ldrh	r2, [r2, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	1902      	adds	r2, r0, r4
 80042f6:	19d2      	adds	r2, r2, r7
 80042f8:	8812      	ldrh	r2, [r2, #0]
 80042fa:	60da      	str	r2, [r3, #12]
 80042fc:	e05d      	b.n	80043ba <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80042fe:	231a      	movs	r3, #26
 8004300:	2218      	movs	r2, #24
 8004302:	189b      	adds	r3, r3, r2
 8004304:	19db      	adds	r3, r3, r7
 8004306:	2201      	movs	r2, #1
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	e056      	b.n	80043ba <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800430c:	231b      	movs	r3, #27
 800430e:	2218      	movs	r2, #24
 8004310:	189b      	adds	r3, r3, r2
 8004312:	19db      	adds	r3, r3, r7
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b08      	cmp	r3, #8
 8004318:	d822      	bhi.n	8004360 <UART_SetConfig+0x4b0>
 800431a:	009a      	lsls	r2, r3, #2
 800431c:	4b32      	ldr	r3, [pc, #200]	@ (80043e8 <UART_SetConfig+0x538>)
 800431e:	18d3      	adds	r3, r2, r3
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004324:	f7fe f958 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8004328:	0003      	movs	r3, r0
 800432a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800432c:	e021      	b.n	8004372 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800432e:	f7fe f969 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 8004332:	0003      	movs	r3, r0
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004336:	e01c      	b.n	8004372 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004338:	4b28      	ldr	r3, [pc, #160]	@ (80043dc <UART_SetConfig+0x52c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2210      	movs	r2, #16
 800433e:	4013      	ands	r3, r2
 8004340:	d002      	beq.n	8004348 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004342:	4b27      	ldr	r3, [pc, #156]	@ (80043e0 <UART_SetConfig+0x530>)
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004346:	e014      	b.n	8004372 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004348:	4b26      	ldr	r3, [pc, #152]	@ (80043e4 <UART_SetConfig+0x534>)
 800434a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800434c:	e011      	b.n	8004372 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434e:	f7fe f893 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8004352:	0003      	movs	r3, r0
 8004354:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004356:	e00c      	b.n	8004372 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004358:	2380      	movs	r3, #128	@ 0x80
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800435e:	e008      	b.n	8004372 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004364:	231a      	movs	r3, #26
 8004366:	2218      	movs	r2, #24
 8004368:	189b      	adds	r3, r3, r2
 800436a:	19db      	adds	r3, r3, r7
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
        break;
 8004370:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	085a      	lsrs	r2, r3, #1
 800437e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004380:	18d2      	adds	r2, r2, r3
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	0019      	movs	r1, r3
 8004388:	0010      	movs	r0, r2
 800438a:	f7fb fec7 	bl	800011c <__udivsi3>
 800438e:	0003      	movs	r3, r0
 8004390:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004394:	2b0f      	cmp	r3, #15
 8004396:	d90a      	bls.n	80043ae <UART_SetConfig+0x4fe>
 8004398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800439a:	2380      	movs	r3, #128	@ 0x80
 800439c:	025b      	lsls	r3, r3, #9
 800439e:	429a      	cmp	r2, r3
 80043a0:	d205      	bcs.n	80043ae <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	e005      	b.n	80043ba <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80043ae:	231a      	movs	r3, #26
 80043b0:	2218      	movs	r2, #24
 80043b2:	189b      	adds	r3, r3, r2
 80043b4:	19db      	adds	r3, r3, r7
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2200      	movs	r2, #0
 80043be:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2200      	movs	r2, #0
 80043c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80043c6:	231a      	movs	r3, #26
 80043c8:	2218      	movs	r2, #24
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	19db      	adds	r3, r3, r7
 80043ce:	781b      	ldrb	r3, [r3, #0]
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b00e      	add	sp, #56	@ 0x38
 80043d6:	bdb0      	pop	{r4, r5, r7, pc}
 80043d8:	08005804 	.word	0x08005804
 80043dc:	40021000 	.word	0x40021000
 80043e0:	003d0900 	.word	0x003d0900
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	08005828 	.word	0x08005828

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	2201      	movs	r2, #1
 80043fa:	4013      	ands	r3, r2
 80043fc:	d00b      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4a4a      	ldr	r2, [pc, #296]	@ (8004530 <UART_AdvFeatureConfig+0x144>)
 8004406:	4013      	ands	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	2202      	movs	r2, #2
 800441c:	4013      	ands	r3, r2
 800441e:	d00b      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4a43      	ldr	r2, [pc, #268]	@ (8004534 <UART_AdvFeatureConfig+0x148>)
 8004428:	4013      	ands	r3, r2
 800442a:	0019      	movs	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	2204      	movs	r2, #4
 800443e:	4013      	ands	r3, r2
 8004440:	d00b      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a3b      	ldr	r2, [pc, #236]	@ (8004538 <UART_AdvFeatureConfig+0x14c>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445e:	2208      	movs	r2, #8
 8004460:	4013      	ands	r3, r2
 8004462:	d00b      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4a34      	ldr	r2, [pc, #208]	@ (800453c <UART_AdvFeatureConfig+0x150>)
 800446c:	4013      	ands	r3, r2
 800446e:	0019      	movs	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	2210      	movs	r2, #16
 8004482:	4013      	ands	r3, r2
 8004484:	d00b      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a2c      	ldr	r2, [pc, #176]	@ (8004540 <UART_AdvFeatureConfig+0x154>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	2220      	movs	r2, #32
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	4a25      	ldr	r2, [pc, #148]	@ (8004544 <UART_AdvFeatureConfig+0x158>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	2240      	movs	r2, #64	@ 0x40
 80044c6:	4013      	ands	r3, r2
 80044c8:	d01d      	beq.n	8004506 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004548 <UART_AdvFeatureConfig+0x15c>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044e6:	2380      	movs	r3, #128	@ 0x80
 80044e8:	035b      	lsls	r3, r3, #13
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10b      	bne.n	8004506 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4a15      	ldr	r2, [pc, #84]	@ (800454c <UART_AdvFeatureConfig+0x160>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450a:	2280      	movs	r2, #128	@ 0x80
 800450c:	4013      	ands	r3, r2
 800450e:	d00b      	beq.n	8004528 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a0e      	ldr	r2, [pc, #56]	@ (8004550 <UART_AdvFeatureConfig+0x164>)
 8004518:	4013      	ands	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }
}
 8004528:	46c0      	nop			@ (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b002      	add	sp, #8
 800452e:	bd80      	pop	{r7, pc}
 8004530:	fffdffff 	.word	0xfffdffff
 8004534:	fffeffff 	.word	0xfffeffff
 8004538:	fffbffff 	.word	0xfffbffff
 800453c:	ffff7fff 	.word	0xffff7fff
 8004540:	ffffefff 	.word	0xffffefff
 8004544:	ffffdfff 	.word	0xffffdfff
 8004548:	ffefffff 	.word	0xffefffff
 800454c:	ff9fffff 	.word	0xff9fffff
 8004550:	fff7ffff 	.word	0xfff7ffff

08004554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b092      	sub	sp, #72	@ 0x48
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2284      	movs	r2, #132	@ 0x84
 8004560:	2100      	movs	r1, #0
 8004562:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004564:	f7fc ff04 	bl	8001370 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2208      	movs	r2, #8
 8004574:	4013      	ands	r3, r2
 8004576:	2b08      	cmp	r3, #8
 8004578:	d12c      	bne.n	80045d4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800457a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800457c:	2280      	movs	r2, #128	@ 0x80
 800457e:	0391      	lsls	r1, r2, #14
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4a46      	ldr	r2, [pc, #280]	@ (800469c <UART_CheckIdleState+0x148>)
 8004584:	9200      	str	r2, [sp, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	f000 f88c 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d021      	beq.n	80045d4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004590:	f3ef 8310 	mrs	r3, PRIMASK
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800459a:	2301      	movs	r3, #1
 800459c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a0:	f383 8810 	msr	PRIMASK, r3
}
 80045a4:	46c0      	nop			@ (mov r8, r8)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2180      	movs	r1, #128	@ 0x80
 80045b2:	438a      	bics	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2278      	movs	r2, #120	@ 0x78
 80045cc:	2100      	movs	r1, #0
 80045ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e05f      	b.n	8004694 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2204      	movs	r2, #4
 80045dc:	4013      	ands	r3, r2
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d146      	bne.n	8004670 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e4:	2280      	movs	r2, #128	@ 0x80
 80045e6:	03d1      	lsls	r1, r2, #15
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4a2c      	ldr	r2, [pc, #176]	@ (800469c <UART_CheckIdleState+0x148>)
 80045ec:	9200      	str	r2, [sp, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f000 f858 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 80045f4:	1e03      	subs	r3, r0, #0
 80045f6:	d03b      	beq.n	8004670 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f8:	f3ef 8310 	mrs	r3, PRIMASK
 80045fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80045fe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004600:	637b      	str	r3, [r7, #52]	@ 0x34
 8004602:	2301      	movs	r3, #1
 8004604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f383 8810 	msr	PRIMASK, r3
}
 800460c:	46c0      	nop			@ (mov r8, r8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4921      	ldr	r1, [pc, #132]	@ (80046a0 <UART_CheckIdleState+0x14c>)
 800461a:	400a      	ands	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004620:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f383 8810 	msr	PRIMASK, r3
}
 8004628:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462a:	f3ef 8310 	mrs	r3, PRIMASK
 800462e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004630:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	633b      	str	r3, [r7, #48]	@ 0x30
 8004634:	2301      	movs	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f383 8810 	msr	PRIMASK, r3
}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2101      	movs	r1, #1
 800464c:	438a      	bics	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004652:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2280      	movs	r2, #128	@ 0x80
 8004660:	2120      	movs	r1, #32
 8004662:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2278      	movs	r2, #120	@ 0x78
 8004668:	2100      	movs	r1, #0
 800466a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e011      	b.n	8004694 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2280      	movs	r2, #128	@ 0x80
 800467a:	2120      	movs	r1, #32
 800467c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2278      	movs	r2, #120	@ 0x78
 800468e:	2100      	movs	r1, #0
 8004690:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b010      	add	sp, #64	@ 0x40
 800469a:	bd80      	pop	{r7, pc}
 800469c:	01ffffff 	.word	0x01ffffff
 80046a0:	fffffedf 	.word	0xfffffedf

080046a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	1dfb      	adds	r3, r7, #7
 80046b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b4:	e04b      	b.n	800474e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	3301      	adds	r3, #1
 80046ba:	d048      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046bc:	f7fc fe58 	bl	8001370 <HAL_GetTick>
 80046c0:	0002      	movs	r2, r0
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d302      	bcc.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e04b      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2204      	movs	r2, #4
 80046de:	4013      	ands	r3, r2
 80046e0:	d035      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2208      	movs	r2, #8
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d111      	bne.n	8004714 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2208      	movs	r2, #8
 80046f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 f83c 	bl	8004778 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2284      	movs	r2, #132	@ 0x84
 8004704:	2108      	movs	r1, #8
 8004706:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2278      	movs	r2, #120	@ 0x78
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e02c      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	2380      	movs	r3, #128	@ 0x80
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	401a      	ands	r2, r3
 8004720:	2380      	movs	r3, #128	@ 0x80
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	429a      	cmp	r2, r3
 8004726:	d112      	bne.n	800474e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2280      	movs	r2, #128	@ 0x80
 800472e:	0112      	lsls	r2, r2, #4
 8004730:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	0018      	movs	r0, r3
 8004736:	f000 f81f 	bl	8004778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2284      	movs	r2, #132	@ 0x84
 800473e:	2120      	movs	r1, #32
 8004740:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2278      	movs	r2, #120	@ 0x78
 8004746:	2100      	movs	r1, #0
 8004748:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e00f      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	425a      	negs	r2, r3
 800475e:	4153      	adcs	r3, r2
 8004760:	b2db      	uxtb	r3, r3
 8004762:	001a      	movs	r2, r3
 8004764:	1dfb      	adds	r3, r7, #7
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d0a4      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b004      	add	sp, #16
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08e      	sub	sp, #56	@ 0x38
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004780:	f3ef 8310 	mrs	r3, PRIMASK
 8004784:	617b      	str	r3, [r7, #20]
  return(result);
 8004786:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004788:	637b      	str	r3, [r7, #52]	@ 0x34
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	f383 8810 	msr	PRIMASK, r3
}
 8004794:	46c0      	nop			@ (mov r8, r8)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4926      	ldr	r1, [pc, #152]	@ (800483c <UART_EndRxTransfer+0xc4>)
 80047a2:	400a      	ands	r2, r1
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f383 8810 	msr	PRIMASK, r3
}
 80047b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b2:	f3ef 8310 	mrs	r3, PRIMASK
 80047b6:	623b      	str	r3, [r7, #32]
  return(result);
 80047b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80047bc:	2301      	movs	r3, #1
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	f383 8810 	msr	PRIMASK, r3
}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2101      	movs	r1, #1
 80047d4:	438a      	bics	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	f383 8810 	msr	PRIMASK, r3
}
 80047e2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d118      	bne.n	800481e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ec:	f3ef 8310 	mrs	r3, PRIMASK
 80047f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80047f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047f6:	2301      	movs	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f383 8810 	msr	PRIMASK, r3
}
 8004800:	46c0      	nop			@ (mov r8, r8)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2110      	movs	r1, #16
 800480e:	438a      	bics	r2, r1
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f383 8810 	msr	PRIMASK, r3
}
 800481c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2280      	movs	r2, #128	@ 0x80
 8004822:	2120      	movs	r1, #32
 8004824:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	b00e      	add	sp, #56	@ 0x38
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	fffffedf 	.word	0xfffffedf

08004840 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	225a      	movs	r2, #90	@ 0x5a
 8004852:	2100      	movs	r1, #0
 8004854:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2252      	movs	r2, #82	@ 0x52
 800485a:	2100      	movs	r1, #0
 800485c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	0018      	movs	r0, r3
 8004862:	f7ff fb11 	bl	8003e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	46bd      	mov	sp, r7
 800486a:	b004      	add	sp, #16
 800486c:	bd80      	pop	{r7, pc}

0800486e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004876:	f3ef 8310 	mrs	r3, PRIMASK
 800487a:	60bb      	str	r3, [r7, #8]
  return(result);
 800487c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	2301      	movs	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f383 8810 	msr	PRIMASK, r3
}
 800488a:	46c0      	nop			@ (mov r8, r8)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2140      	movs	r1, #64	@ 0x40
 8004898:	438a      	bics	r2, r1
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f383 8810 	msr	PRIMASK, r3
}
 80048a6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	0018      	movs	r0, r3
 80048b8:	f7ff fade 	bl	8003e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048bc:	46c0      	nop			@ (mov r8, r8)
 80048be:	46bd      	mov	sp, r7
 80048c0:	b006      	add	sp, #24
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b002      	add	sp, #8
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <std>:
 80048d4:	2300      	movs	r3, #0
 80048d6:	b510      	push	{r4, lr}
 80048d8:	0004      	movs	r4, r0
 80048da:	6003      	str	r3, [r0, #0]
 80048dc:	6043      	str	r3, [r0, #4]
 80048de:	6083      	str	r3, [r0, #8]
 80048e0:	8181      	strh	r1, [r0, #12]
 80048e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80048e4:	81c2      	strh	r2, [r0, #14]
 80048e6:	6103      	str	r3, [r0, #16]
 80048e8:	6143      	str	r3, [r0, #20]
 80048ea:	6183      	str	r3, [r0, #24]
 80048ec:	0019      	movs	r1, r3
 80048ee:	2208      	movs	r2, #8
 80048f0:	305c      	adds	r0, #92	@ 0x5c
 80048f2:	f000 f8c3 	bl	8004a7c <memset>
 80048f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004924 <std+0x50>)
 80048f8:	6224      	str	r4, [r4, #32]
 80048fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80048fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <std+0x54>)
 80048fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004900:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <std+0x58>)
 8004902:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004904:	4b0a      	ldr	r3, [pc, #40]	@ (8004930 <std+0x5c>)
 8004906:	6323      	str	r3, [r4, #48]	@ 0x30
 8004908:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <std+0x60>)
 800490a:	429c      	cmp	r4, r3
 800490c:	d005      	beq.n	800491a <std+0x46>
 800490e:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <std+0x64>)
 8004910:	429c      	cmp	r4, r3
 8004912:	d002      	beq.n	800491a <std+0x46>
 8004914:	4b09      	ldr	r3, [pc, #36]	@ (800493c <std+0x68>)
 8004916:	429c      	cmp	r4, r3
 8004918:	d103      	bne.n	8004922 <std+0x4e>
 800491a:	0020      	movs	r0, r4
 800491c:	3058      	adds	r0, #88	@ 0x58
 800491e:	f000 f8df 	bl	8004ae0 <__retarget_lock_init_recursive>
 8004922:	bd10      	pop	{r4, pc}
 8004924:	08005331 	.word	0x08005331
 8004928:	08005359 	.word	0x08005359
 800492c:	08005391 	.word	0x08005391
 8004930:	080053bd 	.word	0x080053bd
 8004934:	200001dc 	.word	0x200001dc
 8004938:	20000244 	.word	0x20000244
 800493c:	200002ac 	.word	0x200002ac

08004940 <stdio_exit_handler>:
 8004940:	b510      	push	{r4, lr}
 8004942:	4a03      	ldr	r2, [pc, #12]	@ (8004950 <stdio_exit_handler+0x10>)
 8004944:	4903      	ldr	r1, [pc, #12]	@ (8004954 <stdio_exit_handler+0x14>)
 8004946:	4804      	ldr	r0, [pc, #16]	@ (8004958 <stdio_exit_handler+0x18>)
 8004948:	f000 f86c 	bl	8004a24 <_fwalk_sglue>
 800494c:	bd10      	pop	{r4, pc}
 800494e:	46c0      	nop			@ (mov r8, r8)
 8004950:	20000010 	.word	0x20000010
 8004954:	080052b9 	.word	0x080052b9
 8004958:	20000020 	.word	0x20000020

0800495c <cleanup_stdio>:
 800495c:	6841      	ldr	r1, [r0, #4]
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <cleanup_stdio+0x30>)
 8004960:	b510      	push	{r4, lr}
 8004962:	0004      	movs	r4, r0
 8004964:	4299      	cmp	r1, r3
 8004966:	d001      	beq.n	800496c <cleanup_stdio+0x10>
 8004968:	f000 fca6 	bl	80052b8 <_fflush_r>
 800496c:	68a1      	ldr	r1, [r4, #8]
 800496e:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <cleanup_stdio+0x34>)
 8004970:	4299      	cmp	r1, r3
 8004972:	d002      	beq.n	800497a <cleanup_stdio+0x1e>
 8004974:	0020      	movs	r0, r4
 8004976:	f000 fc9f 	bl	80052b8 <_fflush_r>
 800497a:	68e1      	ldr	r1, [r4, #12]
 800497c:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <cleanup_stdio+0x38>)
 800497e:	4299      	cmp	r1, r3
 8004980:	d002      	beq.n	8004988 <cleanup_stdio+0x2c>
 8004982:	0020      	movs	r0, r4
 8004984:	f000 fc98 	bl	80052b8 <_fflush_r>
 8004988:	bd10      	pop	{r4, pc}
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	200001dc 	.word	0x200001dc
 8004990:	20000244 	.word	0x20000244
 8004994:	200002ac 	.word	0x200002ac

08004998 <global_stdio_init.part.0>:
 8004998:	b510      	push	{r4, lr}
 800499a:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <global_stdio_init.part.0+0x28>)
 800499c:	4a09      	ldr	r2, [pc, #36]	@ (80049c4 <global_stdio_init.part.0+0x2c>)
 800499e:	2104      	movs	r1, #4
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	4809      	ldr	r0, [pc, #36]	@ (80049c8 <global_stdio_init.part.0+0x30>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	f7ff ff95 	bl	80048d4 <std>
 80049aa:	2201      	movs	r2, #1
 80049ac:	2109      	movs	r1, #9
 80049ae:	4807      	ldr	r0, [pc, #28]	@ (80049cc <global_stdio_init.part.0+0x34>)
 80049b0:	f7ff ff90 	bl	80048d4 <std>
 80049b4:	2202      	movs	r2, #2
 80049b6:	2112      	movs	r1, #18
 80049b8:	4805      	ldr	r0, [pc, #20]	@ (80049d0 <global_stdio_init.part.0+0x38>)
 80049ba:	f7ff ff8b 	bl	80048d4 <std>
 80049be:	bd10      	pop	{r4, pc}
 80049c0:	20000314 	.word	0x20000314
 80049c4:	08004941 	.word	0x08004941
 80049c8:	200001dc 	.word	0x200001dc
 80049cc:	20000244 	.word	0x20000244
 80049d0:	200002ac 	.word	0x200002ac

080049d4 <__sfp_lock_acquire>:
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4802      	ldr	r0, [pc, #8]	@ (80049e0 <__sfp_lock_acquire+0xc>)
 80049d8:	f000 f883 	bl	8004ae2 <__retarget_lock_acquire_recursive>
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	20000319 	.word	0x20000319

080049e4 <__sfp_lock_release>:
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4802      	ldr	r0, [pc, #8]	@ (80049f0 <__sfp_lock_release+0xc>)
 80049e8:	f000 f87c 	bl	8004ae4 <__retarget_lock_release_recursive>
 80049ec:	bd10      	pop	{r4, pc}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	20000319 	.word	0x20000319

080049f4 <__sinit>:
 80049f4:	b510      	push	{r4, lr}
 80049f6:	0004      	movs	r4, r0
 80049f8:	f7ff ffec 	bl	80049d4 <__sfp_lock_acquire>
 80049fc:	6a23      	ldr	r3, [r4, #32]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <__sinit+0x14>
 8004a02:	f7ff ffef 	bl	80049e4 <__sfp_lock_release>
 8004a06:	bd10      	pop	{r4, pc}
 8004a08:	4b04      	ldr	r3, [pc, #16]	@ (8004a1c <__sinit+0x28>)
 8004a0a:	6223      	str	r3, [r4, #32]
 8004a0c:	4b04      	ldr	r3, [pc, #16]	@ (8004a20 <__sinit+0x2c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f6      	bne.n	8004a02 <__sinit+0xe>
 8004a14:	f7ff ffc0 	bl	8004998 <global_stdio_init.part.0>
 8004a18:	e7f3      	b.n	8004a02 <__sinit+0xe>
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	0800495d 	.word	0x0800495d
 8004a20:	20000314 	.word	0x20000314

08004a24 <_fwalk_sglue>:
 8004a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a26:	0014      	movs	r4, r2
 8004a28:	2600      	movs	r6, #0
 8004a2a:	9000      	str	r0, [sp, #0]
 8004a2c:	9101      	str	r1, [sp, #4]
 8004a2e:	68a5      	ldr	r5, [r4, #8]
 8004a30:	6867      	ldr	r7, [r4, #4]
 8004a32:	3f01      	subs	r7, #1
 8004a34:	d504      	bpl.n	8004a40 <_fwalk_sglue+0x1c>
 8004a36:	6824      	ldr	r4, [r4, #0]
 8004a38:	2c00      	cmp	r4, #0
 8004a3a:	d1f8      	bne.n	8004a2e <_fwalk_sglue+0xa>
 8004a3c:	0030      	movs	r0, r6
 8004a3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a40:	89ab      	ldrh	r3, [r5, #12]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d908      	bls.n	8004a58 <_fwalk_sglue+0x34>
 8004a46:	220e      	movs	r2, #14
 8004a48:	5eab      	ldrsh	r3, [r5, r2]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	d004      	beq.n	8004a58 <_fwalk_sglue+0x34>
 8004a4e:	0029      	movs	r1, r5
 8004a50:	9800      	ldr	r0, [sp, #0]
 8004a52:	9b01      	ldr	r3, [sp, #4]
 8004a54:	4798      	blx	r3
 8004a56:	4306      	orrs	r6, r0
 8004a58:	3568      	adds	r5, #104	@ 0x68
 8004a5a:	e7ea      	b.n	8004a32 <_fwalk_sglue+0xe>

08004a5c <iprintf>:
 8004a5c:	b40f      	push	{r0, r1, r2, r3}
 8004a5e:	b507      	push	{r0, r1, r2, lr}
 8004a60:	4905      	ldr	r1, [pc, #20]	@ (8004a78 <iprintf+0x1c>)
 8004a62:	ab04      	add	r3, sp, #16
 8004a64:	6808      	ldr	r0, [r1, #0]
 8004a66:	cb04      	ldmia	r3!, {r2}
 8004a68:	6881      	ldr	r1, [r0, #8]
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	f000 f862 	bl	8004b34 <_vfiprintf_r>
 8004a70:	b003      	add	sp, #12
 8004a72:	bc08      	pop	{r3}
 8004a74:	b004      	add	sp, #16
 8004a76:	4718      	bx	r3
 8004a78:	2000001c 	.word	0x2000001c

08004a7c <memset>:
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	1882      	adds	r2, r0, r2
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memset+0xa>
 8004a84:	4770      	bx	lr
 8004a86:	7019      	strb	r1, [r3, #0]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	e7f9      	b.n	8004a80 <memset+0x4>

08004a8c <__errno>:
 8004a8c:	4b01      	ldr	r3, [pc, #4]	@ (8004a94 <__errno+0x8>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	4770      	bx	lr
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	2000001c 	.word	0x2000001c

08004a98 <__libc_init_array>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	2600      	movs	r6, #0
 8004a9c:	4c0c      	ldr	r4, [pc, #48]	@ (8004ad0 <__libc_init_array+0x38>)
 8004a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ad4 <__libc_init_array+0x3c>)
 8004aa0:	1b64      	subs	r4, r4, r5
 8004aa2:	10a4      	asrs	r4, r4, #2
 8004aa4:	42a6      	cmp	r6, r4
 8004aa6:	d109      	bne.n	8004abc <__libc_init_array+0x24>
 8004aa8:	2600      	movs	r6, #0
 8004aaa:	f000 fe73 	bl	8005794 <_init>
 8004aae:	4c0a      	ldr	r4, [pc, #40]	@ (8004ad8 <__libc_init_array+0x40>)
 8004ab0:	4d0a      	ldr	r5, [pc, #40]	@ (8004adc <__libc_init_array+0x44>)
 8004ab2:	1b64      	subs	r4, r4, r5
 8004ab4:	10a4      	asrs	r4, r4, #2
 8004ab6:	42a6      	cmp	r6, r4
 8004ab8:	d105      	bne.n	8004ac6 <__libc_init_array+0x2e>
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	00b3      	lsls	r3, r6, #2
 8004abe:	58eb      	ldr	r3, [r5, r3]
 8004ac0:	4798      	blx	r3
 8004ac2:	3601      	adds	r6, #1
 8004ac4:	e7ee      	b.n	8004aa4 <__libc_init_array+0xc>
 8004ac6:	00b3      	lsls	r3, r6, #2
 8004ac8:	58eb      	ldr	r3, [r5, r3]
 8004aca:	4798      	blx	r3
 8004acc:	3601      	adds	r6, #1
 8004ace:	e7f2      	b.n	8004ab6 <__libc_init_array+0x1e>
 8004ad0:	08005888 	.word	0x08005888
 8004ad4:	08005888 	.word	0x08005888
 8004ad8:	0800588c 	.word	0x0800588c
 8004adc:	08005888 	.word	0x08005888

08004ae0 <__retarget_lock_init_recursive>:
 8004ae0:	4770      	bx	lr

08004ae2 <__retarget_lock_acquire_recursive>:
 8004ae2:	4770      	bx	lr

08004ae4 <__retarget_lock_release_recursive>:
 8004ae4:	4770      	bx	lr

08004ae6 <__sfputc_r>:
 8004ae6:	6893      	ldr	r3, [r2, #8]
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	3b01      	subs	r3, #1
 8004aec:	6093      	str	r3, [r2, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da04      	bge.n	8004afc <__sfputc_r+0x16>
 8004af2:	6994      	ldr	r4, [r2, #24]
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	db07      	blt.n	8004b08 <__sfputc_r+0x22>
 8004af8:	290a      	cmp	r1, #10
 8004afa:	d005      	beq.n	8004b08 <__sfputc_r+0x22>
 8004afc:	6813      	ldr	r3, [r2, #0]
 8004afe:	1c58      	adds	r0, r3, #1
 8004b00:	6010      	str	r0, [r2, #0]
 8004b02:	7019      	strb	r1, [r3, #0]
 8004b04:	0008      	movs	r0, r1
 8004b06:	bd10      	pop	{r4, pc}
 8004b08:	f000 fc5e 	bl	80053c8 <__swbuf_r>
 8004b0c:	0001      	movs	r1, r0
 8004b0e:	e7f9      	b.n	8004b04 <__sfputc_r+0x1e>

08004b10 <__sfputs_r>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	0006      	movs	r6, r0
 8004b14:	000f      	movs	r7, r1
 8004b16:	0014      	movs	r4, r2
 8004b18:	18d5      	adds	r5, r2, r3
 8004b1a:	42ac      	cmp	r4, r5
 8004b1c:	d101      	bne.n	8004b22 <__sfputs_r+0x12>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e007      	b.n	8004b32 <__sfputs_r+0x22>
 8004b22:	7821      	ldrb	r1, [r4, #0]
 8004b24:	003a      	movs	r2, r7
 8004b26:	0030      	movs	r0, r6
 8004b28:	f7ff ffdd 	bl	8004ae6 <__sfputc_r>
 8004b2c:	3401      	adds	r4, #1
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	d1f3      	bne.n	8004b1a <__sfputs_r+0xa>
 8004b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b34 <_vfiprintf_r>:
 8004b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b36:	b0a1      	sub	sp, #132	@ 0x84
 8004b38:	000f      	movs	r7, r1
 8004b3a:	0015      	movs	r5, r2
 8004b3c:	001e      	movs	r6, r3
 8004b3e:	9003      	str	r0, [sp, #12]
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d004      	beq.n	8004b4e <_vfiprintf_r+0x1a>
 8004b44:	6a03      	ldr	r3, [r0, #32]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <_vfiprintf_r+0x1a>
 8004b4a:	f7ff ff53 	bl	80049f4 <__sinit>
 8004b4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b50:	07db      	lsls	r3, r3, #31
 8004b52:	d405      	bmi.n	8004b60 <_vfiprintf_r+0x2c>
 8004b54:	89bb      	ldrh	r3, [r7, #12]
 8004b56:	059b      	lsls	r3, r3, #22
 8004b58:	d402      	bmi.n	8004b60 <_vfiprintf_r+0x2c>
 8004b5a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b5c:	f7ff ffc1 	bl	8004ae2 <__retarget_lock_acquire_recursive>
 8004b60:	89bb      	ldrh	r3, [r7, #12]
 8004b62:	071b      	lsls	r3, r3, #28
 8004b64:	d502      	bpl.n	8004b6c <_vfiprintf_r+0x38>
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d113      	bne.n	8004b94 <_vfiprintf_r+0x60>
 8004b6c:	0039      	movs	r1, r7
 8004b6e:	9803      	ldr	r0, [sp, #12]
 8004b70:	f000 fc6c 	bl	800544c <__swsetup_r>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d00d      	beq.n	8004b94 <_vfiprintf_r+0x60>
 8004b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b7a:	07db      	lsls	r3, r3, #31
 8004b7c:	d503      	bpl.n	8004b86 <_vfiprintf_r+0x52>
 8004b7e:	2001      	movs	r0, #1
 8004b80:	4240      	negs	r0, r0
 8004b82:	b021      	add	sp, #132	@ 0x84
 8004b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b86:	89bb      	ldrh	r3, [r7, #12]
 8004b88:	059b      	lsls	r3, r3, #22
 8004b8a:	d4f8      	bmi.n	8004b7e <_vfiprintf_r+0x4a>
 8004b8c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b8e:	f7ff ffa9 	bl	8004ae4 <__retarget_lock_release_recursive>
 8004b92:	e7f4      	b.n	8004b7e <_vfiprintf_r+0x4a>
 8004b94:	2300      	movs	r3, #0
 8004b96:	ac08      	add	r4, sp, #32
 8004b98:	6163      	str	r3, [r4, #20]
 8004b9a:	3320      	adds	r3, #32
 8004b9c:	7663      	strb	r3, [r4, #25]
 8004b9e:	3310      	adds	r3, #16
 8004ba0:	76a3      	strb	r3, [r4, #26]
 8004ba2:	9607      	str	r6, [sp, #28]
 8004ba4:	002e      	movs	r6, r5
 8004ba6:	7833      	ldrb	r3, [r6, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <_vfiprintf_r+0x7c>
 8004bac:	2b25      	cmp	r3, #37	@ 0x25
 8004bae:	d148      	bne.n	8004c42 <_vfiprintf_r+0x10e>
 8004bb0:	1b73      	subs	r3, r6, r5
 8004bb2:	9305      	str	r3, [sp, #20]
 8004bb4:	42ae      	cmp	r6, r5
 8004bb6:	d00b      	beq.n	8004bd0 <_vfiprintf_r+0x9c>
 8004bb8:	002a      	movs	r2, r5
 8004bba:	0039      	movs	r1, r7
 8004bbc:	9803      	ldr	r0, [sp, #12]
 8004bbe:	f7ff ffa7 	bl	8004b10 <__sfputs_r>
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d100      	bne.n	8004bc8 <_vfiprintf_r+0x94>
 8004bc6:	e0ae      	b.n	8004d26 <_vfiprintf_r+0x1f2>
 8004bc8:	6963      	ldr	r3, [r4, #20]
 8004bca:	9a05      	ldr	r2, [sp, #20]
 8004bcc:	189b      	adds	r3, r3, r2
 8004bce:	6163      	str	r3, [r4, #20]
 8004bd0:	7833      	ldrb	r3, [r6, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d100      	bne.n	8004bd8 <_vfiprintf_r+0xa4>
 8004bd6:	e0a6      	b.n	8004d26 <_vfiprintf_r+0x1f2>
 8004bd8:	2201      	movs	r2, #1
 8004bda:	2300      	movs	r3, #0
 8004bdc:	4252      	negs	r2, r2
 8004bde:	6062      	str	r2, [r4, #4]
 8004be0:	a904      	add	r1, sp, #16
 8004be2:	3254      	adds	r2, #84	@ 0x54
 8004be4:	1852      	adds	r2, r2, r1
 8004be6:	1c75      	adds	r5, r6, #1
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	60e3      	str	r3, [r4, #12]
 8004bec:	60a3      	str	r3, [r4, #8]
 8004bee:	7013      	strb	r3, [r2, #0]
 8004bf0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004bf2:	4b59      	ldr	r3, [pc, #356]	@ (8004d58 <_vfiprintf_r+0x224>)
 8004bf4:	2205      	movs	r2, #5
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	7829      	ldrb	r1, [r5, #0]
 8004bfa:	9305      	str	r3, [sp, #20]
 8004bfc:	f000 fd74 	bl	80056e8 <memchr>
 8004c00:	1c6e      	adds	r6, r5, #1
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d11f      	bne.n	8004c46 <_vfiprintf_r+0x112>
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	06d3      	lsls	r3, r2, #27
 8004c0a:	d504      	bpl.n	8004c16 <_vfiprintf_r+0xe2>
 8004c0c:	2353      	movs	r3, #83	@ 0x53
 8004c0e:	a904      	add	r1, sp, #16
 8004c10:	185b      	adds	r3, r3, r1
 8004c12:	2120      	movs	r1, #32
 8004c14:	7019      	strb	r1, [r3, #0]
 8004c16:	0713      	lsls	r3, r2, #28
 8004c18:	d504      	bpl.n	8004c24 <_vfiprintf_r+0xf0>
 8004c1a:	2353      	movs	r3, #83	@ 0x53
 8004c1c:	a904      	add	r1, sp, #16
 8004c1e:	185b      	adds	r3, r3, r1
 8004c20:	212b      	movs	r1, #43	@ 0x2b
 8004c22:	7019      	strb	r1, [r3, #0]
 8004c24:	782b      	ldrb	r3, [r5, #0]
 8004c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c28:	d016      	beq.n	8004c58 <_vfiprintf_r+0x124>
 8004c2a:	002e      	movs	r6, r5
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	200a      	movs	r0, #10
 8004c30:	68e3      	ldr	r3, [r4, #12]
 8004c32:	7832      	ldrb	r2, [r6, #0]
 8004c34:	1c75      	adds	r5, r6, #1
 8004c36:	3a30      	subs	r2, #48	@ 0x30
 8004c38:	2a09      	cmp	r2, #9
 8004c3a:	d950      	bls.n	8004cde <_vfiprintf_r+0x1aa>
 8004c3c:	2900      	cmp	r1, #0
 8004c3e:	d111      	bne.n	8004c64 <_vfiprintf_r+0x130>
 8004c40:	e017      	b.n	8004c72 <_vfiprintf_r+0x13e>
 8004c42:	3601      	adds	r6, #1
 8004c44:	e7af      	b.n	8004ba6 <_vfiprintf_r+0x72>
 8004c46:	9b05      	ldr	r3, [sp, #20]
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	1ac0      	subs	r0, r0, r3
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4083      	lsls	r3, r0
 8004c50:	4313      	orrs	r3, r2
 8004c52:	0035      	movs	r5, r6
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	e7cc      	b.n	8004bf2 <_vfiprintf_r+0xbe>
 8004c58:	9b07      	ldr	r3, [sp, #28]
 8004c5a:	1d19      	adds	r1, r3, #4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	9107      	str	r1, [sp, #28]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	db01      	blt.n	8004c68 <_vfiprintf_r+0x134>
 8004c64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c66:	e004      	b.n	8004c72 <_vfiprintf_r+0x13e>
 8004c68:	425b      	negs	r3, r3
 8004c6a:	60e3      	str	r3, [r4, #12]
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	7833      	ldrb	r3, [r6, #0]
 8004c74:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c76:	d10c      	bne.n	8004c92 <_vfiprintf_r+0x15e>
 8004c78:	7873      	ldrb	r3, [r6, #1]
 8004c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c7c:	d134      	bne.n	8004ce8 <_vfiprintf_r+0x1b4>
 8004c7e:	9b07      	ldr	r3, [sp, #28]
 8004c80:	3602      	adds	r6, #2
 8004c82:	1d1a      	adds	r2, r3, #4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	9207      	str	r2, [sp, #28]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	da01      	bge.n	8004c90 <_vfiprintf_r+0x15c>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	425b      	negs	r3, r3
 8004c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c92:	4d32      	ldr	r5, [pc, #200]	@ (8004d5c <_vfiprintf_r+0x228>)
 8004c94:	2203      	movs	r2, #3
 8004c96:	0028      	movs	r0, r5
 8004c98:	7831      	ldrb	r1, [r6, #0]
 8004c9a:	f000 fd25 	bl	80056e8 <memchr>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d006      	beq.n	8004cb0 <_vfiprintf_r+0x17c>
 8004ca2:	2340      	movs	r3, #64	@ 0x40
 8004ca4:	1b40      	subs	r0, r0, r5
 8004ca6:	4083      	lsls	r3, r0
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	3601      	adds	r6, #1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	6023      	str	r3, [r4, #0]
 8004cb0:	7831      	ldrb	r1, [r6, #0]
 8004cb2:	2206      	movs	r2, #6
 8004cb4:	482a      	ldr	r0, [pc, #168]	@ (8004d60 <_vfiprintf_r+0x22c>)
 8004cb6:	1c75      	adds	r5, r6, #1
 8004cb8:	7621      	strb	r1, [r4, #24]
 8004cba:	f000 fd15 	bl	80056e8 <memchr>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d040      	beq.n	8004d44 <_vfiprintf_r+0x210>
 8004cc2:	4b28      	ldr	r3, [pc, #160]	@ (8004d64 <_vfiprintf_r+0x230>)
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d122      	bne.n	8004d0e <_vfiprintf_r+0x1da>
 8004cc8:	2207      	movs	r2, #7
 8004cca:	9b07      	ldr	r3, [sp, #28]
 8004ccc:	3307      	adds	r3, #7
 8004cce:	4393      	bics	r3, r2
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	9307      	str	r3, [sp, #28]
 8004cd4:	6963      	ldr	r3, [r4, #20]
 8004cd6:	9a04      	ldr	r2, [sp, #16]
 8004cd8:	189b      	adds	r3, r3, r2
 8004cda:	6163      	str	r3, [r4, #20]
 8004cdc:	e762      	b.n	8004ba4 <_vfiprintf_r+0x70>
 8004cde:	4343      	muls	r3, r0
 8004ce0:	002e      	movs	r6, r5
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	189b      	adds	r3, r3, r2
 8004ce6:	e7a4      	b.n	8004c32 <_vfiprintf_r+0xfe>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	200a      	movs	r0, #10
 8004cec:	0019      	movs	r1, r3
 8004cee:	3601      	adds	r6, #1
 8004cf0:	6063      	str	r3, [r4, #4]
 8004cf2:	7832      	ldrb	r2, [r6, #0]
 8004cf4:	1c75      	adds	r5, r6, #1
 8004cf6:	3a30      	subs	r2, #48	@ 0x30
 8004cf8:	2a09      	cmp	r2, #9
 8004cfa:	d903      	bls.n	8004d04 <_vfiprintf_r+0x1d0>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0c8      	beq.n	8004c92 <_vfiprintf_r+0x15e>
 8004d00:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d02:	e7c6      	b.n	8004c92 <_vfiprintf_r+0x15e>
 8004d04:	4341      	muls	r1, r0
 8004d06:	002e      	movs	r6, r5
 8004d08:	2301      	movs	r3, #1
 8004d0a:	1889      	adds	r1, r1, r2
 8004d0c:	e7f1      	b.n	8004cf2 <_vfiprintf_r+0x1be>
 8004d0e:	aa07      	add	r2, sp, #28
 8004d10:	9200      	str	r2, [sp, #0]
 8004d12:	0021      	movs	r1, r4
 8004d14:	003a      	movs	r2, r7
 8004d16:	4b14      	ldr	r3, [pc, #80]	@ (8004d68 <_vfiprintf_r+0x234>)
 8004d18:	9803      	ldr	r0, [sp, #12]
 8004d1a:	e000      	b.n	8004d1e <_vfiprintf_r+0x1ea>
 8004d1c:	bf00      	nop
 8004d1e:	9004      	str	r0, [sp, #16]
 8004d20:	9b04      	ldr	r3, [sp, #16]
 8004d22:	3301      	adds	r3, #1
 8004d24:	d1d6      	bne.n	8004cd4 <_vfiprintf_r+0x1a0>
 8004d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d28:	07db      	lsls	r3, r3, #31
 8004d2a:	d405      	bmi.n	8004d38 <_vfiprintf_r+0x204>
 8004d2c:	89bb      	ldrh	r3, [r7, #12]
 8004d2e:	059b      	lsls	r3, r3, #22
 8004d30:	d402      	bmi.n	8004d38 <_vfiprintf_r+0x204>
 8004d32:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004d34:	f7ff fed6 	bl	8004ae4 <__retarget_lock_release_recursive>
 8004d38:	89bb      	ldrh	r3, [r7, #12]
 8004d3a:	065b      	lsls	r3, r3, #25
 8004d3c:	d500      	bpl.n	8004d40 <_vfiprintf_r+0x20c>
 8004d3e:	e71e      	b.n	8004b7e <_vfiprintf_r+0x4a>
 8004d40:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004d42:	e71e      	b.n	8004b82 <_vfiprintf_r+0x4e>
 8004d44:	aa07      	add	r2, sp, #28
 8004d46:	9200      	str	r2, [sp, #0]
 8004d48:	0021      	movs	r1, r4
 8004d4a:	003a      	movs	r2, r7
 8004d4c:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <_vfiprintf_r+0x234>)
 8004d4e:	9803      	ldr	r0, [sp, #12]
 8004d50:	f000 f91e 	bl	8004f90 <_printf_i>
 8004d54:	e7e3      	b.n	8004d1e <_vfiprintf_r+0x1ea>
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	0800584c 	.word	0x0800584c
 8004d5c:	08005852 	.word	0x08005852
 8004d60:	08005856 	.word	0x08005856
 8004d64:	00000000 	.word	0x00000000
 8004d68:	08004b11 	.word	0x08004b11

08004d6c <sbrk_aligned>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8004dac <sbrk_aligned+0x40>)
 8004d70:	000d      	movs	r5, r1
 8004d72:	6831      	ldr	r1, [r6, #0]
 8004d74:	0004      	movs	r4, r0
 8004d76:	2900      	cmp	r1, #0
 8004d78:	d102      	bne.n	8004d80 <sbrk_aligned+0x14>
 8004d7a:	f000 fc8f 	bl	800569c <_sbrk_r>
 8004d7e:	6030      	str	r0, [r6, #0]
 8004d80:	0029      	movs	r1, r5
 8004d82:	0020      	movs	r0, r4
 8004d84:	f000 fc8a 	bl	800569c <_sbrk_r>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d103      	bne.n	8004d94 <sbrk_aligned+0x28>
 8004d8c:	2501      	movs	r5, #1
 8004d8e:	426d      	negs	r5, r5
 8004d90:	0028      	movs	r0, r5
 8004d92:	bd70      	pop	{r4, r5, r6, pc}
 8004d94:	2303      	movs	r3, #3
 8004d96:	1cc5      	adds	r5, r0, #3
 8004d98:	439d      	bics	r5, r3
 8004d9a:	42a8      	cmp	r0, r5
 8004d9c:	d0f8      	beq.n	8004d90 <sbrk_aligned+0x24>
 8004d9e:	1a29      	subs	r1, r5, r0
 8004da0:	0020      	movs	r0, r4
 8004da2:	f000 fc7b 	bl	800569c <_sbrk_r>
 8004da6:	3001      	adds	r0, #1
 8004da8:	d1f2      	bne.n	8004d90 <sbrk_aligned+0x24>
 8004daa:	e7ef      	b.n	8004d8c <sbrk_aligned+0x20>
 8004dac:	2000031c 	.word	0x2000031c

08004db0 <_malloc_r>:
 8004db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004db2:	2203      	movs	r2, #3
 8004db4:	1ccb      	adds	r3, r1, #3
 8004db6:	4393      	bics	r3, r2
 8004db8:	3308      	adds	r3, #8
 8004dba:	0005      	movs	r5, r0
 8004dbc:	001f      	movs	r7, r3
 8004dbe:	2b0c      	cmp	r3, #12
 8004dc0:	d234      	bcs.n	8004e2c <_malloc_r+0x7c>
 8004dc2:	270c      	movs	r7, #12
 8004dc4:	42b9      	cmp	r1, r7
 8004dc6:	d833      	bhi.n	8004e30 <_malloc_r+0x80>
 8004dc8:	0028      	movs	r0, r5
 8004dca:	f000 faa1 	bl	8005310 <__malloc_lock>
 8004dce:	4e37      	ldr	r6, [pc, #220]	@ (8004eac <_malloc_r+0xfc>)
 8004dd0:	6833      	ldr	r3, [r6, #0]
 8004dd2:	001c      	movs	r4, r3
 8004dd4:	2c00      	cmp	r4, #0
 8004dd6:	d12f      	bne.n	8004e38 <_malloc_r+0x88>
 8004dd8:	0039      	movs	r1, r7
 8004dda:	0028      	movs	r0, r5
 8004ddc:	f7ff ffc6 	bl	8004d6c <sbrk_aligned>
 8004de0:	0004      	movs	r4, r0
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	d15f      	bne.n	8004ea6 <_malloc_r+0xf6>
 8004de6:	6834      	ldr	r4, [r6, #0]
 8004de8:	9400      	str	r4, [sp, #0]
 8004dea:	9b00      	ldr	r3, [sp, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d14a      	bne.n	8004e86 <_malloc_r+0xd6>
 8004df0:	2c00      	cmp	r4, #0
 8004df2:	d052      	beq.n	8004e9a <_malloc_r+0xea>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	0028      	movs	r0, r5
 8004df8:	18e3      	adds	r3, r4, r3
 8004dfa:	9900      	ldr	r1, [sp, #0]
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	f000 fc4d 	bl	800569c <_sbrk_r>
 8004e02:	9b01      	ldr	r3, [sp, #4]
 8004e04:	4283      	cmp	r3, r0
 8004e06:	d148      	bne.n	8004e9a <_malloc_r+0xea>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	0028      	movs	r0, r5
 8004e0c:	1aff      	subs	r7, r7, r3
 8004e0e:	0039      	movs	r1, r7
 8004e10:	f7ff ffac 	bl	8004d6c <sbrk_aligned>
 8004e14:	3001      	adds	r0, #1
 8004e16:	d040      	beq.n	8004e9a <_malloc_r+0xea>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	19db      	adds	r3, r3, r7
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	6833      	ldr	r3, [r6, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	2a00      	cmp	r2, #0
 8004e24:	d133      	bne.n	8004e8e <_malloc_r+0xde>
 8004e26:	9b00      	ldr	r3, [sp, #0]
 8004e28:	6033      	str	r3, [r6, #0]
 8004e2a:	e019      	b.n	8004e60 <_malloc_r+0xb0>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	dac9      	bge.n	8004dc4 <_malloc_r+0x14>
 8004e30:	230c      	movs	r3, #12
 8004e32:	602b      	str	r3, [r5, #0]
 8004e34:	2000      	movs	r0, #0
 8004e36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e38:	6821      	ldr	r1, [r4, #0]
 8004e3a:	1bc9      	subs	r1, r1, r7
 8004e3c:	d420      	bmi.n	8004e80 <_malloc_r+0xd0>
 8004e3e:	290b      	cmp	r1, #11
 8004e40:	d90a      	bls.n	8004e58 <_malloc_r+0xa8>
 8004e42:	19e2      	adds	r2, r4, r7
 8004e44:	6027      	str	r7, [r4, #0]
 8004e46:	42a3      	cmp	r3, r4
 8004e48:	d104      	bne.n	8004e54 <_malloc_r+0xa4>
 8004e4a:	6032      	str	r2, [r6, #0]
 8004e4c:	6863      	ldr	r3, [r4, #4]
 8004e4e:	6011      	str	r1, [r2, #0]
 8004e50:	6053      	str	r3, [r2, #4]
 8004e52:	e005      	b.n	8004e60 <_malloc_r+0xb0>
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	e7f9      	b.n	8004e4c <_malloc_r+0x9c>
 8004e58:	6862      	ldr	r2, [r4, #4]
 8004e5a:	42a3      	cmp	r3, r4
 8004e5c:	d10e      	bne.n	8004e7c <_malloc_r+0xcc>
 8004e5e:	6032      	str	r2, [r6, #0]
 8004e60:	0028      	movs	r0, r5
 8004e62:	f000 fa5d 	bl	8005320 <__malloc_unlock>
 8004e66:	0020      	movs	r0, r4
 8004e68:	2207      	movs	r2, #7
 8004e6a:	300b      	adds	r0, #11
 8004e6c:	1d23      	adds	r3, r4, #4
 8004e6e:	4390      	bics	r0, r2
 8004e70:	1ac2      	subs	r2, r0, r3
 8004e72:	4298      	cmp	r0, r3
 8004e74:	d0df      	beq.n	8004e36 <_malloc_r+0x86>
 8004e76:	1a1b      	subs	r3, r3, r0
 8004e78:	50a3      	str	r3, [r4, r2]
 8004e7a:	e7dc      	b.n	8004e36 <_malloc_r+0x86>
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	e7ef      	b.n	8004e60 <_malloc_r+0xb0>
 8004e80:	0023      	movs	r3, r4
 8004e82:	6864      	ldr	r4, [r4, #4]
 8004e84:	e7a6      	b.n	8004dd4 <_malloc_r+0x24>
 8004e86:	9c00      	ldr	r4, [sp, #0]
 8004e88:	6863      	ldr	r3, [r4, #4]
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	e7ad      	b.n	8004dea <_malloc_r+0x3a>
 8004e8e:	001a      	movs	r2, r3
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	d1fb      	bne.n	8004e8e <_malloc_r+0xde>
 8004e96:	2300      	movs	r3, #0
 8004e98:	e7da      	b.n	8004e50 <_malloc_r+0xa0>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	0028      	movs	r0, r5
 8004e9e:	602b      	str	r3, [r5, #0]
 8004ea0:	f000 fa3e 	bl	8005320 <__malloc_unlock>
 8004ea4:	e7c6      	b.n	8004e34 <_malloc_r+0x84>
 8004ea6:	6007      	str	r7, [r0, #0]
 8004ea8:	e7da      	b.n	8004e60 <_malloc_r+0xb0>
 8004eaa:	46c0      	nop			@ (mov r8, r8)
 8004eac:	20000320 	.word	0x20000320

08004eb0 <_printf_common>:
 8004eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eb2:	0016      	movs	r6, r2
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	688a      	ldr	r2, [r1, #8]
 8004eb8:	690b      	ldr	r3, [r1, #16]
 8004eba:	000c      	movs	r4, r1
 8004ebc:	9000      	str	r0, [sp, #0]
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	da00      	bge.n	8004ec4 <_printf_common+0x14>
 8004ec2:	0013      	movs	r3, r2
 8004ec4:	0022      	movs	r2, r4
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	3243      	adds	r2, #67	@ 0x43
 8004eca:	7812      	ldrb	r2, [r2, #0]
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	d001      	beq.n	8004ed4 <_printf_common+0x24>
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	6033      	str	r3, [r6, #0]
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	069b      	lsls	r3, r3, #26
 8004ed8:	d502      	bpl.n	8004ee0 <_printf_common+0x30>
 8004eda:	6833      	ldr	r3, [r6, #0]
 8004edc:	3302      	adds	r3, #2
 8004ede:	6033      	str	r3, [r6, #0]
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	0015      	movs	r5, r2
 8004ee6:	401d      	ands	r5, r3
 8004ee8:	421a      	tst	r2, r3
 8004eea:	d027      	beq.n	8004f3c <_printf_common+0x8c>
 8004eec:	0023      	movs	r3, r4
 8004eee:	3343      	adds	r3, #67	@ 0x43
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	4193      	sbcs	r3, r2
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	0692      	lsls	r2, r2, #26
 8004efa:	d430      	bmi.n	8004f5e <_printf_common+0xae>
 8004efc:	0022      	movs	r2, r4
 8004efe:	9901      	ldr	r1, [sp, #4]
 8004f00:	9800      	ldr	r0, [sp, #0]
 8004f02:	9d08      	ldr	r5, [sp, #32]
 8004f04:	3243      	adds	r2, #67	@ 0x43
 8004f06:	47a8      	blx	r5
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d025      	beq.n	8004f58 <_printf_common+0xa8>
 8004f0c:	2206      	movs	r2, #6
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	2500      	movs	r5, #0
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d105      	bne.n	8004f24 <_printf_common+0x74>
 8004f18:	6833      	ldr	r3, [r6, #0]
 8004f1a:	68e5      	ldr	r5, [r4, #12]
 8004f1c:	1aed      	subs	r5, r5, r3
 8004f1e:	43eb      	mvns	r3, r5
 8004f20:	17db      	asrs	r3, r3, #31
 8004f22:	401d      	ands	r5, r3
 8004f24:	68a3      	ldr	r3, [r4, #8]
 8004f26:	6922      	ldr	r2, [r4, #16]
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	dd01      	ble.n	8004f30 <_printf_common+0x80>
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	18ed      	adds	r5, r5, r3
 8004f30:	2600      	movs	r6, #0
 8004f32:	42b5      	cmp	r5, r6
 8004f34:	d120      	bne.n	8004f78 <_printf_common+0xc8>
 8004f36:	2000      	movs	r0, #0
 8004f38:	e010      	b.n	8004f5c <_printf_common+0xac>
 8004f3a:	3501      	adds	r5, #1
 8004f3c:	68e3      	ldr	r3, [r4, #12]
 8004f3e:	6832      	ldr	r2, [r6, #0]
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	42ab      	cmp	r3, r5
 8004f44:	ddd2      	ble.n	8004eec <_printf_common+0x3c>
 8004f46:	0022      	movs	r2, r4
 8004f48:	2301      	movs	r3, #1
 8004f4a:	9901      	ldr	r1, [sp, #4]
 8004f4c:	9800      	ldr	r0, [sp, #0]
 8004f4e:	9f08      	ldr	r7, [sp, #32]
 8004f50:	3219      	adds	r2, #25
 8004f52:	47b8      	blx	r7
 8004f54:	3001      	adds	r0, #1
 8004f56:	d1f0      	bne.n	8004f3a <_printf_common+0x8a>
 8004f58:	2001      	movs	r0, #1
 8004f5a:	4240      	negs	r0, r0
 8004f5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f5e:	2030      	movs	r0, #48	@ 0x30
 8004f60:	18e1      	adds	r1, r4, r3
 8004f62:	3143      	adds	r1, #67	@ 0x43
 8004f64:	7008      	strb	r0, [r1, #0]
 8004f66:	0021      	movs	r1, r4
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	3145      	adds	r1, #69	@ 0x45
 8004f6c:	7809      	ldrb	r1, [r1, #0]
 8004f6e:	18a2      	adds	r2, r4, r2
 8004f70:	3243      	adds	r2, #67	@ 0x43
 8004f72:	3302      	adds	r3, #2
 8004f74:	7011      	strb	r1, [r2, #0]
 8004f76:	e7c1      	b.n	8004efc <_printf_common+0x4c>
 8004f78:	0022      	movs	r2, r4
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	9901      	ldr	r1, [sp, #4]
 8004f7e:	9800      	ldr	r0, [sp, #0]
 8004f80:	9f08      	ldr	r7, [sp, #32]
 8004f82:	321a      	adds	r2, #26
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	d0e6      	beq.n	8004f58 <_printf_common+0xa8>
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7d1      	b.n	8004f32 <_printf_common+0x82>
	...

08004f90 <_printf_i>:
 8004f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f92:	b08b      	sub	sp, #44	@ 0x2c
 8004f94:	9206      	str	r2, [sp, #24]
 8004f96:	000a      	movs	r2, r1
 8004f98:	3243      	adds	r2, #67	@ 0x43
 8004f9a:	9307      	str	r3, [sp, #28]
 8004f9c:	9005      	str	r0, [sp, #20]
 8004f9e:	9203      	str	r2, [sp, #12]
 8004fa0:	7e0a      	ldrb	r2, [r1, #24]
 8004fa2:	000c      	movs	r4, r1
 8004fa4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004fa6:	2a78      	cmp	r2, #120	@ 0x78
 8004fa8:	d809      	bhi.n	8004fbe <_printf_i+0x2e>
 8004faa:	2a62      	cmp	r2, #98	@ 0x62
 8004fac:	d80b      	bhi.n	8004fc6 <_printf_i+0x36>
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	d100      	bne.n	8004fb4 <_printf_i+0x24>
 8004fb2:	e0bc      	b.n	800512e <_printf_i+0x19e>
 8004fb4:	497b      	ldr	r1, [pc, #492]	@ (80051a4 <_printf_i+0x214>)
 8004fb6:	9104      	str	r1, [sp, #16]
 8004fb8:	2a58      	cmp	r2, #88	@ 0x58
 8004fba:	d100      	bne.n	8004fbe <_printf_i+0x2e>
 8004fbc:	e090      	b.n	80050e0 <_printf_i+0x150>
 8004fbe:	0025      	movs	r5, r4
 8004fc0:	3542      	adds	r5, #66	@ 0x42
 8004fc2:	702a      	strb	r2, [r5, #0]
 8004fc4:	e022      	b.n	800500c <_printf_i+0x7c>
 8004fc6:	0010      	movs	r0, r2
 8004fc8:	3863      	subs	r0, #99	@ 0x63
 8004fca:	2815      	cmp	r0, #21
 8004fcc:	d8f7      	bhi.n	8004fbe <_printf_i+0x2e>
 8004fce:	f7fb f89b 	bl	8000108 <__gnu_thumb1_case_shi>
 8004fd2:	0016      	.short	0x0016
 8004fd4:	fff6001f 	.word	0xfff6001f
 8004fd8:	fff6fff6 	.word	0xfff6fff6
 8004fdc:	001ffff6 	.word	0x001ffff6
 8004fe0:	fff6fff6 	.word	0xfff6fff6
 8004fe4:	fff6fff6 	.word	0xfff6fff6
 8004fe8:	003600a1 	.word	0x003600a1
 8004fec:	fff60080 	.word	0xfff60080
 8004ff0:	00b2fff6 	.word	0x00b2fff6
 8004ff4:	0036fff6 	.word	0x0036fff6
 8004ff8:	fff6fff6 	.word	0xfff6fff6
 8004ffc:	0084      	.short	0x0084
 8004ffe:	0025      	movs	r5, r4
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	3542      	adds	r5, #66	@ 0x42
 8005004:	1d11      	adds	r1, r2, #4
 8005006:	6019      	str	r1, [r3, #0]
 8005008:	6813      	ldr	r3, [r2, #0]
 800500a:	702b      	strb	r3, [r5, #0]
 800500c:	2301      	movs	r3, #1
 800500e:	e0a0      	b.n	8005152 <_printf_i+0x1c2>
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	6809      	ldr	r1, [r1, #0]
 8005014:	1d02      	adds	r2, r0, #4
 8005016:	060d      	lsls	r5, r1, #24
 8005018:	d50b      	bpl.n	8005032 <_printf_i+0xa2>
 800501a:	6806      	ldr	r6, [r0, #0]
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	2e00      	cmp	r6, #0
 8005020:	da03      	bge.n	800502a <_printf_i+0x9a>
 8005022:	232d      	movs	r3, #45	@ 0x2d
 8005024:	9a03      	ldr	r2, [sp, #12]
 8005026:	4276      	negs	r6, r6
 8005028:	7013      	strb	r3, [r2, #0]
 800502a:	4b5e      	ldr	r3, [pc, #376]	@ (80051a4 <_printf_i+0x214>)
 800502c:	270a      	movs	r7, #10
 800502e:	9304      	str	r3, [sp, #16]
 8005030:	e018      	b.n	8005064 <_printf_i+0xd4>
 8005032:	6806      	ldr	r6, [r0, #0]
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	0649      	lsls	r1, r1, #25
 8005038:	d5f1      	bpl.n	800501e <_printf_i+0x8e>
 800503a:	b236      	sxth	r6, r6
 800503c:	e7ef      	b.n	800501e <_printf_i+0x8e>
 800503e:	6808      	ldr	r0, [r1, #0]
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	c940      	ldmia	r1!, {r6}
 8005044:	0605      	lsls	r5, r0, #24
 8005046:	d402      	bmi.n	800504e <_printf_i+0xbe>
 8005048:	0640      	lsls	r0, r0, #25
 800504a:	d500      	bpl.n	800504e <_printf_i+0xbe>
 800504c:	b2b6      	uxth	r6, r6
 800504e:	6019      	str	r1, [r3, #0]
 8005050:	4b54      	ldr	r3, [pc, #336]	@ (80051a4 <_printf_i+0x214>)
 8005052:	270a      	movs	r7, #10
 8005054:	9304      	str	r3, [sp, #16]
 8005056:	2a6f      	cmp	r2, #111	@ 0x6f
 8005058:	d100      	bne.n	800505c <_printf_i+0xcc>
 800505a:	3f02      	subs	r7, #2
 800505c:	0023      	movs	r3, r4
 800505e:	2200      	movs	r2, #0
 8005060:	3343      	adds	r3, #67	@ 0x43
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	60a3      	str	r3, [r4, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	db03      	blt.n	8005074 <_printf_i+0xe4>
 800506c:	2104      	movs	r1, #4
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	438a      	bics	r2, r1
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	2e00      	cmp	r6, #0
 8005076:	d102      	bne.n	800507e <_printf_i+0xee>
 8005078:	9d03      	ldr	r5, [sp, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00c      	beq.n	8005098 <_printf_i+0x108>
 800507e:	9d03      	ldr	r5, [sp, #12]
 8005080:	0030      	movs	r0, r6
 8005082:	0039      	movs	r1, r7
 8005084:	f7fb f8d0 	bl	8000228 <__aeabi_uidivmod>
 8005088:	9b04      	ldr	r3, [sp, #16]
 800508a:	3d01      	subs	r5, #1
 800508c:	5c5b      	ldrb	r3, [r3, r1]
 800508e:	702b      	strb	r3, [r5, #0]
 8005090:	0033      	movs	r3, r6
 8005092:	0006      	movs	r6, r0
 8005094:	429f      	cmp	r7, r3
 8005096:	d9f3      	bls.n	8005080 <_printf_i+0xf0>
 8005098:	2f08      	cmp	r7, #8
 800509a:	d109      	bne.n	80050b0 <_printf_i+0x120>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	07db      	lsls	r3, r3, #31
 80050a0:	d506      	bpl.n	80050b0 <_printf_i+0x120>
 80050a2:	6862      	ldr	r2, [r4, #4]
 80050a4:	6923      	ldr	r3, [r4, #16]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	dc02      	bgt.n	80050b0 <_printf_i+0x120>
 80050aa:	2330      	movs	r3, #48	@ 0x30
 80050ac:	3d01      	subs	r5, #1
 80050ae:	702b      	strb	r3, [r5, #0]
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	1b5b      	subs	r3, r3, r5
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	9b07      	ldr	r3, [sp, #28]
 80050b8:	0021      	movs	r1, r4
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	9805      	ldr	r0, [sp, #20]
 80050be:	9b06      	ldr	r3, [sp, #24]
 80050c0:	aa09      	add	r2, sp, #36	@ 0x24
 80050c2:	f7ff fef5 	bl	8004eb0 <_printf_common>
 80050c6:	3001      	adds	r0, #1
 80050c8:	d148      	bne.n	800515c <_printf_i+0x1cc>
 80050ca:	2001      	movs	r0, #1
 80050cc:	4240      	negs	r0, r0
 80050ce:	b00b      	add	sp, #44	@ 0x2c
 80050d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d2:	2220      	movs	r2, #32
 80050d4:	6809      	ldr	r1, [r1, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	6022      	str	r2, [r4, #0]
 80050da:	2278      	movs	r2, #120	@ 0x78
 80050dc:	4932      	ldr	r1, [pc, #200]	@ (80051a8 <_printf_i+0x218>)
 80050de:	9104      	str	r1, [sp, #16]
 80050e0:	0021      	movs	r1, r4
 80050e2:	3145      	adds	r1, #69	@ 0x45
 80050e4:	700a      	strb	r2, [r1, #0]
 80050e6:	6819      	ldr	r1, [r3, #0]
 80050e8:	6822      	ldr	r2, [r4, #0]
 80050ea:	c940      	ldmia	r1!, {r6}
 80050ec:	0610      	lsls	r0, r2, #24
 80050ee:	d402      	bmi.n	80050f6 <_printf_i+0x166>
 80050f0:	0650      	lsls	r0, r2, #25
 80050f2:	d500      	bpl.n	80050f6 <_printf_i+0x166>
 80050f4:	b2b6      	uxth	r6, r6
 80050f6:	6019      	str	r1, [r3, #0]
 80050f8:	07d3      	lsls	r3, r2, #31
 80050fa:	d502      	bpl.n	8005102 <_printf_i+0x172>
 80050fc:	2320      	movs	r3, #32
 80050fe:	4313      	orrs	r3, r2
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	2e00      	cmp	r6, #0
 8005104:	d001      	beq.n	800510a <_printf_i+0x17a>
 8005106:	2710      	movs	r7, #16
 8005108:	e7a8      	b.n	800505c <_printf_i+0xcc>
 800510a:	2220      	movs	r2, #32
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	4393      	bics	r3, r2
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	e7f8      	b.n	8005106 <_printf_i+0x176>
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	680d      	ldr	r5, [r1, #0]
 8005118:	1d10      	adds	r0, r2, #4
 800511a:	6949      	ldr	r1, [r1, #20]
 800511c:	6018      	str	r0, [r3, #0]
 800511e:	6813      	ldr	r3, [r2, #0]
 8005120:	062e      	lsls	r6, r5, #24
 8005122:	d501      	bpl.n	8005128 <_printf_i+0x198>
 8005124:	6019      	str	r1, [r3, #0]
 8005126:	e002      	b.n	800512e <_printf_i+0x19e>
 8005128:	066d      	lsls	r5, r5, #25
 800512a:	d5fb      	bpl.n	8005124 <_printf_i+0x194>
 800512c:	8019      	strh	r1, [r3, #0]
 800512e:	2300      	movs	r3, #0
 8005130:	9d03      	ldr	r5, [sp, #12]
 8005132:	6123      	str	r3, [r4, #16]
 8005134:	e7bf      	b.n	80050b6 <_printf_i+0x126>
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	1d11      	adds	r1, r2, #4
 800513a:	6019      	str	r1, [r3, #0]
 800513c:	6815      	ldr	r5, [r2, #0]
 800513e:	2100      	movs	r1, #0
 8005140:	0028      	movs	r0, r5
 8005142:	6862      	ldr	r2, [r4, #4]
 8005144:	f000 fad0 	bl	80056e8 <memchr>
 8005148:	2800      	cmp	r0, #0
 800514a:	d001      	beq.n	8005150 <_printf_i+0x1c0>
 800514c:	1b40      	subs	r0, r0, r5
 800514e:	6060      	str	r0, [r4, #4]
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	2300      	movs	r3, #0
 8005156:	9a03      	ldr	r2, [sp, #12]
 8005158:	7013      	strb	r3, [r2, #0]
 800515a:	e7ac      	b.n	80050b6 <_printf_i+0x126>
 800515c:	002a      	movs	r2, r5
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	9906      	ldr	r1, [sp, #24]
 8005162:	9805      	ldr	r0, [sp, #20]
 8005164:	9d07      	ldr	r5, [sp, #28]
 8005166:	47a8      	blx	r5
 8005168:	3001      	adds	r0, #1
 800516a:	d0ae      	beq.n	80050ca <_printf_i+0x13a>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	079b      	lsls	r3, r3, #30
 8005170:	d415      	bmi.n	800519e <_printf_i+0x20e>
 8005172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005174:	68e0      	ldr	r0, [r4, #12]
 8005176:	4298      	cmp	r0, r3
 8005178:	daa9      	bge.n	80050ce <_printf_i+0x13e>
 800517a:	0018      	movs	r0, r3
 800517c:	e7a7      	b.n	80050ce <_printf_i+0x13e>
 800517e:	0022      	movs	r2, r4
 8005180:	2301      	movs	r3, #1
 8005182:	9906      	ldr	r1, [sp, #24]
 8005184:	9805      	ldr	r0, [sp, #20]
 8005186:	9e07      	ldr	r6, [sp, #28]
 8005188:	3219      	adds	r2, #25
 800518a:	47b0      	blx	r6
 800518c:	3001      	adds	r0, #1
 800518e:	d09c      	beq.n	80050ca <_printf_i+0x13a>
 8005190:	3501      	adds	r5, #1
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	42ab      	cmp	r3, r5
 800519a:	dcf0      	bgt.n	800517e <_printf_i+0x1ee>
 800519c:	e7e9      	b.n	8005172 <_printf_i+0x1e2>
 800519e:	2500      	movs	r5, #0
 80051a0:	e7f7      	b.n	8005192 <_printf_i+0x202>
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	0800585d 	.word	0x0800585d
 80051a8:	0800586e 	.word	0x0800586e

080051ac <__sflush_r>:
 80051ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051ae:	220c      	movs	r2, #12
 80051b0:	5e8b      	ldrsh	r3, [r1, r2]
 80051b2:	0005      	movs	r5, r0
 80051b4:	000c      	movs	r4, r1
 80051b6:	071a      	lsls	r2, r3, #28
 80051b8:	d456      	bmi.n	8005268 <__sflush_r+0xbc>
 80051ba:	684a      	ldr	r2, [r1, #4]
 80051bc:	2a00      	cmp	r2, #0
 80051be:	dc02      	bgt.n	80051c6 <__sflush_r+0x1a>
 80051c0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80051c2:	2a00      	cmp	r2, #0
 80051c4:	dd4e      	ble.n	8005264 <__sflush_r+0xb8>
 80051c6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80051c8:	2f00      	cmp	r7, #0
 80051ca:	d04b      	beq.n	8005264 <__sflush_r+0xb8>
 80051cc:	2200      	movs	r2, #0
 80051ce:	2080      	movs	r0, #128	@ 0x80
 80051d0:	682e      	ldr	r6, [r5, #0]
 80051d2:	602a      	str	r2, [r5, #0]
 80051d4:	001a      	movs	r2, r3
 80051d6:	0140      	lsls	r0, r0, #5
 80051d8:	6a21      	ldr	r1, [r4, #32]
 80051da:	4002      	ands	r2, r0
 80051dc:	4203      	tst	r3, r0
 80051de:	d033      	beq.n	8005248 <__sflush_r+0x9c>
 80051e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	075b      	lsls	r3, r3, #29
 80051e6:	d506      	bpl.n	80051f6 <__sflush_r+0x4a>
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <__sflush_r+0x4a>
 80051f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051f4:	1ad2      	subs	r2, r2, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	0028      	movs	r0, r5
 80051fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80051fc:	6a21      	ldr	r1, [r4, #32]
 80051fe:	47b8      	blx	r7
 8005200:	89a2      	ldrh	r2, [r4, #12]
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d106      	bne.n	8005214 <__sflush_r+0x68>
 8005206:	6829      	ldr	r1, [r5, #0]
 8005208:	291d      	cmp	r1, #29
 800520a:	d846      	bhi.n	800529a <__sflush_r+0xee>
 800520c:	4b29      	ldr	r3, [pc, #164]	@ (80052b4 <__sflush_r+0x108>)
 800520e:	410b      	asrs	r3, r1
 8005210:	07db      	lsls	r3, r3, #31
 8005212:	d442      	bmi.n	800529a <__sflush_r+0xee>
 8005214:	2300      	movs	r3, #0
 8005216:	6063      	str	r3, [r4, #4]
 8005218:	6923      	ldr	r3, [r4, #16]
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	04d2      	lsls	r2, r2, #19
 800521e:	d505      	bpl.n	800522c <__sflush_r+0x80>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <__sflush_r+0x7e>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d100      	bne.n	800522c <__sflush_r+0x80>
 800522a:	6560      	str	r0, [r4, #84]	@ 0x54
 800522c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800522e:	602e      	str	r6, [r5, #0]
 8005230:	2900      	cmp	r1, #0
 8005232:	d017      	beq.n	8005264 <__sflush_r+0xb8>
 8005234:	0023      	movs	r3, r4
 8005236:	3344      	adds	r3, #68	@ 0x44
 8005238:	4299      	cmp	r1, r3
 800523a:	d002      	beq.n	8005242 <__sflush_r+0x96>
 800523c:	0028      	movs	r0, r5
 800523e:	f000 fa5f 	bl	8005700 <_free_r>
 8005242:	2300      	movs	r3, #0
 8005244:	6363      	str	r3, [r4, #52]	@ 0x34
 8005246:	e00d      	b.n	8005264 <__sflush_r+0xb8>
 8005248:	2301      	movs	r3, #1
 800524a:	0028      	movs	r0, r5
 800524c:	47b8      	blx	r7
 800524e:	0002      	movs	r2, r0
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d1c6      	bne.n	80051e2 <__sflush_r+0x36>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0c3      	beq.n	80051e2 <__sflush_r+0x36>
 800525a:	2b1d      	cmp	r3, #29
 800525c:	d001      	beq.n	8005262 <__sflush_r+0xb6>
 800525e:	2b16      	cmp	r3, #22
 8005260:	d11a      	bne.n	8005298 <__sflush_r+0xec>
 8005262:	602e      	str	r6, [r5, #0]
 8005264:	2000      	movs	r0, #0
 8005266:	e01e      	b.n	80052a6 <__sflush_r+0xfa>
 8005268:	690e      	ldr	r6, [r1, #16]
 800526a:	2e00      	cmp	r6, #0
 800526c:	d0fa      	beq.n	8005264 <__sflush_r+0xb8>
 800526e:	680f      	ldr	r7, [r1, #0]
 8005270:	600e      	str	r6, [r1, #0]
 8005272:	1bba      	subs	r2, r7, r6
 8005274:	9201      	str	r2, [sp, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	079b      	lsls	r3, r3, #30
 800527a:	d100      	bne.n	800527e <__sflush_r+0xd2>
 800527c:	694a      	ldr	r2, [r1, #20]
 800527e:	60a2      	str	r2, [r4, #8]
 8005280:	9b01      	ldr	r3, [sp, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	ddee      	ble.n	8005264 <__sflush_r+0xb8>
 8005286:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005288:	0032      	movs	r2, r6
 800528a:	001f      	movs	r7, r3
 800528c:	0028      	movs	r0, r5
 800528e:	9b01      	ldr	r3, [sp, #4]
 8005290:	6a21      	ldr	r1, [r4, #32]
 8005292:	47b8      	blx	r7
 8005294:	2800      	cmp	r0, #0
 8005296:	dc07      	bgt.n	80052a8 <__sflush_r+0xfc>
 8005298:	89a2      	ldrh	r2, [r4, #12]
 800529a:	2340      	movs	r3, #64	@ 0x40
 800529c:	2001      	movs	r0, #1
 800529e:	4313      	orrs	r3, r2
 80052a0:	b21b      	sxth	r3, r3
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	4240      	negs	r0, r0
 80052a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052a8:	9b01      	ldr	r3, [sp, #4]
 80052aa:	1836      	adds	r6, r6, r0
 80052ac:	1a1b      	subs	r3, r3, r0
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	e7e6      	b.n	8005280 <__sflush_r+0xd4>
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	dfbffffe 	.word	0xdfbffffe

080052b8 <_fflush_r>:
 80052b8:	690b      	ldr	r3, [r1, #16]
 80052ba:	b570      	push	{r4, r5, r6, lr}
 80052bc:	0005      	movs	r5, r0
 80052be:	000c      	movs	r4, r1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <_fflush_r+0x12>
 80052c4:	2500      	movs	r5, #0
 80052c6:	0028      	movs	r0, r5
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d004      	beq.n	80052d8 <_fflush_r+0x20>
 80052ce:	6a03      	ldr	r3, [r0, #32]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <_fflush_r+0x20>
 80052d4:	f7ff fb8e 	bl	80049f4 <__sinit>
 80052d8:	220c      	movs	r2, #12
 80052da:	5ea3      	ldrsh	r3, [r4, r2]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f1      	beq.n	80052c4 <_fflush_r+0xc>
 80052e0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052e2:	07d2      	lsls	r2, r2, #31
 80052e4:	d404      	bmi.n	80052f0 <_fflush_r+0x38>
 80052e6:	059b      	lsls	r3, r3, #22
 80052e8:	d402      	bmi.n	80052f0 <_fflush_r+0x38>
 80052ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ec:	f7ff fbf9 	bl	8004ae2 <__retarget_lock_acquire_recursive>
 80052f0:	0028      	movs	r0, r5
 80052f2:	0021      	movs	r1, r4
 80052f4:	f7ff ff5a 	bl	80051ac <__sflush_r>
 80052f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052fa:	0005      	movs	r5, r0
 80052fc:	07db      	lsls	r3, r3, #31
 80052fe:	d4e2      	bmi.n	80052c6 <_fflush_r+0xe>
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	059b      	lsls	r3, r3, #22
 8005304:	d4df      	bmi.n	80052c6 <_fflush_r+0xe>
 8005306:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005308:	f7ff fbec 	bl	8004ae4 <__retarget_lock_release_recursive>
 800530c:	e7db      	b.n	80052c6 <_fflush_r+0xe>
	...

08005310 <__malloc_lock>:
 8005310:	b510      	push	{r4, lr}
 8005312:	4802      	ldr	r0, [pc, #8]	@ (800531c <__malloc_lock+0xc>)
 8005314:	f7ff fbe5 	bl	8004ae2 <__retarget_lock_acquire_recursive>
 8005318:	bd10      	pop	{r4, pc}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	20000318 	.word	0x20000318

08005320 <__malloc_unlock>:
 8005320:	b510      	push	{r4, lr}
 8005322:	4802      	ldr	r0, [pc, #8]	@ (800532c <__malloc_unlock+0xc>)
 8005324:	f7ff fbde 	bl	8004ae4 <__retarget_lock_release_recursive>
 8005328:	bd10      	pop	{r4, pc}
 800532a:	46c0      	nop			@ (mov r8, r8)
 800532c:	20000318 	.word	0x20000318

08005330 <__sread>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	000c      	movs	r4, r1
 8005334:	250e      	movs	r5, #14
 8005336:	5f49      	ldrsh	r1, [r1, r5]
 8005338:	f000 f99c 	bl	8005674 <_read_r>
 800533c:	2800      	cmp	r0, #0
 800533e:	db03      	blt.n	8005348 <__sread+0x18>
 8005340:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005342:	181b      	adds	r3, r3, r0
 8005344:	6563      	str	r3, [r4, #84]	@ 0x54
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	4a02      	ldr	r2, [pc, #8]	@ (8005354 <__sread+0x24>)
 800534c:	4013      	ands	r3, r2
 800534e:	81a3      	strh	r3, [r4, #12]
 8005350:	e7f9      	b.n	8005346 <__sread+0x16>
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	ffffefff 	.word	0xffffefff

08005358 <__swrite>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	001f      	movs	r7, r3
 800535c:	898b      	ldrh	r3, [r1, #12]
 800535e:	0005      	movs	r5, r0
 8005360:	000c      	movs	r4, r1
 8005362:	0016      	movs	r6, r2
 8005364:	05db      	lsls	r3, r3, #23
 8005366:	d505      	bpl.n	8005374 <__swrite+0x1c>
 8005368:	230e      	movs	r3, #14
 800536a:	5ec9      	ldrsh	r1, [r1, r3]
 800536c:	2200      	movs	r2, #0
 800536e:	2302      	movs	r3, #2
 8005370:	f000 f96c 	bl	800564c <_lseek_r>
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	4a05      	ldr	r2, [pc, #20]	@ (800538c <__swrite+0x34>)
 8005378:	0028      	movs	r0, r5
 800537a:	4013      	ands	r3, r2
 800537c:	81a3      	strh	r3, [r4, #12]
 800537e:	0032      	movs	r2, r6
 8005380:	230e      	movs	r3, #14
 8005382:	5ee1      	ldrsh	r1, [r4, r3]
 8005384:	003b      	movs	r3, r7
 8005386:	f000 f99b 	bl	80056c0 <_write_r>
 800538a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800538c:	ffffefff 	.word	0xffffefff

08005390 <__sseek>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	000c      	movs	r4, r1
 8005394:	250e      	movs	r5, #14
 8005396:	5f49      	ldrsh	r1, [r1, r5]
 8005398:	f000 f958 	bl	800564c <_lseek_r>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	1c42      	adds	r2, r0, #1
 80053a0:	d103      	bne.n	80053aa <__sseek+0x1a>
 80053a2:	4a05      	ldr	r2, [pc, #20]	@ (80053b8 <__sseek+0x28>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
 80053aa:	2280      	movs	r2, #128	@ 0x80
 80053ac:	0152      	lsls	r2, r2, #5
 80053ae:	4313      	orrs	r3, r2
 80053b0:	81a3      	strh	r3, [r4, #12]
 80053b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80053b4:	e7f8      	b.n	80053a8 <__sseek+0x18>
 80053b6:	46c0      	nop			@ (mov r8, r8)
 80053b8:	ffffefff 	.word	0xffffefff

080053bc <__sclose>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	230e      	movs	r3, #14
 80053c0:	5ec9      	ldrsh	r1, [r1, r3]
 80053c2:	f000 f90d 	bl	80055e0 <_close_r>
 80053c6:	bd10      	pop	{r4, pc}

080053c8 <__swbuf_r>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	0006      	movs	r6, r0
 80053cc:	000d      	movs	r5, r1
 80053ce:	0014      	movs	r4, r2
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d004      	beq.n	80053de <__swbuf_r+0x16>
 80053d4:	6a03      	ldr	r3, [r0, #32]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <__swbuf_r+0x16>
 80053da:	f7ff fb0b 	bl	80049f4 <__sinit>
 80053de:	69a3      	ldr	r3, [r4, #24]
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	071b      	lsls	r3, r3, #28
 80053e6:	d502      	bpl.n	80053ee <__swbuf_r+0x26>
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <__swbuf_r+0x3a>
 80053ee:	0021      	movs	r1, r4
 80053f0:	0030      	movs	r0, r6
 80053f2:	f000 f82b 	bl	800544c <__swsetup_r>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d003      	beq.n	8005402 <__swbuf_r+0x3a>
 80053fa:	2501      	movs	r5, #1
 80053fc:	426d      	negs	r5, r5
 80053fe:	0028      	movs	r0, r5
 8005400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	6820      	ldr	r0, [r4, #0]
 8005406:	b2ef      	uxtb	r7, r5
 8005408:	1ac0      	subs	r0, r0, r3
 800540a:	6963      	ldr	r3, [r4, #20]
 800540c:	b2ed      	uxtb	r5, r5
 800540e:	4283      	cmp	r3, r0
 8005410:	dc05      	bgt.n	800541e <__swbuf_r+0x56>
 8005412:	0021      	movs	r1, r4
 8005414:	0030      	movs	r0, r6
 8005416:	f7ff ff4f 	bl	80052b8 <_fflush_r>
 800541a:	2800      	cmp	r0, #0
 800541c:	d1ed      	bne.n	80053fa <__swbuf_r+0x32>
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	3001      	adds	r0, #1
 8005422:	3b01      	subs	r3, #1
 8005424:	60a3      	str	r3, [r4, #8]
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	6022      	str	r2, [r4, #0]
 800542c:	701f      	strb	r7, [r3, #0]
 800542e:	6963      	ldr	r3, [r4, #20]
 8005430:	4283      	cmp	r3, r0
 8005432:	d004      	beq.n	800543e <__swbuf_r+0x76>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	07db      	lsls	r3, r3, #31
 8005438:	d5e1      	bpl.n	80053fe <__swbuf_r+0x36>
 800543a:	2d0a      	cmp	r5, #10
 800543c:	d1df      	bne.n	80053fe <__swbuf_r+0x36>
 800543e:	0021      	movs	r1, r4
 8005440:	0030      	movs	r0, r6
 8005442:	f7ff ff39 	bl	80052b8 <_fflush_r>
 8005446:	2800      	cmp	r0, #0
 8005448:	d0d9      	beq.n	80053fe <__swbuf_r+0x36>
 800544a:	e7d6      	b.n	80053fa <__swbuf_r+0x32>

0800544c <__swsetup_r>:
 800544c:	4b2d      	ldr	r3, [pc, #180]	@ (8005504 <__swsetup_r+0xb8>)
 800544e:	b570      	push	{r4, r5, r6, lr}
 8005450:	0005      	movs	r5, r0
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	000c      	movs	r4, r1
 8005456:	2800      	cmp	r0, #0
 8005458:	d004      	beq.n	8005464 <__swsetup_r+0x18>
 800545a:	6a03      	ldr	r3, [r0, #32]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <__swsetup_r+0x18>
 8005460:	f7ff fac8 	bl	80049f4 <__sinit>
 8005464:	230c      	movs	r3, #12
 8005466:	5ee2      	ldrsh	r2, [r4, r3]
 8005468:	0713      	lsls	r3, r2, #28
 800546a:	d423      	bmi.n	80054b4 <__swsetup_r+0x68>
 800546c:	06d3      	lsls	r3, r2, #27
 800546e:	d407      	bmi.n	8005480 <__swsetup_r+0x34>
 8005470:	2309      	movs	r3, #9
 8005472:	602b      	str	r3, [r5, #0]
 8005474:	2340      	movs	r3, #64	@ 0x40
 8005476:	2001      	movs	r0, #1
 8005478:	4313      	orrs	r3, r2
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	4240      	negs	r0, r0
 800547e:	e03a      	b.n	80054f6 <__swsetup_r+0xaa>
 8005480:	0752      	lsls	r2, r2, #29
 8005482:	d513      	bpl.n	80054ac <__swsetup_r+0x60>
 8005484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005486:	2900      	cmp	r1, #0
 8005488:	d008      	beq.n	800549c <__swsetup_r+0x50>
 800548a:	0023      	movs	r3, r4
 800548c:	3344      	adds	r3, #68	@ 0x44
 800548e:	4299      	cmp	r1, r3
 8005490:	d002      	beq.n	8005498 <__swsetup_r+0x4c>
 8005492:	0028      	movs	r0, r5
 8005494:	f000 f934 	bl	8005700 <_free_r>
 8005498:	2300      	movs	r3, #0
 800549a:	6363      	str	r3, [r4, #52]	@ 0x34
 800549c:	2224      	movs	r2, #36	@ 0x24
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	4393      	bics	r3, r2
 80054a2:	81a3      	strh	r3, [r4, #12]
 80054a4:	2300      	movs	r3, #0
 80054a6:	6063      	str	r3, [r4, #4]
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	6023      	str	r3, [r4, #0]
 80054ac:	2308      	movs	r3, #8
 80054ae:	89a2      	ldrh	r2, [r4, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10b      	bne.n	80054d2 <__swsetup_r+0x86>
 80054ba:	21a0      	movs	r1, #160	@ 0xa0
 80054bc:	2280      	movs	r2, #128	@ 0x80
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	0089      	lsls	r1, r1, #2
 80054c2:	0092      	lsls	r2, r2, #2
 80054c4:	400b      	ands	r3, r1
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d003      	beq.n	80054d2 <__swsetup_r+0x86>
 80054ca:	0021      	movs	r1, r4
 80054cc:	0028      	movs	r0, r5
 80054ce:	f000 f845 	bl	800555c <__smakebuf_r>
 80054d2:	230c      	movs	r3, #12
 80054d4:	5ee2      	ldrsh	r2, [r4, r3]
 80054d6:	2101      	movs	r1, #1
 80054d8:	0013      	movs	r3, r2
 80054da:	400b      	ands	r3, r1
 80054dc:	420a      	tst	r2, r1
 80054de:	d00b      	beq.n	80054f8 <__swsetup_r+0xac>
 80054e0:	2300      	movs	r3, #0
 80054e2:	60a3      	str	r3, [r4, #8]
 80054e4:	6963      	ldr	r3, [r4, #20]
 80054e6:	425b      	negs	r3, r3
 80054e8:	61a3      	str	r3, [r4, #24]
 80054ea:	2000      	movs	r0, #0
 80054ec:	6923      	ldr	r3, [r4, #16]
 80054ee:	4283      	cmp	r3, r0
 80054f0:	d101      	bne.n	80054f6 <__swsetup_r+0xaa>
 80054f2:	0613      	lsls	r3, r2, #24
 80054f4:	d4be      	bmi.n	8005474 <__swsetup_r+0x28>
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	0791      	lsls	r1, r2, #30
 80054fa:	d400      	bmi.n	80054fe <__swsetup_r+0xb2>
 80054fc:	6963      	ldr	r3, [r4, #20]
 80054fe:	60a3      	str	r3, [r4, #8]
 8005500:	e7f3      	b.n	80054ea <__swsetup_r+0x9e>
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	2000001c 	.word	0x2000001c

08005508 <__swhatbuf_r>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	000e      	movs	r6, r1
 800550c:	001d      	movs	r5, r3
 800550e:	230e      	movs	r3, #14
 8005510:	5ec9      	ldrsh	r1, [r1, r3]
 8005512:	0014      	movs	r4, r2
 8005514:	b096      	sub	sp, #88	@ 0x58
 8005516:	2900      	cmp	r1, #0
 8005518:	da0c      	bge.n	8005534 <__swhatbuf_r+0x2c>
 800551a:	89b2      	ldrh	r2, [r6, #12]
 800551c:	2380      	movs	r3, #128	@ 0x80
 800551e:	0011      	movs	r1, r2
 8005520:	4019      	ands	r1, r3
 8005522:	421a      	tst	r2, r3
 8005524:	d114      	bne.n	8005550 <__swhatbuf_r+0x48>
 8005526:	2380      	movs	r3, #128	@ 0x80
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	2000      	movs	r0, #0
 800552c:	6029      	str	r1, [r5, #0]
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	b016      	add	sp, #88	@ 0x58
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	466a      	mov	r2, sp
 8005536:	f000 f865 	bl	8005604 <_fstat_r>
 800553a:	2800      	cmp	r0, #0
 800553c:	dbed      	blt.n	800551a <__swhatbuf_r+0x12>
 800553e:	23f0      	movs	r3, #240	@ 0xf0
 8005540:	9901      	ldr	r1, [sp, #4]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	4019      	ands	r1, r3
 8005546:	4b04      	ldr	r3, [pc, #16]	@ (8005558 <__swhatbuf_r+0x50>)
 8005548:	18c9      	adds	r1, r1, r3
 800554a:	424b      	negs	r3, r1
 800554c:	4159      	adcs	r1, r3
 800554e:	e7ea      	b.n	8005526 <__swhatbuf_r+0x1e>
 8005550:	2100      	movs	r1, #0
 8005552:	2340      	movs	r3, #64	@ 0x40
 8005554:	e7e9      	b.n	800552a <__swhatbuf_r+0x22>
 8005556:	46c0      	nop			@ (mov r8, r8)
 8005558:	ffffe000 	.word	0xffffe000

0800555c <__smakebuf_r>:
 800555c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555e:	2602      	movs	r6, #2
 8005560:	898b      	ldrh	r3, [r1, #12]
 8005562:	0005      	movs	r5, r0
 8005564:	000c      	movs	r4, r1
 8005566:	b085      	sub	sp, #20
 8005568:	4233      	tst	r3, r6
 800556a:	d007      	beq.n	800557c <__smakebuf_r+0x20>
 800556c:	0023      	movs	r3, r4
 800556e:	3347      	adds	r3, #71	@ 0x47
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	2301      	movs	r3, #1
 8005576:	6163      	str	r3, [r4, #20]
 8005578:	b005      	add	sp, #20
 800557a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800557c:	ab03      	add	r3, sp, #12
 800557e:	aa02      	add	r2, sp, #8
 8005580:	f7ff ffc2 	bl	8005508 <__swhatbuf_r>
 8005584:	9f02      	ldr	r7, [sp, #8]
 8005586:	9001      	str	r0, [sp, #4]
 8005588:	0039      	movs	r1, r7
 800558a:	0028      	movs	r0, r5
 800558c:	f7ff fc10 	bl	8004db0 <_malloc_r>
 8005590:	2800      	cmp	r0, #0
 8005592:	d108      	bne.n	80055a6 <__smakebuf_r+0x4a>
 8005594:	220c      	movs	r2, #12
 8005596:	5ea3      	ldrsh	r3, [r4, r2]
 8005598:	059a      	lsls	r2, r3, #22
 800559a:	d4ed      	bmi.n	8005578 <__smakebuf_r+0x1c>
 800559c:	2203      	movs	r2, #3
 800559e:	4393      	bics	r3, r2
 80055a0:	431e      	orrs	r6, r3
 80055a2:	81a6      	strh	r6, [r4, #12]
 80055a4:	e7e2      	b.n	800556c <__smakebuf_r+0x10>
 80055a6:	2380      	movs	r3, #128	@ 0x80
 80055a8:	89a2      	ldrh	r2, [r4, #12]
 80055aa:	6020      	str	r0, [r4, #0]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	9b03      	ldr	r3, [sp, #12]
 80055b2:	6120      	str	r0, [r4, #16]
 80055b4:	6167      	str	r7, [r4, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <__smakebuf_r+0x78>
 80055ba:	0028      	movs	r0, r5
 80055bc:	230e      	movs	r3, #14
 80055be:	5ee1      	ldrsh	r1, [r4, r3]
 80055c0:	f000 f832 	bl	8005628 <_isatty_r>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d005      	beq.n	80055d4 <__smakebuf_r+0x78>
 80055c8:	2303      	movs	r3, #3
 80055ca:	89a2      	ldrh	r2, [r4, #12]
 80055cc:	439a      	bics	r2, r3
 80055ce:	3b02      	subs	r3, #2
 80055d0:	4313      	orrs	r3, r2
 80055d2:	81a3      	strh	r3, [r4, #12]
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	9a01      	ldr	r2, [sp, #4]
 80055d8:	4313      	orrs	r3, r2
 80055da:	81a3      	strh	r3, [r4, #12]
 80055dc:	e7cc      	b.n	8005578 <__smakebuf_r+0x1c>
	...

080055e0 <_close_r>:
 80055e0:	2300      	movs	r3, #0
 80055e2:	b570      	push	{r4, r5, r6, lr}
 80055e4:	4d06      	ldr	r5, [pc, #24]	@ (8005600 <_close_r+0x20>)
 80055e6:	0004      	movs	r4, r0
 80055e8:	0008      	movs	r0, r1
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	f7fb fb7b 	bl	8000ce6 <_close>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d103      	bne.n	80055fc <_close_r+0x1c>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d000      	beq.n	80055fc <_close_r+0x1c>
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	bd70      	pop	{r4, r5, r6, pc}
 80055fe:	46c0      	nop			@ (mov r8, r8)
 8005600:	20000324 	.word	0x20000324

08005604 <_fstat_r>:
 8005604:	2300      	movs	r3, #0
 8005606:	b570      	push	{r4, r5, r6, lr}
 8005608:	4d06      	ldr	r5, [pc, #24]	@ (8005624 <_fstat_r+0x20>)
 800560a:	0004      	movs	r4, r0
 800560c:	0008      	movs	r0, r1
 800560e:	0011      	movs	r1, r2
 8005610:	602b      	str	r3, [r5, #0]
 8005612:	f7fb fb72 	bl	8000cfa <_fstat>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d103      	bne.n	8005622 <_fstat_r+0x1e>
 800561a:	682b      	ldr	r3, [r5, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d000      	beq.n	8005622 <_fstat_r+0x1e>
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	20000324 	.word	0x20000324

08005628 <_isatty_r>:
 8005628:	2300      	movs	r3, #0
 800562a:	b570      	push	{r4, r5, r6, lr}
 800562c:	4d06      	ldr	r5, [pc, #24]	@ (8005648 <_isatty_r+0x20>)
 800562e:	0004      	movs	r4, r0
 8005630:	0008      	movs	r0, r1
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	f7fb fb6f 	bl	8000d16 <_isatty>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d103      	bne.n	8005644 <_isatty_r+0x1c>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d000      	beq.n	8005644 <_isatty_r+0x1c>
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	bd70      	pop	{r4, r5, r6, pc}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	20000324 	.word	0x20000324

0800564c <_lseek_r>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	0004      	movs	r4, r0
 8005650:	0008      	movs	r0, r1
 8005652:	0011      	movs	r1, r2
 8005654:	001a      	movs	r2, r3
 8005656:	2300      	movs	r3, #0
 8005658:	4d05      	ldr	r5, [pc, #20]	@ (8005670 <_lseek_r+0x24>)
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	f7fb fb64 	bl	8000d28 <_lseek>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d103      	bne.n	800566c <_lseek_r+0x20>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d000      	beq.n	800566c <_lseek_r+0x20>
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	bd70      	pop	{r4, r5, r6, pc}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	20000324 	.word	0x20000324

08005674 <_read_r>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	0004      	movs	r4, r0
 8005678:	0008      	movs	r0, r1
 800567a:	0011      	movs	r1, r2
 800567c:	001a      	movs	r2, r3
 800567e:	2300      	movs	r3, #0
 8005680:	4d05      	ldr	r5, [pc, #20]	@ (8005698 <_read_r+0x24>)
 8005682:	602b      	str	r3, [r5, #0]
 8005684:	f7fb faf6 	bl	8000c74 <_read>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d103      	bne.n	8005694 <_read_r+0x20>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d000      	beq.n	8005694 <_read_r+0x20>
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	bd70      	pop	{r4, r5, r6, pc}
 8005696:	46c0      	nop			@ (mov r8, r8)
 8005698:	20000324 	.word	0x20000324

0800569c <_sbrk_r>:
 800569c:	2300      	movs	r3, #0
 800569e:	b570      	push	{r4, r5, r6, lr}
 80056a0:	4d06      	ldr	r5, [pc, #24]	@ (80056bc <_sbrk_r+0x20>)
 80056a2:	0004      	movs	r4, r0
 80056a4:	0008      	movs	r0, r1
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fb fb4a 	bl	8000d40 <_sbrk>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d103      	bne.n	80056b8 <_sbrk_r+0x1c>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d000      	beq.n	80056b8 <_sbrk_r+0x1c>
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	20000324 	.word	0x20000324

080056c0 <_write_r>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	0004      	movs	r4, r0
 80056c4:	0008      	movs	r0, r1
 80056c6:	0011      	movs	r1, r2
 80056c8:	001a      	movs	r2, r3
 80056ca:	2300      	movs	r3, #0
 80056cc:	4d05      	ldr	r5, [pc, #20]	@ (80056e4 <_write_r+0x24>)
 80056ce:	602b      	str	r3, [r5, #0]
 80056d0:	f7fb faed 	bl	8000cae <_write>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d103      	bne.n	80056e0 <_write_r+0x20>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d000      	beq.n	80056e0 <_write_r+0x20>
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	bd70      	pop	{r4, r5, r6, pc}
 80056e2:	46c0      	nop			@ (mov r8, r8)
 80056e4:	20000324 	.word	0x20000324

080056e8 <memchr>:
 80056e8:	b2c9      	uxtb	r1, r1
 80056ea:	1882      	adds	r2, r0, r2
 80056ec:	4290      	cmp	r0, r2
 80056ee:	d101      	bne.n	80056f4 <memchr+0xc>
 80056f0:	2000      	movs	r0, #0
 80056f2:	4770      	bx	lr
 80056f4:	7803      	ldrb	r3, [r0, #0]
 80056f6:	428b      	cmp	r3, r1
 80056f8:	d0fb      	beq.n	80056f2 <memchr+0xa>
 80056fa:	3001      	adds	r0, #1
 80056fc:	e7f6      	b.n	80056ec <memchr+0x4>
	...

08005700 <_free_r>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	0005      	movs	r5, r0
 8005704:	1e0c      	subs	r4, r1, #0
 8005706:	d010      	beq.n	800572a <_free_r+0x2a>
 8005708:	3c04      	subs	r4, #4
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	da00      	bge.n	8005712 <_free_r+0x12>
 8005710:	18e4      	adds	r4, r4, r3
 8005712:	0028      	movs	r0, r5
 8005714:	f7ff fdfc 	bl	8005310 <__malloc_lock>
 8005718:	4a1d      	ldr	r2, [pc, #116]	@ (8005790 <_free_r+0x90>)
 800571a:	6813      	ldr	r3, [r2, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d105      	bne.n	800572c <_free_r+0x2c>
 8005720:	6063      	str	r3, [r4, #4]
 8005722:	6014      	str	r4, [r2, #0]
 8005724:	0028      	movs	r0, r5
 8005726:	f7ff fdfb 	bl	8005320 <__malloc_unlock>
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	42a3      	cmp	r3, r4
 800572e:	d908      	bls.n	8005742 <_free_r+0x42>
 8005730:	6820      	ldr	r0, [r4, #0]
 8005732:	1821      	adds	r1, r4, r0
 8005734:	428b      	cmp	r3, r1
 8005736:	d1f3      	bne.n	8005720 <_free_r+0x20>
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	1809      	adds	r1, r1, r0
 800573e:	6021      	str	r1, [r4, #0]
 8005740:	e7ee      	b.n	8005720 <_free_r+0x20>
 8005742:	001a      	movs	r2, r3
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <_free_r+0x4e>
 800574a:	42a3      	cmp	r3, r4
 800574c:	d9f9      	bls.n	8005742 <_free_r+0x42>
 800574e:	6811      	ldr	r1, [r2, #0]
 8005750:	1850      	adds	r0, r2, r1
 8005752:	42a0      	cmp	r0, r4
 8005754:	d10b      	bne.n	800576e <_free_r+0x6e>
 8005756:	6820      	ldr	r0, [r4, #0]
 8005758:	1809      	adds	r1, r1, r0
 800575a:	1850      	adds	r0, r2, r1
 800575c:	6011      	str	r1, [r2, #0]
 800575e:	4283      	cmp	r3, r0
 8005760:	d1e0      	bne.n	8005724 <_free_r+0x24>
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	1841      	adds	r1, r0, r1
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	6053      	str	r3, [r2, #4]
 800576c:	e7da      	b.n	8005724 <_free_r+0x24>
 800576e:	42a0      	cmp	r0, r4
 8005770:	d902      	bls.n	8005778 <_free_r+0x78>
 8005772:	230c      	movs	r3, #12
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	e7d5      	b.n	8005724 <_free_r+0x24>
 8005778:	6820      	ldr	r0, [r4, #0]
 800577a:	1821      	adds	r1, r4, r0
 800577c:	428b      	cmp	r3, r1
 800577e:	d103      	bne.n	8005788 <_free_r+0x88>
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	1809      	adds	r1, r1, r0
 8005786:	6021      	str	r1, [r4, #0]
 8005788:	6063      	str	r3, [r4, #4]
 800578a:	6054      	str	r4, [r2, #4]
 800578c:	e7ca      	b.n	8005724 <_free_r+0x24>
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	20000320 	.word	0x20000320

08005794 <_init>:
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579a:	bc08      	pop	{r3}
 800579c:	469e      	mov	lr, r3
 800579e:	4770      	bx	lr

080057a0 <_fini>:
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a2:	46c0      	nop			@ (mov r8, r8)
 80057a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a6:	bc08      	pop	{r3}
 80057a8:	469e      	mov	lr, r3
 80057aa:	4770      	bx	lr
