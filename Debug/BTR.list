
BTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007544  08007544  00008544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007608  08007608  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007608  08007608  00008608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007610  08007610  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007610  08007610  00008610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007614  08007614  00008614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007618  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000068  08007680  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08007680  000093c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012991  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf0  00000000  00000000  0001ba21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf2  00000000  00000000  0001f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016de3  00000000  00000000  000204ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e95  00000000  00000000  0003729d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088142  00000000  00000000  0004c132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4274  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f8  00000000  00000000  000d42b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d85b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800752c 	.word	0x0800752c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800752c 	.word	0x0800752c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	@ (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	@ (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4699      	mov	r9, r3
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	469c      	mov	ip, r3
 8000452:	0413      	lsls	r3, r2, #16
 8000454:	4647      	mov	r7, r8
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0404      	lsls	r4, r0, #16
 8000460:	0c24      	lsrs	r4, r4, #16
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	0c10      	lsrs	r0, r2, #16
 8000468:	434b      	muls	r3, r1
 800046a:	4365      	muls	r5, r4
 800046c:	4341      	muls	r1, r0
 800046e:	4360      	muls	r0, r4
 8000470:	0c2c      	lsrs	r4, r5, #16
 8000472:	18c0      	adds	r0, r0, r3
 8000474:	1824      	adds	r4, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	42a3      	cmp	r3, r4
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4356      	muls	r6, r2
 800048a:	0c23      	lsrs	r3, r4, #16
 800048c:	042d      	lsls	r5, r5, #16
 800048e:	0c2d      	lsrs	r5, r5, #16
 8000490:	1989      	adds	r1, r1, r6
 8000492:	4463      	add	r3, ip
 8000494:	0424      	lsls	r4, r4, #16
 8000496:	1960      	adds	r0, r4, r5
 8000498:	18c9      	adds	r1, r1, r3
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8d8 	bl	8000678 <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8d3 	bl	8000678 <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__clzsi2>:
 800063c:	211c      	movs	r1, #28
 800063e:	2301      	movs	r3, #1
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	4298      	cmp	r0, r3
 8000644:	d301      	bcc.n	800064a <__clzsi2+0xe>
 8000646:	0c00      	lsrs	r0, r0, #16
 8000648:	3910      	subs	r1, #16
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	4298      	cmp	r0, r3
 800064e:	d301      	bcc.n	8000654 <__clzsi2+0x18>
 8000650:	0a00      	lsrs	r0, r0, #8
 8000652:	3908      	subs	r1, #8
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	4298      	cmp	r0, r3
 8000658:	d301      	bcc.n	800065e <__clzsi2+0x22>
 800065a:	0900      	lsrs	r0, r0, #4
 800065c:	3904      	subs	r1, #4
 800065e:	a202      	add	r2, pc, #8	@ (adr r2, 8000668 <__clzsi2+0x2c>)
 8000660:	5c10      	ldrb	r0, [r2, r0]
 8000662:	1840      	adds	r0, r0, r1
 8000664:	4770      	bx	lr
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	02020304 	.word	0x02020304
 800066c:	01010101 	.word	0x01010101
	...

08000678 <__clzdi2>:
 8000678:	b510      	push	{r4, lr}
 800067a:	2900      	cmp	r1, #0
 800067c:	d103      	bne.n	8000686 <__clzdi2+0xe>
 800067e:	f7ff ffdd 	bl	800063c <__clzsi2>
 8000682:	3020      	adds	r0, #32
 8000684:	e002      	b.n	800068c <__clzdi2+0x14>
 8000686:	0008      	movs	r0, r1
 8000688:	f7ff ffd8 	bl	800063c <__clzsi2>
 800068c:	bd10      	pop	{r4, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)

08000690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b08b      	sub	sp, #44	@ 0x2c
 8000694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	2414      	movs	r4, #20
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2314      	movs	r3, #20
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f006 f8b7 	bl	8006814 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b61      	ldr	r3, [pc, #388]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006aa:	4b60      	ldr	r3, [pc, #384]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006ac:	2104      	movs	r1, #4
 80006ae:	430a      	orrs	r2, r1
 80006b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006b2:	4b5e      	ldr	r3, [pc, #376]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006b6:	2204      	movs	r2, #4
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	4b5b      	ldr	r3, [pc, #364]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006c2:	4b5a      	ldr	r3, [pc, #360]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	430a      	orrs	r2, r1
 80006c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ca:	4b58      	ldr	r3, [pc, #352]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b55      	ldr	r3, [pc, #340]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006da:	4b54      	ldr	r3, [pc, #336]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006dc:	2101      	movs	r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006e2:	4b52      	ldr	r3, [pc, #328]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006e6:	2201      	movs	r2, #1
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b4f      	ldr	r3, [pc, #316]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006f2:	4b4e      	ldr	r3, [pc, #312]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006f4:	2102      	movs	r1, #2
 80006f6:	430a      	orrs	r2, r1
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006fa:	4b4c      	ldr	r3, [pc, #304]	@ (800082c <MX_GPIO_Init+0x19c>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006fe:	2202      	movs	r2, #2
 8000700:	4013      	ands	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CapteurUs1Trig_Pin|cd3_Pin, GPIO_PIN_RESET);
 8000706:	2382      	movs	r3, #130	@ 0x82
 8000708:	0159      	lsls	r1, r3, #5
 800070a:	23a0      	movs	r3, #160	@ 0xa0
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	2200      	movs	r2, #0
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fb00 	bl	8001d16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CapteurUs2Trig_GPIO_Port, CapteurUs2Trig_Pin, GPIO_PIN_RESET);
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	015b      	lsls	r3, r3, #5
 800071a:	4845      	ldr	r0, [pc, #276]	@ (8000830 <MX_GPIO_Init+0x1a0>)
 800071c:	2200      	movs	r2, #0
 800071e:	0019      	movs	r1, r3
 8000720:	f001 faf9 	bl	8001d16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin|Mot1_Ctrl2_Pin|Mot2_Ctrl1_Pin|Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 8000724:	23f0      	movs	r3, #240	@ 0xf0
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4842      	ldr	r0, [pc, #264]	@ (8000834 <MX_GPIO_Init+0x1a4>)
 800072a:	2200      	movs	r2, #0
 800072c:	0019      	movs	r1, r3
 800072e:	f001 faf2 	bl	8001d16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2280      	movs	r2, #128	@ 0x80
 8000736:	0192      	lsls	r2, r2, #6
 8000738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2284      	movs	r2, #132	@ 0x84
 800073e:	0392      	lsls	r2, r2, #14
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000748:	193b      	adds	r3, r7, r4
 800074a:	4a3a      	ldr	r2, [pc, #232]	@ (8000834 <MX_GPIO_Init+0x1a4>)
 800074c:	0019      	movs	r1, r3
 800074e:	0010      	movs	r0, r2
 8000750:	f001 f946 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CapteurUs1Echo_Pin|cd2_Pin;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2282      	movs	r2, #130	@ 0x82
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	22c4      	movs	r2, #196	@ 0xc4
 8000760:	0392      	lsls	r2, r2, #14
 8000762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	193a      	adds	r2, r7, r4
 800076c:	23a0      	movs	r3, #160	@ 0xa0
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f001 f934 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CapteurUs1Trig_Pin|cd3_Pin;
 8000778:	0021      	movs	r1, r4
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2282      	movs	r2, #130	@ 0x82
 800077e:	0152      	lsls	r2, r2, #5
 8000780:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	000c      	movs	r4, r1
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2201      	movs	r2, #1
 8000788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	193a      	adds	r2, r7, r4
 8000798:	23a0      	movs	r3, #160	@ 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 f91e 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CapteurUs2Trig_Pin;
 80007a4:	0021      	movs	r1, r4
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2280      	movs	r2, #128	@ 0x80
 80007aa:	0152      	lsls	r2, r2, #5
 80007ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	000c      	movs	r4, r1
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	2201      	movs	r2, #1
 80007b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CapteurUs2Trig_GPIO_Port, &GPIO_InitStruct);
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000830 <MX_GPIO_Init+0x1a0>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f001 f909 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|Mot1_Enc_A_Pin|Mot1_Enc_B_Pin;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	4a19      	ldr	r2, [pc, #100]	@ (8000838 <MX_GPIO_Init+0x1a8>)
 80007d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <MX_GPIO_Init+0x1a0>)
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f001 f8fa 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Mot1_Ctrl1_Pin|Mot1_Ctrl2_Pin|Mot2_Ctrl1_Pin|Mot2_Ctrl2_Pin;
 80007ec:	0021      	movs	r1, r4
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	22f0      	movs	r2, #240	@ 0xf0
 80007f2:	0092      	lsls	r2, r2, #2
 80007f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2201      	movs	r2, #1
 80007fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	187b      	adds	r3, r7, r1
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <MX_GPIO_Init+0x1a4>)
 800080c:	0019      	movs	r1, r3
 800080e:	0010      	movs	r0, r2
 8000810:	f001 f8e6 	bl	80019e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2007      	movs	r0, #7
 800081a:	f001 f81b 	bl	8001854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800081e:	2007      	movs	r0, #7
 8000820:	f001 f82d 	bl	800187e <HAL_NVIC_EnableIRQ>

}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b00b      	add	sp, #44	@ 0x2c
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	50000400 	.word	0x50000400
 8000834:	50000800 	.word	0x50000800
 8000838:	00002018 	.word	0x00002018

0800083c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_I2C1_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <MX_I2C1_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_I2C1_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	@ (80008b8 <MX_I2C1_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_I2C1_Init+0x74>)
 8000854:	2201      	movs	r2, #1
 8000856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_I2C1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_I2C1_Init+0x74>)
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fa85 	bl	8001d88 <HAL_I2C_Init>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000882:	f000 faa7 	bl	8000dd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000886:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <MX_I2C1_Init+0x74>)
 8000888:	2100      	movs	r1, #0
 800088a:	0018      	movs	r0, r3
 800088c:	f002 fdaa 	bl	80033e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000894:	f000 fa9e 	bl	8000dd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <MX_I2C1_Init+0x74>)
 800089a:	2100      	movs	r1, #0
 800089c:	0018      	movs	r0, r3
 800089e:	f002 fded 	bl	800347c <HAL_I2CEx_ConfigDigitalFilter>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 fa95 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000084 	.word	0x20000084
 80008b4:	40005400 	.word	0x40005400
 80008b8:	00503d58 	.word	0x00503d58

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b089      	sub	sp, #36	@ 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	240c      	movs	r4, #12
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	2314      	movs	r3, #20
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f005 ffa0 	bl	8006814 <memset>
  if(i2cHandle->Instance==I2C1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a1c      	ldr	r2, [pc, #112]	@ (800094c <HAL_I2C_MspInit+0x90>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d132      	bne.n	8000944 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <HAL_I2C_MspInit+0x94>)
 80008e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <HAL_I2C_MspInit+0x94>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	430a      	orrs	r2, r1
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <HAL_I2C_MspInit+0x94>)
 80008ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ee:	2201      	movs	r2, #1
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	22c0      	movs	r2, #192	@ 0xc0
 80008fa:	00d2      	lsls	r2, r2, #3
 80008fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fe:	0021      	movs	r1, r4
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2212      	movs	r2, #18
 8000904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2203      	movs	r2, #3
 8000910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2206      	movs	r2, #6
 8000916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	187a      	adds	r2, r7, r1
 800091a:	23a0      	movs	r3, #160	@ 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f001 f85d 	bl	80019e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000926:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <HAL_I2C_MspInit+0x94>)
 8000928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <HAL_I2C_MspInit+0x94>)
 800092c:	2180      	movs	r1, #128	@ 0x80
 800092e:	0389      	lsls	r1, r1, #14
 8000930:	430a      	orrs	r2, r1
 8000932:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2017      	movs	r0, #23
 800093a:	f000 ff8b 	bl	8001854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800093e:	2017      	movs	r0, #23
 8000940:	f000 ff9d 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b009      	add	sp, #36	@ 0x24
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	40005400 	.word	0x40005400
 8000950:	40021000 	.word	0x40021000

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fe3b 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f85d 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f7ff fe95 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000966:	f000 fd8f 	bl	8001488 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800096a:	f000 fb59 	bl	8001020 <MX_TIM2_Init>
  MX_TIM3_Init();
 800096e:	f000 fbbb 	bl	80010e8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000972:	f000 fc41 	bl	80011f8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000976:	f000 fc7b 	bl	8001270 <MX_TIM7_Init>
  MX_I2C1_Init();
 800097a:	f7ff ff5f 	bl	800083c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800097e:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <main+0xac>)
 8000980:	2108      	movs	r1, #8
 8000982:	0018      	movs	r0, r3
 8000984:	f003 fe9e 	bl	80046c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000988:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <main+0xac>)
 800098a:	210c      	movs	r1, #12
 800098c:	0018      	movs	r0, r3
 800098e:	f003 fe99 	bl	80046c4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <main+0xb0>)
 8000994:	0018      	movs	r0, r3
 8000996:	f003 fdfb 	bl	8004590 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <main+0xb4>)
 800099c:	213c      	movs	r1, #60	@ 0x3c
 800099e:	0018      	movs	r0, r3
 80009a0:	f003 ffc2 	bl	8004928 <HAL_TIM_Encoder_Start>
  HAL_I2C_Init(&hi2c1);
 80009a4:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <main+0xb8>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 f9ee 	bl	8001d88 <HAL_I2C_Init>
  HAL_Delay(100);
 80009ac:	2064      	movs	r0, #100	@ 0x64
 80009ae:	f000 fe81 	bl	80016b4 <HAL_Delay>

  //Initialisation MMA


  Motors_SetDirection(NEUTRAL);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 f8e6 	bl	8000b84 <Motors_SetDirection>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("debutwhile");
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <main+0xbc>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f005 ff1a 	bl	80067f4 <iprintf>
  MMA8451_Init();
 80009c0:	f000 f9cc 	bl	8000d5c <MMA8451_Init>
#endif

#ifdef MMA8451Q

    //MMA8451_ReadXYZ(&x, &y, &z);
	if(cpt==10){
 80009c4:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <main+0xc0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b0a      	cmp	r3, #10
 80009ca:	d104      	bne.n	80009d6 <main+0x82>
		MMA8451_Print();
 80009cc:	f000 f9e6 	bl	8000d9c <MMA8451_Print>
		cpt=0;
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <main+0xc0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
	}

	uint8_t test_reg = MMA8451_ReadRegister(0x0C);  // Lire la valeur du registre WHO_AM_I (0x0C)
 80009d6:	200c      	movs	r0, #12
 80009d8:	f000 f99e 	bl	8000d18 <MMA8451_ReadRegister>
 80009dc:	0003      	movs	r3, r0
 80009de:	001a      	movs	r2, r3
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, &test_reg, 1, HAL_MAX_DELAY);
 80009e4:	2301      	movs	r3, #1
 80009e6:	425b      	negs	r3, r3
 80009e8:	1df9      	adds	r1, r7, #7
 80009ea:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <main+0xc4>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	f004 fd8d 	bl	800550c <HAL_UART_Transmit>

	HAL_Delay(500);
 80009f2:	23fa      	movs	r3, #250	@ 0xfa
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fe5c 	bl	80016b4 <HAL_Delay>
  {
 80009fc:	e7e2      	b.n	80009c4 <main+0x70>
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	2000012c 	.word	0x2000012c
 8000a04:	200001ac 	.word	0x200001ac
 8000a08:	200000ec 	.word	0x200000ec
 8000a0c:	20000084 	.word	0x20000084
 8000a10:	08007544 	.word	0x08007544
 8000a14:	200000dc 	.word	0x200000dc
 8000a18:	200001ec 	.word	0x200001ec

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b09f      	sub	sp, #124	@ 0x7c
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	2440      	movs	r4, #64	@ 0x40
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	0018      	movs	r0, r3
 8000a28:	2338      	movs	r3, #56	@ 0x38
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f005 fef1 	bl	8006814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a32:	232c      	movs	r3, #44	@ 0x2c
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	2314      	movs	r3, #20
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f005 fee9 	bl	8006814 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	0018      	movs	r0, r3
 8000a46:	2328      	movs	r3, #40	@ 0x28
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f005 fee2 	bl	8006814 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a50:	4b25      	ldr	r3, [pc, #148]	@ (8000ae8 <SystemClock_Config+0xcc>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a25      	ldr	r2, [pc, #148]	@ (8000aec <SystemClock_Config+0xd0>)
 8000a56:	401a      	ands	r2, r3
 8000a58:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <SystemClock_Config+0xcc>)
 8000a5a:	2180      	movs	r1, #128	@ 0x80
 8000a5c:	0109      	lsls	r1, r1, #4
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a62:	0021      	movs	r1, r4
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2202      	movs	r2, #2
 8000a68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2210      	movs	r2, #16
 8000a74:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f002 fd48 	bl	8003514 <HAL_RCC_OscConfig>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000a88:	f000 f9a4 	bl	8000dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8c:	212c      	movs	r1, #44	@ 0x2c
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	220f      	movs	r2, #15
 8000a92:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2201      	movs	r2, #1
 8000a98:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2100      	movs	r1, #0
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f003 f903 	bl	8003cbc <HAL_RCC_ClockConfig>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000aba:	f000 f98b 	bl	8000dd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	220a      	movs	r2, #10
 8000ac2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f003 fb16 	bl	8004104 <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000adc:	f000 f97a 	bl	8000dd4 <Error_Handler>
  }
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b01f      	add	sp, #124	@ 0x7c
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	40007000 	.word	0x40007000
 8000aec:	ffffe7ff 	.word	0xffffe7ff

08000af0 <__io_putchar>:

/* USER CODE BEGIN 4 */
//FONCTIONS

int __io_putchar(int ch){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <__io_putchar+0x20>)
 8000afa:	1d39      	adds	r1, r7, #4
 8000afc:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <__io_putchar+0x24>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	f004 fd04 	bl	800550c <HAL_UART_Transmit>
	return ch;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	0018      	movs	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	0000ffff 	.word	0x0000ffff
 8000b14:	200001ec 	.word	0x200001ec

08000b18 <HAL_GPIO_EXTI_Callback>:
	//Sortie Etat Bas
	HAL_GPIO_WritePin(CapteurUs1Trig_GPIO_Port, CapteurUs1Trig_Pin, GPIO_PIN_RESET);
}

//Callback lors d'interruptions sur EXTI 4:15
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1dbb      	adds	r3, r7, #6
 8000b22:	801a      	strh	r2, [r3, #0]
    // Vérifie quel pin a déclenché l'interruption
    if (GPIO_Pin == CapteurUs1Echo_Pin) {
 8000b24:	1dbb      	adds	r3, r7, #6
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	2b20      	cmp	r3, #32
 8000b2a:	d121      	bne.n	8000b70 <HAL_GPIO_EXTI_Callback+0x58>

    	//Verif rising
        if (HAL_GPIO_ReadPin(CapteurUs1Echo_GPIO_Port, CapteurUs1Echo_Pin) == GPIO_PIN_SET){
 8000b2c:	23a0      	movs	r3, #160	@ 0xa0
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	2120      	movs	r1, #32
 8000b32:	0018      	movs	r0, r3
 8000b34:	f001 f8d2 	bl	8001cdc <HAL_GPIO_ReadPin>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d104      	bne.n	8000b48 <HAL_GPIO_EXTI_Callback+0x30>
        	//Lancer le timer
        	HAL_TIM_Base_Start(&htim6);
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x60>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f003 fcbd 	bl	80044c0 <HAL_TIM_Base_Start>
        	g_int_distCapteurUs1 = TIM6->CNT;
        	TIM6->CNT = 0;

        }
    }
}
 8000b46:	e013      	b.n	8000b70 <HAL_GPIO_EXTI_Callback+0x58>
        else if (HAL_GPIO_ReadPin(CapteurUs1Echo_GPIO_Port, CapteurUs1Echo_Pin) == GPIO_PIN_RESET){
 8000b48:	23a0      	movs	r3, #160	@ 0xa0
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 f8c4 	bl	8001cdc <HAL_GPIO_ReadPin>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d10b      	bne.n	8000b70 <HAL_GPIO_EXTI_Callback+0x58>
        	HAL_TIM_Base_Stop(&htim6);
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x60>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f003 fcfa 	bl	8004554 <HAL_TIM_Base_Stop>
        	g_int_distCapteurUs1 = TIM6->CNT;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x64>)
 8000b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x68>)
 8000b68:	701a      	strb	r2, [r3, #0]
        	TIM6->CNT = 0;
 8000b6a:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000016c 	.word	0x2000016c
 8000b7c:	40001000 	.word	0x40001000
 8000b80:	200000d8 	.word	0x200000d8

08000b84 <Motors_SetDirection>:
	    Motors_SetSpeed(L_MOTOR, l_int_Lspeed);
	    Motors_SetSpeed(R_MOTOR, l_int_Rspeed);

}

void Motors_SetDirection(TDirection x_direction){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	701a      	strb	r2, [r3, #0]
	//Gerer les ports CTRL1 et CTRL2 des moteurs
	//Cest par ici qu'on met la securite du delai de changement de dircetion avec
	if(x_direction == NEUTRAL){
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d11a      	bne.n	8000bce <Motors_SetDirection+0x4a>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_RESET);
 8000b98:	4b3b      	ldr	r3, [pc, #236]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 f8b9 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);
 8000ba4:	4b38      	ldr	r3, [pc, #224]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 f8b3 	bl	8001d16 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
 8000bb0:	2380      	movs	r3, #128	@ 0x80
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4834      	ldr	r0, [pc, #208]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	0019      	movs	r1, r3
 8000bba:	f001 f8ac 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 8000bbe:	2380      	movs	r3, #128	@ 0x80
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4831      	ldr	r0, [pc, #196]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	f001 f8a5 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);

		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
	}
}
 8000bcc:	e057      	b.n	8000c7e <Motors_SetDirection+0xfa>
	else if(x_direction == FORWARD){
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d11a      	bne.n	8000c0c <Motors_SetDirection+0x88>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_RESET);
 8000bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 f89a 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_SET);
 8000be2:	4b29      	ldr	r3, [pc, #164]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	2180      	movs	r1, #128	@ 0x80
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 f894 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_SET);
 8000bee:	2380      	movs	r3, #128	@ 0x80
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	4825      	ldr	r0, [pc, #148]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	f001 f88d 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4821      	ldr	r0, [pc, #132]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	0019      	movs	r1, r3
 8000c06:	f001 f886 	bl	8001d16 <HAL_GPIO_WritePin>
}
 8000c0a:	e038      	b.n	8000c7e <Motors_SetDirection+0xfa>
	else if(x_direction == BACKWARD){
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d11a      	bne.n	8000c4a <Motors_SetDirection+0xc6>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_SET);
 8000c14:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	2140      	movs	r1, #64	@ 0x40
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f001 f87b 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);
 8000c20:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	2180      	movs	r1, #128	@ 0x80
 8000c26:	0018      	movs	r0, r3
 8000c28:	f001 f875 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4815      	ldr	r0, [pc, #84]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	0019      	movs	r1, r3
 8000c36:	f001 f86e 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_SET);
 8000c3a:	2380      	movs	r3, #128	@ 0x80
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4812      	ldr	r0, [pc, #72]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	0019      	movs	r1, r3
 8000c44:	f001 f867 	bl	8001d16 <HAL_GPIO_WritePin>
}
 8000c48:	e019      	b.n	8000c7e <Motors_SetDirection+0xfa>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl1_Pin, GPIO_PIN_RESET);
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2140      	movs	r1, #64	@ 0x40
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 f860 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot1_Ctrl2_Pin, GPIO_PIN_RESET);
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2180      	movs	r1, #128	@ 0x80
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f001 f85a 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl1_Pin, GPIO_PIN_RESET);
 8000c62:	2380      	movs	r3, #128	@ 0x80
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	f001 f853 	bl	8001d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Mot2_Ctrl2_Pin, GPIO_PIN_RESET);
 8000c70:	2380      	movs	r3, #128	@ 0x80
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <Motors_SetDirection+0x104>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	0019      	movs	r1, r3
 8000c7a:	f001 f84c 	bl	8001d16 <HAL_GPIO_WritePin>
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	50000800 	.word	0x50000800

08000c8c <Encoders_GetData>:
	else if(x_numMotor==R_MOTOR){
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, x_int_speed);
		}
}

void Encoders_GetData(void){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	int32_t l_int_distanceParcourue = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]

	// Lire la position actuelle
	int32_t positionActuelle = __HAL_TIM_GET_COUNTER(&htim2);
 8000c96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <Encoders_GetData+0x40>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9c:	603b      	str	r3, [r7, #0]


	// Calculer la distance parcourue depuis la dernière lecture
	l_int_distanceParcourue = positionActuelle;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	607b      	str	r3, [r7, #4]


	g_int_rpm = 4*(l_int_distanceParcourue*30)/224;
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	21e0      	movs	r1, #224	@ 0xe0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fabe 	bl	8000230 <__divsi3>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <Encoders_GetData+0x44>)
 8000cba:	701a      	strb	r2, [r3, #0]

	// Réinitialiser le compteur
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <Encoders_GetData+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200000ec 	.word	0x200000ec
 8000cd0:	200000d9 	.word	0x200000d9

08000cd4 <MMA8451_WriteRegister>:
	// Afficher la distance parcourue (ou vitesse)
	HAL_UART_Transmit(&huart2, &g_int_rpm, 1, HAL_MAX_DELAY);
}

// Fonction pour écrire un registre du MMA8451Q
void MMA8451_WriteRegister(uint8_t reg, uint8_t value) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	0002      	movs	r2, r0
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	1c0a      	adds	r2, r1, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
    uint8_t data[2] = {reg, value};
 8000ce6:	210c      	movs	r1, #12
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	1dba      	adds	r2, r7, #6
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&hi2c1, MMA8451Q_ADDR, data, 2, HAL_MAX_DELAY);
 8000cf8:	187a      	adds	r2, r7, r1
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <MMA8451_WriteRegister+0x40>)
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	425b      	negs	r3, r3
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2302      	movs	r3, #2
 8000d04:	211d      	movs	r1, #29
 8000d06:	f001 f8d5 	bl	8001eb4 <HAL_I2C_Master_Transmit>
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	20000084 	.word	0x20000084

08000d18 <MMA8451_ReadRegister>:

// Fonction pour lire un registre du MMA8451Q
uint8_t MMA8451_ReadRegister(uint8_t reg) {
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	0002      	movs	r2, r0
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    HAL_I2C_Master_Transmit(&hi2c1, MMA8451Q_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000d24:	1dfa      	adds	r2, r7, #7
 8000d26:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <MMA8451_ReadRegister+0x40>)
 8000d28:	2301      	movs	r3, #1
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	211d      	movs	r1, #29
 8000d32:	f001 f8bf 	bl	8001eb4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, MMA8451Q_ADDR, &value, 1, HAL_MAX_DELAY);
 8000d36:	240f      	movs	r4, #15
 8000d38:	193a      	adds	r2, r7, r4
 8000d3a:	4807      	ldr	r0, [pc, #28]	@ (8000d58 <MMA8451_ReadRegister+0x40>)
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	425b      	negs	r3, r3
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2301      	movs	r3, #1
 8000d44:	211d      	movs	r1, #29
 8000d46:	f001 f9bd 	bl	80020c4 <HAL_I2C_Master_Receive>
    return value;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	781b      	ldrb	r3, [r3, #0]
}
 8000d4e:	0018      	movs	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b005      	add	sp, #20
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	20000084 	.word	0x20000084

08000d5c <MMA8451_Init>:
    HAL_I2C_Master_Transmit(&hi2c1, MMA8451Q_ADDR, &reg, 1, HAL_MAX_DELAY);
    HAL_I2C_Master_Receive(&hi2c1, MMA8451Q_ADDR, buffer, length, HAL_MAX_DELAY);
}

// Fonction d'initialisation du MMA8451Q
void MMA8451_Init() {
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
    uint8_t ctrl_reg1 = MMA8451_ReadRegister(0x2A); // Lire CTRL_REG1
 8000d62:	1dfc      	adds	r4, r7, #7
 8000d64:	202a      	movs	r0, #42	@ 0x2a
 8000d66:	f7ff ffd7 	bl	8000d18 <MMA8451_ReadRegister>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10);
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f000 fca0 	bl	80016b4 <HAL_Delay>
    MMA8451_WriteRegister(0x2A, ctrl_reg1 & ~0x01); // Mettre l'accéléromètre en veille
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4393      	bics	r3, r2
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	0019      	movs	r1, r3
 8000d80:	202a      	movs	r0, #42	@ 0x2a
 8000d82:	f7ff ffa7 	bl	8000cd4 <MMA8451_WriteRegister>
    HAL_Delay(10);
 8000d86:	200a      	movs	r0, #10
 8000d88:	f000 fc94 	bl	80016b4 <HAL_Delay>
    MMA8451_WriteRegister(0x2A, 0x01);              // Activer l'accéléromètre (Mode actif)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	202a      	movs	r0, #42	@ 0x2a
 8000d90:	f7ff ffa0 	bl	8000cd4 <MMA8451_WriteRegister>
}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b003      	add	sp, #12
 8000d9a:	bd90      	pop	{r4, r7, pc}

08000d9c <MMA8451_Print>:

    *x = ((int16_t)((data[0] << 8) | data[1])) >> 2; // 14 bits
    *y = ((int16_t)((data[2] << 8) | data[3])) >> 2;
    *z = ((int16_t)((data[4] << 8) | data[5])) >> 2;
}
void MMA8451_Print(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	printf("X: %d, Y: %d, Z: %d\n", x, y, z);
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MMA8451_Print+0x28>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	5e9b      	ldrsh	r3, [r3, r2]
 8000da6:	0019      	movs	r1, r3
 8000da8:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <MMA8451_Print+0x2c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	5e9b      	ldrsh	r3, [r3, r2]
 8000dae:	001a      	movs	r2, r3
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MMA8451_Print+0x30>)
 8000db2:	2000      	movs	r0, #0
 8000db4:	5e1b      	ldrsh	r3, [r3, r0]
 8000db6:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <MMA8451_Print+0x34>)
 8000db8:	f005 fd1c 	bl	80067f4 <iprintf>
}
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	200000e0 	.word	0x200000e0
 8000dc8:	200000e2 	.word	0x200000e2
 8000dcc:	200000e4 	.word	0x200000e4
 8000dd0:	08007550 	.word	0x08007550

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	e7fd      	b.n	8000ddc <Error_Handler+0x8>

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <HAL_MspInit+0x24>)
 8000de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_MspInit+0x24>)
 8000dea:	2101      	movs	r1, #1
 8000dec:	430a      	orrs	r2, r1
 8000dee:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <HAL_MspInit+0x24>)
 8000df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000df4:	4b03      	ldr	r3, [pc, #12]	@ (8000e04 <HAL_MspInit+0x24>)
 8000df6:	2180      	movs	r1, #128	@ 0x80
 8000df8:	0549      	lsls	r1, r1, #21
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e0c:	46c0      	nop			@ (mov r8, r8)
 8000e0e:	e7fd      	b.n	8000e0c <NMI_Handler+0x4>

08000e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	e7fd      	b.n	8000e14 <HardFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 fc24 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CapteurUs1Echo_Pin);
 8000e3e:	2020      	movs	r0, #32
 8000e40:	f000 ff86 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(cd2_Pin);
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 ff81 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e4e:	2380      	movs	r3, #128	@ 0x80
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 ff7c 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */


  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <TIM7_IRQHandler+0x30>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f003 fdd3 	bl	8004a12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  // Vérifier si l'interruption provient de l'update du timer
  if (__HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) != RESET)
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <TIM7_IRQHandler+0x30>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2201      	movs	r2, #1
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d106      	bne.n	8000e88 <TIM7_IRQHandler+0x28>
  {
      // Effacer le flag d'interruption
      __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8000e7a:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <TIM7_IRQHandler+0x30>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	4252      	negs	r2, r2
 8000e82:	611a      	str	r2, [r3, #16]

      //Recupere la vitesse des moteurs
      Encoders_GetData();
 8000e84:	f7ff ff02 	bl	8000c8c <Encoders_GetData>

  }
  /* USER CODE END TIM7_IRQn 1 */
}
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	200001ac 	.word	0x200001ac

08000e94 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <I2C1_IRQHandler+0x2c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	23e0      	movs	r3, #224	@ 0xe0
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d004      	beq.n	8000eb0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <I2C1_IRQHandler+0x2c>)
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 fa2d 	bl	8002308 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000eae:	e003      	b.n	8000eb8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000eb0:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <I2C1_IRQHandler+0x2c>)
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f001 fa0e 	bl	80022d4 <HAL_I2C_EV_IRQHandler>
}
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	20000084 	.word	0x20000084

08000ec4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <USART2_IRQHandler+0x14>)
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f004 fbbe 	bl	800564c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	200001ec 	.word	0x200001ec

08000edc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e00a      	b.n	8000f04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eee:	e000      	b.n	8000ef2 <_read+0x16>
 8000ef0:	bf00      	nop
 8000ef2:	0001      	movs	r1, r0
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	b2ca      	uxtb	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbf0      	blt.n	8000eee <_read+0x12>
  }

  return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b006      	add	sp, #24
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	e009      	b.n	8000f3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	60ba      	str	r2, [r7, #8]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff fddd 	bl	8000af0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf1      	blt.n	8000f28 <_write+0x12>
  }
  return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b006      	add	sp, #24
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_close>:

int _close(int file)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	425b      	negs	r3, r3
}
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2280      	movs	r2, #128	@ 0x80
 8000f70:	0192      	lsls	r2, r2, #6
 8000f72:	605a      	str	r2, [r3, #4]
  return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_isatty>:

int _isatty(int file)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b004      	add	sp, #16
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	@ (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	@ (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	18d3      	adds	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f005 fc24 	bl	8006824 <__errno>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	425b      	negs	r3, r3
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	@ (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	18d2      	adds	r2, r2, r3
 8000ff6:	4b05      	ldr	r3, [pc, #20]	@ (800100c <_sbrk+0x64>)
 8000ff8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b006      	add	sp, #24
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20005000 	.word	0x20005000
 8001008:	00000400 	.word	0x00000400
 800100c:	200000e8 	.word	0x200000e8
 8001010:	200003c8 	.word	0x200003c8

08001014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b08d      	sub	sp, #52	@ 0x34
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001026:	240c      	movs	r4, #12
 8001028:	193b      	adds	r3, r7, r4
 800102a:	0018      	movs	r0, r3
 800102c:	2324      	movs	r3, #36	@ 0x24
 800102e:	001a      	movs	r2, r3
 8001030:	2100      	movs	r1, #0
 8001032:	f005 fbef 	bl	8006814 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	0018      	movs	r0, r3
 800103a:	2308      	movs	r3, #8
 800103c:	001a      	movs	r2, r3
 800103e:	2100      	movs	r1, #0
 8001040:	f005 fbe8 	bl	8006814 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001044:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <MX_TIM2_Init+0xc0>)
 8001046:	2280      	movs	r2, #128	@ 0x80
 8001048:	05d2      	lsls	r2, r2, #23
 800104a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800104c:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <MX_TIM2_Init+0xc0>)
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <MX_TIM2_Init+0xc0>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001058:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <MX_TIM2_Init+0xc0>)
 800105a:	4a22      	ldr	r2, [pc, #136]	@ (80010e4 <MX_TIM2_Init+0xc4>)
 800105c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <MX_TIM2_Init+0xc0>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <MX_TIM2_Init+0xc0>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800106a:	0021      	movs	r1, r4
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2201      	movs	r2, #1
 800107c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2201      	movs	r2, #1
 8001094:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010a2:	187a      	adds	r2, r7, r1
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_TIM2_Init+0xc0>)
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f003 fb9d 	bl	80047e8 <HAL_TIM_Encoder_Init>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010b2:	f7ff fe8f 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c2:	1d3a      	adds	r2, r7, #4
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_TIM2_Init+0xc0>)
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f004 f96d 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80010d2:	f7ff fe7f 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b00d      	add	sp, #52	@ 0x34
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	200000ec 	.word	0x200000ec
 80010e4:	0000ffff 	.word	0x0000ffff

080010e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	2318      	movs	r3, #24
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	0018      	movs	r0, r3
 80010f4:	2310      	movs	r3, #16
 80010f6:	001a      	movs	r2, r3
 80010f8:	2100      	movs	r1, #0
 80010fa:	f005 fb8b 	bl	8006814 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fe:	2310      	movs	r3, #16
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	0018      	movs	r0, r3
 8001104:	2308      	movs	r3, #8
 8001106:	001a      	movs	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	f005 fb83 	bl	8006814 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110e:	003b      	movs	r3, r7
 8001110:	0018      	movs	r0, r3
 8001112:	2310      	movs	r3, #16
 8001114:	001a      	movs	r2, r3
 8001116:	2100      	movs	r1, #0
 8001118:	f005 fb7c 	bl	8006814 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800111c:	4b34      	ldr	r3, [pc, #208]	@ (80011f0 <MX_TIM3_Init+0x108>)
 800111e:	4a35      	ldr	r2, [pc, #212]	@ (80011f4 <MX_TIM3_Init+0x10c>)
 8001120:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001122:	4b33      	ldr	r3, [pc, #204]	@ (80011f0 <MX_TIM3_Init+0x108>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b31      	ldr	r3, [pc, #196]	@ (80011f0 <MX_TIM3_Init+0x108>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 800112e:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <MX_TIM3_Init+0x108>)
 8001130:	2296      	movs	r2, #150	@ 0x96
 8001132:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <MX_TIM3_Init+0x108>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <MX_TIM3_Init+0x108>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001140:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <MX_TIM3_Init+0x108>)
 8001142:	0018      	movs	r0, r3
 8001144:	f003 f97c 	bl	8004440 <HAL_TIM_Base_Init>
 8001148:	1e03      	subs	r3, r0, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800114c:	f7ff fe42 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	2118      	movs	r1, #24
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2280      	movs	r2, #128	@ 0x80
 8001156:	0152      	lsls	r2, r2, #5
 8001158:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800115a:	187a      	adds	r2, r7, r1
 800115c:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <MX_TIM3_Init+0x108>)
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f003 fe05 	bl	8004d70 <HAL_TIM_ConfigClockSource>
 8001166:	1e03      	subs	r3, r0, #0
 8001168:	d001      	beq.n	800116e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800116a:	f7ff fe33 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <MX_TIM3_Init+0x108>)
 8001170:	0018      	movs	r0, r3
 8001172:	f003 fa5f 	bl	8004634 <HAL_TIM_PWM_Init>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d001      	beq.n	800117e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800117a:	f7ff fe2b 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2110      	movs	r1, #16
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2200      	movs	r2, #0
 800118a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800118c:	187a      	adds	r2, r7, r1
 800118e:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <MX_TIM3_Init+0x108>)
 8001190:	0011      	movs	r1, r2
 8001192:	0018      	movs	r0, r3
 8001194:	f004 f908 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001198:	1e03      	subs	r3, r0, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800119c:	f7ff fe1a 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a0:	003b      	movs	r3, r7
 80011a2:	2260      	movs	r2, #96	@ 0x60
 80011a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80011a6:	003b      	movs	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ac:	003b      	movs	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	003b      	movs	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b8:	0039      	movs	r1, r7
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <MX_TIM3_Init+0x108>)
 80011bc:	2208      	movs	r2, #8
 80011be:	0018      	movs	r0, r3
 80011c0:	f003 fd10 	bl	8004be4 <HAL_TIM_PWM_ConfigChannel>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80011c8:	f7ff fe04 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011cc:	0039      	movs	r1, r7
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <MX_TIM3_Init+0x108>)
 80011d0:	220c      	movs	r2, #12
 80011d2:	0018      	movs	r0, r3
 80011d4:	f003 fd06 	bl	8004be4 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80011dc:	f7ff fdfa 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <MX_TIM3_Init+0x108>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f912 	bl	800140c <HAL_TIM_MspPostInit>

}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b00a      	add	sp, #40	@ 0x28
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000012c 	.word	0x2000012c
 80011f4:	40000400 	.word	0x40000400

080011f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	003b      	movs	r3, r7
 8001200:	0018      	movs	r0, r3
 8001202:	2308      	movs	r3, #8
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f005 fb04 	bl	8006814 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800120c:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <MX_TIM6_Init+0x6c>)
 800120e:	4a16      	ldr	r2, [pc, #88]	@ (8001268 <MX_TIM6_Init+0x70>)
 8001210:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <MX_TIM6_Init+0x6c>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_TIM6_Init+0x6c>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 941;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_TIM6_Init+0x6c>)
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <MX_TIM6_Init+0x74>)
 8001222:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_TIM6_Init+0x6c>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_TIM6_Init+0x6c>)
 800122c:	0018      	movs	r0, r3
 800122e:	f003 f907 	bl	8004440 <HAL_TIM_Base_Init>
 8001232:	1e03      	subs	r3, r0, #0
 8001234:	d001      	beq.n	800123a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001236:	f7ff fdcd 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123a:	003b      	movs	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001240:	003b      	movs	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001246:	003a      	movs	r2, r7
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_TIM6_Init+0x6c>)
 800124a:	0011      	movs	r1, r2
 800124c:	0018      	movs	r0, r3
 800124e:	f004 f8ab 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	1e03      	subs	r3, r0, #0
 8001254:	d001      	beq.n	800125a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001256:	f7ff fdbd 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	2000016c 	.word	0x2000016c
 8001268:	40001000 	.word	0x40001000
 800126c:	000003ad 	.word	0x000003ad

08001270 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	003b      	movs	r3, r7
 8001278:	0018      	movs	r0, r3
 800127a:	2308      	movs	r3, #8
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f005 fac8 	bl	8006814 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_TIM7_Init+0x6c>)
 8001286:	4a16      	ldr	r2, [pc, #88]	@ (80012e0 <MX_TIM7_Init+0x70>)
 8001288:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16000;
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_TIM7_Init+0x6c>)
 800128c:	22fa      	movs	r2, #250	@ 0xfa
 800128e:	0192      	lsls	r2, r2, #6
 8001290:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_TIM7_Init+0x6c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 250;
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <MX_TIM7_Init+0x6c>)
 800129a:	22fa      	movs	r2, #250	@ 0xfa
 800129c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_TIM7_Init+0x6c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012a4:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <MX_TIM7_Init+0x6c>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f003 f8ca 	bl	8004440 <HAL_TIM_Base_Init>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 80012b0:	f7ff fd90 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	003b      	movs	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	003b      	movs	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012c0:	003a      	movs	r2, r7
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_TIM7_Init+0x6c>)
 80012c4:	0011      	movs	r1, r2
 80012c6:	0018      	movs	r0, r3
 80012c8:	f004 f86e 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 80012d0:	f7ff fd80 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200001ac 	.word	0x200001ac
 80012e0:	40001400 	.word	0x40001400

080012e4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	240c      	movs	r4, #12
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	0018      	movs	r0, r3
 80012f2:	2314      	movs	r3, #20
 80012f4:	001a      	movs	r2, r3
 80012f6:	2100      	movs	r1, #0
 80012f8:	f005 fa8c 	bl	8006814 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	05db      	lsls	r3, r3, #23
 8001304:	429a      	cmp	r2, r3
 8001306:	d13f      	bne.n	8001388 <HAL_TIM_Encoder_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001308:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <HAL_TIM_Encoder_MspInit+0xac>)
 800130a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <HAL_TIM_Encoder_MspInit+0xac>)
 800130e:	2101      	movs	r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <HAL_TIM_Encoder_MspInit+0xac>)
 8001316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_TIM_Encoder_MspInit+0xac>)
 800131a:	2101      	movs	r1, #1
 800131c:	430a      	orrs	r2, r1
 800131e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_TIM_Encoder_MspInit+0xac>)
 8001322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001324:	2201      	movs	r2, #1
 8001326:	4013      	ands	r3, r2
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800132c:	193b      	adds	r3, r7, r4
 800132e:	2202      	movs	r2, #2
 8001330:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	193b      	adds	r3, r7, r4
 8001334:	2202      	movs	r2, #2
 8001336:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	193b      	adds	r3, r7, r4
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	193b      	adds	r3, r7, r4
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001344:	193b      	adds	r3, r7, r4
 8001346:	2202      	movs	r2, #2
 8001348:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	193a      	adds	r2, r7, r4
 800134c:	23a0      	movs	r3, #160	@ 0xa0
 800134e:	05db      	lsls	r3, r3, #23
 8001350:	0011      	movs	r1, r2
 8001352:	0018      	movs	r0, r3
 8001354:	f000 fb44 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001358:	0021      	movs	r1, r4
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2280      	movs	r2, #128	@ 0x80
 800135e:	0212      	lsls	r2, r2, #8
 8001360:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2202      	movs	r2, #2
 8001366:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2205      	movs	r2, #5
 8001378:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	187a      	adds	r2, r7, r1
 800137c:	23a0      	movs	r3, #160	@ 0xa0
 800137e:	05db      	lsls	r3, r3, #23
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f000 fb2c 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001388:	46c0      	nop			@ (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b009      	add	sp, #36	@ 0x24
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a16      	ldr	r2, [pc, #88]	@ (80013fc <HAL_TIM_Base_MspInit+0x68>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d106      	bne.n	80013b4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <HAL_TIM_Base_MspInit+0x6c>)
 80013a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_TIM_Base_MspInit+0x6c>)
 80013ac:	2102      	movs	r1, #2
 80013ae:	430a      	orrs	r2, r1
 80013b0:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80013b2:	e01e      	b.n	80013f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <HAL_TIM_Base_MspInit+0x70>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d106      	bne.n	80013cc <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <HAL_TIM_Base_MspInit+0x6c>)
 80013c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_TIM_Base_MspInit+0x6c>)
 80013c4:	2110      	movs	r1, #16
 80013c6:	430a      	orrs	r2, r1
 80013c8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80013ca:	e012      	b.n	80013f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <HAL_TIM_Base_MspInit+0x74>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10d      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_TIM_Base_MspInit+0x6c>)
 80013d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_TIM_Base_MspInit+0x6c>)
 80013dc:	2120      	movs	r1, #32
 80013de:	430a      	orrs	r2, r1
 80013e0:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2012      	movs	r0, #18
 80013e8:	f000 fa34 	bl	8001854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013ec:	2012      	movs	r0, #18
 80013ee:	f000 fa46 	bl	800187e <HAL_NVIC_EnableIRQ>
}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	40000400 	.word	0x40000400
 8001400:	40021000 	.word	0x40021000
 8001404:	40001000 	.word	0x40001000
 8001408:	40001400 	.word	0x40001400

0800140c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	240c      	movs	r4, #12
 8001416:	193b      	adds	r3, r7, r4
 8001418:	0018      	movs	r0, r3
 800141a:	2314      	movs	r3, #20
 800141c:	001a      	movs	r2, r3
 800141e:	2100      	movs	r1, #0
 8001420:	f005 f9f8 	bl	8006814 <memset>
  if(timHandle->Instance==TIM3)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a14      	ldr	r2, [pc, #80]	@ (800147c <HAL_TIM_MspPostInit+0x70>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d121      	bne.n	8001472 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_TIM_MspPostInit+0x74>)
 8001430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001432:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <HAL_TIM_MspPostInit+0x74>)
 8001434:	2102      	movs	r1, #2
 8001436:	430a      	orrs	r2, r1
 8001438:	62da      	str	r2, [r3, #44]	@ 0x2c
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <HAL_TIM_MspPostInit+0x74>)
 800143c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143e:	2202      	movs	r2, #2
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Mot1_Enable_Pin|Mot2_Enable_Pin;
 8001446:	0021      	movs	r1, r4
 8001448:	187b      	adds	r3, r7, r1
 800144a:	2203      	movs	r2, #3
 800144c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2202      	movs	r2, #2
 8001452:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2202      	movs	r2, #2
 8001464:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	187b      	adds	r3, r7, r1
 8001468:	4a06      	ldr	r2, [pc, #24]	@ (8001484 <HAL_TIM_MspPostInit+0x78>)
 800146a:	0019      	movs	r1, r3
 800146c:	0010      	movs	r0, r2
 800146e:	f000 fab7 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b009      	add	sp, #36	@ 0x24
 8001478:	bd90      	pop	{r4, r7, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	40000400 	.word	0x40000400
 8001480:	40021000 	.word	0x40021000
 8001484:	50000400 	.word	0x50000400

08001488 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 800148e:	4a15      	ldr	r2, [pc, #84]	@ (80014e4 <MX_USART2_UART_Init+0x5c>)
 8001490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 8001494:	22e1      	movs	r2, #225	@ 0xe1
 8001496:	0252      	lsls	r2, r2, #9
 8001498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ca:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <MX_USART2_UART_Init+0x58>)
 80014cc:	0018      	movs	r0, r3
 80014ce:	f003 ffc9 	bl	8005464 <HAL_UART_Init>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d001      	beq.n	80014da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014d6:	f7ff fc7d 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200001ec 	.word	0x200001ec
 80014e4:	40004400 	.word	0x40004400

080014e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	240c      	movs	r4, #12
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	0018      	movs	r0, r3
 80014f6:	2314      	movs	r3, #20
 80014f8:	001a      	movs	r2, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	f005 f98a 	bl	8006814 <memset>
  if(uartHandle->Instance==USART2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1c      	ldr	r2, [pc, #112]	@ (8001578 <HAL_UART_MspInit+0x90>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d131      	bne.n	800156e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <HAL_UART_MspInit+0x94>)
 800150c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HAL_UART_MspInit+0x94>)
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	0289      	lsls	r1, r1, #10
 8001514:	430a      	orrs	r2, r1
 8001516:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_UART_MspInit+0x94>)
 800151a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_UART_MspInit+0x94>)
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_UART_MspInit+0x94>)
 8001526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001530:	0021      	movs	r1, r4
 8001532:	187b      	adds	r3, r7, r1
 8001534:	220c      	movs	r2, #12
 8001536:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2202      	movs	r2, #2
 800153c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2203      	movs	r2, #3
 8001548:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2204      	movs	r2, #4
 800154e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	187a      	adds	r2, r7, r1
 8001552:	23a0      	movs	r3, #160	@ 0xa0
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f000 fa41 	bl	80019e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	201c      	movs	r0, #28
 8001564:	f000 f976 	bl	8001854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001568:	201c      	movs	r0, #28
 800156a:	f000 f988 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b009      	add	sp, #36	@ 0x24
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	40004400 	.word	0x40004400
 800157c:	40021000 	.word	0x40021000

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001580:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001582:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001584:	f7ff fd46 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <LoopForever+0x6>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	@ (80015c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <LoopForever+0xe>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	@ (80015cc <LoopForever+0x16>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80015ae:	f005 f93f 	bl	8006830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff f9cf 	bl	8000954 <main>

080015b6 <LoopForever>:

LoopForever:
    b LoopForever
 80015b6:	e7fe      	b.n	80015b6 <LoopForever>
   ldr   r0, =_estack
 80015b8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015c4:	08007618 	.word	0x08007618
  ldr r2, =_sbss
 80015c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015cc:	200003c4 	.word	0x200003c4

080015d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_COMP_IRQHandler>
	...

080015d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <HAL_Init+0x3c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_Init+0x3c>)
 80015e6:	2140      	movs	r1, #64	@ 0x40
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f811 	bl	8001614 <HAL_InitTick>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d003      	beq.n	80015fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	e001      	b.n	8001602 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015fe:	f7ff fbef 	bl	8000de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	40022000 	.word	0x40022000

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <HAL_InitTick+0x5c>)
 800161e:	681c      	ldr	r4, [r3, #0]
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <HAL_InitTick+0x60>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	0019      	movs	r1, r3
 8001626:	23fa      	movs	r3, #250	@ 0xfa
 8001628:	0098      	lsls	r0, r3, #2
 800162a:	f7fe fd77 	bl	800011c <__udivsi3>
 800162e:	0003      	movs	r3, r0
 8001630:	0019      	movs	r1, r3
 8001632:	0020      	movs	r0, r4
 8001634:	f7fe fd72 	bl	800011c <__udivsi3>
 8001638:	0003      	movs	r3, r0
 800163a:	0018      	movs	r0, r3
 800163c:	f000 f92f 	bl	800189e <HAL_SYSTICK_Config>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e00f      	b.n	8001668 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d80b      	bhi.n	8001666 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	2301      	movs	r3, #1
 8001652:	425b      	negs	r3, r3
 8001654:	2200      	movs	r2, #0
 8001656:	0018      	movs	r0, r3
 8001658:	f000 f8fc 	bl	8001854 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_InitTick+0x64>)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b003      	add	sp, #12
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	20000000 	.word	0x20000000
 8001674:	20000008 	.word	0x20000008
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_IncTick+0x1c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	001a      	movs	r2, r3
 8001686:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_IncTick+0x20>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	18d2      	adds	r2, r2, r3
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <HAL_IncTick+0x20>)
 800168e:	601a      	str	r2, [r3, #0]
}
 8001690:	46c0      	nop			@ (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	20000008 	.word	0x20000008
 800169c:	20000274 	.word	0x20000274

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b02      	ldr	r3, [pc, #8]	@ (80016b0 <HAL_GetTick+0x10>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	20000274 	.word	0x20000274

080016b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff fff0 	bl	80016a0 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3301      	adds	r3, #1
 80016cc:	d005      	beq.n	80016da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_Delay+0x44>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	001a      	movs	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	189b      	adds	r3, r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	f7ff ffe0 	bl	80016a0 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d8f7      	bhi.n	80016dc <HAL_Delay+0x28>
  {
  }
}
 80016ec:	46c0      	nop			@ (mov r8, r8)
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b004      	add	sp, #16
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	20000008 	.word	0x20000008

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	0002      	movs	r2, r0
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b7f      	cmp	r3, #127	@ 0x7f
 800170e:	d809      	bhi.n	8001724 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	001a      	movs	r2, r3
 8001716:	231f      	movs	r3, #31
 8001718:	401a      	ands	r2, r3
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <__NVIC_EnableIRQ+0x30>)
 800171c:	2101      	movs	r1, #1
 800171e:	4091      	lsls	r1, r2
 8001720:	000a      	movs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
  }
}
 8001724:	46c0      	nop			@ (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}
 800172c:	e000e100 	.word	0xe000e100

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	0002      	movs	r2, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b7f      	cmp	r3, #127	@ 0x7f
 8001744:	d828      	bhi.n	8001798 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001746:	4a2f      	ldr	r2, [pc, #188]	@ (8001804 <__NVIC_SetPriority+0xd4>)
 8001748:	1dfb      	adds	r3, r7, #7
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	33c0      	adds	r3, #192	@ 0xc0
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	589b      	ldr	r3, [r3, r2]
 8001756:	1dfa      	adds	r2, r7, #7
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	0011      	movs	r1, r2
 800175c:	2203      	movs	r2, #3
 800175e:	400a      	ands	r2, r1
 8001760:	00d2      	lsls	r2, r2, #3
 8001762:	21ff      	movs	r1, #255	@ 0xff
 8001764:	4091      	lsls	r1, r2
 8001766:	000a      	movs	r2, r1
 8001768:	43d2      	mvns	r2, r2
 800176a:	401a      	ands	r2, r3
 800176c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	019b      	lsls	r3, r3, #6
 8001772:	22ff      	movs	r2, #255	@ 0xff
 8001774:	401a      	ands	r2, r3
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	0018      	movs	r0, r3
 800177c:	2303      	movs	r3, #3
 800177e:	4003      	ands	r3, r0
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001784:	481f      	ldr	r0, [pc, #124]	@ (8001804 <__NVIC_SetPriority+0xd4>)
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b25b      	sxtb	r3, r3
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	430a      	orrs	r2, r1
 8001790:	33c0      	adds	r3, #192	@ 0xc0
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001796:	e031      	b.n	80017fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001798:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <__NVIC_SetPriority+0xd8>)
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	0019      	movs	r1, r3
 80017a0:	230f      	movs	r3, #15
 80017a2:	400b      	ands	r3, r1
 80017a4:	3b08      	subs	r3, #8
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3306      	adds	r3, #6
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	18d3      	adds	r3, r2, r3
 80017ae:	3304      	adds	r3, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	1dfa      	adds	r2, r7, #7
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	0011      	movs	r1, r2
 80017b8:	2203      	movs	r2, #3
 80017ba:	400a      	ands	r2, r1
 80017bc:	00d2      	lsls	r2, r2, #3
 80017be:	21ff      	movs	r1, #255	@ 0xff
 80017c0:	4091      	lsls	r1, r2
 80017c2:	000a      	movs	r2, r1
 80017c4:	43d2      	mvns	r2, r2
 80017c6:	401a      	ands	r2, r3
 80017c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	019b      	lsls	r3, r3, #6
 80017ce:	22ff      	movs	r2, #255	@ 0xff
 80017d0:	401a      	ands	r2, r3
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	0018      	movs	r0, r3
 80017d8:	2303      	movs	r3, #3
 80017da:	4003      	ands	r3, r0
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e0:	4809      	ldr	r0, [pc, #36]	@ (8001808 <__NVIC_SetPriority+0xd8>)
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	001c      	movs	r4, r3
 80017e8:	230f      	movs	r3, #15
 80017ea:	4023      	ands	r3, r4
 80017ec:	3b08      	subs	r3, #8
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	430a      	orrs	r2, r1
 80017f2:	3306      	adds	r3, #6
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	18c3      	adds	r3, r0, r3
 80017f8:	3304      	adds	r3, #4
 80017fa:	601a      	str	r2, [r3, #0]
}
 80017fc:	46c0      	nop			@ (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b003      	add	sp, #12
 8001802:	bd90      	pop	{r4, r7, pc}
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	1e5a      	subs	r2, r3, #1
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	045b      	lsls	r3, r3, #17
 800181c:	429a      	cmp	r2, r3
 800181e:	d301      	bcc.n	8001824 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001820:	2301      	movs	r3, #1
 8001822:	e010      	b.n	8001846 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001824:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <SysTick_Config+0x44>)
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	3a01      	subs	r2, #1
 800182a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182c:	2301      	movs	r3, #1
 800182e:	425b      	negs	r3, r3
 8001830:	2103      	movs	r1, #3
 8001832:	0018      	movs	r0, r3
 8001834:	f7ff ff7c 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <SysTick_Config+0x44>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <SysTick_Config+0x44>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	b002      	add	sp, #8
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	210f      	movs	r1, #15
 8001860:	187b      	adds	r3, r7, r1
 8001862:	1c02      	adds	r2, r0, #0
 8001864:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	187b      	adds	r3, r7, r1
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b25b      	sxtb	r3, r3
 800186e:	0011      	movs	r1, r2
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff ff5d 	bl	8001730 <__NVIC_SetPriority>
}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	0002      	movs	r2, r0
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b25b      	sxtb	r3, r3
 8001890:	0018      	movs	r0, r3
 8001892:	f7ff ff33 	bl	80016fc <__NVIC_EnableIRQ>
}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b002      	add	sp, #8
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff ffaf 	bl	800180c <SysTick_Config>
 80018ae:	0003      	movs	r3, r0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	230f      	movs	r3, #15
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2225      	movs	r2, #37	@ 0x25
 80018cc:	5c9b      	ldrb	r3, [r3, r2]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2204      	movs	r2, #4
 80018d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2224      	movs	r2, #36	@ 0x24
 80018de:	2100      	movs	r1, #0
 80018e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e024      	b.n	8001930 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	210e      	movs	r1, #14
 80018f2:	438a      	bics	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2101      	movs	r1, #1
 8001902:	438a      	bics	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	221c      	movs	r2, #28
 800190c:	401a      	ands	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	2101      	movs	r1, #1
 8001914:	4091      	lsls	r1, r2
 8001916:	000a      	movs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2225      	movs	r2, #37	@ 0x25
 800191e:	2101      	movs	r1, #1
 8001920:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2224      	movs	r2, #36	@ 0x24
 8001926:	2100      	movs	r1, #0
 8001928:	5499      	strb	r1, [r3, r2]

    return status;
 800192a:	230f      	movs	r3, #15
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b004      	add	sp, #16
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001940:	210f      	movs	r1, #15
 8001942:	187b      	adds	r3, r7, r1
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2225      	movs	r2, #37	@ 0x25
 800194c:	5c9b      	ldrb	r3, [r3, r2]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d006      	beq.n	8001962 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2204      	movs	r2, #4
 8001958:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800195a:	187b      	adds	r3, r7, r1
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	e02a      	b.n	80019b8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	210e      	movs	r1, #14
 800196e:	438a      	bics	r2, r1
 8001970:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	438a      	bics	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	221c      	movs	r2, #28
 8001988:	401a      	ands	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	2101      	movs	r1, #1
 8001990:	4091      	lsls	r1, r2
 8001992:	000a      	movs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2225      	movs	r2, #37	@ 0x25
 800199a:	2101      	movs	r1, #1
 800199c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2224      	movs	r2, #36	@ 0x24
 80019a2:	2100      	movs	r1, #0
 80019a4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	0010      	movs	r0, r2
 80019b6:	4798      	blx	r3
    }
  }
  return status;
 80019b8:	230f      	movs	r3, #15
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	781b      	ldrb	r3, [r3, #0]
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b004      	add	sp, #16
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2225      	movs	r2, #37	@ 0x25
 80019d2:	5c9b      	ldrb	r3, [r3, r2]
 80019d4:	b2db      	uxtb	r3, r3
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b002      	add	sp, #8
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80019f6:	e155      	b.n	8001ca4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4091      	lsls	r1, r2
 8001a02:	000a      	movs	r2, r1
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d100      	bne.n	8001a10 <HAL_GPIO_Init+0x30>
 8001a0e:	e146      	b.n	8001c9e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2203      	movs	r2, #3
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d005      	beq.n	8001a28 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2203      	movs	r2, #3
 8001a22:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d130      	bne.n	8001a8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	409a      	lsls	r2, r3
 8001a36:	0013      	movs	r3, r2
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	0013      	movs	r3, r2
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a5e:	2201      	movs	r2, #1
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
 8001a64:	0013      	movs	r3, r2
 8001a66:	43da      	mvns	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	2201      	movs	r2, #1
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d017      	beq.n	8001ac6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2203      	movs	r2, #3
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d123      	bne.n	8001b1a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	58d3      	ldr	r3, [r2, r3]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	409a      	lsls	r2, r3
 8001aec:	0013      	movs	r3, r2
 8001aee:	43da      	mvns	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2107      	movs	r1, #7
 8001afe:	400b      	ands	r3, r1
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	6939      	ldr	r1, [r7, #16]
 8001b18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	409a      	lsls	r2, r3
 8001b28:	0013      	movs	r3, r2
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2203      	movs	r2, #3
 8001b38:	401a      	ands	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	0013      	movs	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	23c0      	movs	r3, #192	@ 0xc0
 8001b54:	029b      	lsls	r3, r3, #10
 8001b56:	4013      	ands	r3, r2
 8001b58:	d100      	bne.n	8001b5c <HAL_GPIO_Init+0x17c>
 8001b5a:	e0a0      	b.n	8001c9e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5c:	4b57      	ldr	r3, [pc, #348]	@ (8001cbc <HAL_GPIO_Init+0x2dc>)
 8001b5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b60:	4b56      	ldr	r3, [pc, #344]	@ (8001cbc <HAL_GPIO_Init+0x2dc>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b68:	4a55      	ldr	r2, [pc, #340]	@ (8001cc0 <HAL_GPIO_Init+0x2e0>)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	589b      	ldr	r3, [r3, r2]
 8001b74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	409a      	lsls	r2, r3
 8001b82:	0013      	movs	r3, r2
 8001b84:	43da      	mvns	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	23a0      	movs	r3, #160	@ 0xa0
 8001b90:	05db      	lsls	r3, r3, #23
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d01f      	beq.n	8001bd6 <HAL_GPIO_Init+0x1f6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4a      	ldr	r2, [pc, #296]	@ (8001cc4 <HAL_GPIO_Init+0x2e4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x1f2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a49      	ldr	r2, [pc, #292]	@ (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a48      	ldr	r2, [pc, #288]	@ (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x1ea>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a47      	ldr	r2, [pc, #284]	@ (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x1e6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a46      	ldr	r2, [pc, #280]	@ (8001cd4 <HAL_GPIO_Init+0x2f4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x1e2>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e00a      	b.n	8001bd8 <HAL_GPIO_Init+0x1f8>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e008      	b.n	8001bd8 <HAL_GPIO_Init+0x1f8>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x1f8>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e004      	b.n	8001bd8 <HAL_GPIO_Init+0x1f8>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_Init+0x1f8>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_GPIO_Init+0x1f8>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	2103      	movs	r1, #3
 8001bdc:	400a      	ands	r2, r1
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	4093      	lsls	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be8:	4935      	ldr	r1, [pc, #212]	@ (8001cc0 <HAL_GPIO_Init+0x2e0>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf6:	4b38      	ldr	r3, [pc, #224]	@ (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	2380      	movs	r3, #128	@ 0x80
 8001c0c:	035b      	lsls	r3, r3, #13
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c20:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43da      	mvns	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	039b      	lsls	r3, r3, #14
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c44:	4b24      	ldr	r3, [pc, #144]	@ (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001c4a:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43da      	mvns	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	4013      	ands	r3, r2
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	025b      	lsls	r3, r3, #9
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	40da      	lsrs	r2, r3
 8001cac:	1e13      	subs	r3, r2, #0
 8001cae:	d000      	beq.n	8001cb2 <HAL_GPIO_Init+0x2d2>
 8001cb0:	e6a2      	b.n	80019f8 <HAL_GPIO_Init+0x18>
  }
}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	46c0      	nop			@ (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b006      	add	sp, #24
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	50000400 	.word	0x50000400
 8001cc8:	50000800 	.word	0x50000800
 8001ccc:	50000c00 	.word	0x50000c00
 8001cd0:	50001000 	.word	0x50001000
 8001cd4:	50001c00 	.word	0x50001c00
 8001cd8:	40010400 	.word	0x40010400

08001cdc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	000a      	movs	r2, r1
 8001ce6:	1cbb      	adds	r3, r7, #2
 8001ce8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	1cba      	adds	r2, r7, #2
 8001cf0:	8812      	ldrh	r2, [r2, #0]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d004      	beq.n	8001d00 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf6:	230f      	movs	r3, #15
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e003      	b.n	8001d08 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d00:	230f      	movs	r3, #15
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d08:	230f      	movs	r3, #15
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	781b      	ldrb	r3, [r3, #0]
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b004      	add	sp, #16
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	0008      	movs	r0, r1
 8001d20:	0011      	movs	r1, r2
 8001d22:	1cbb      	adds	r3, r7, #2
 8001d24:	1c02      	adds	r2, r0, #0
 8001d26:	801a      	strh	r2, [r3, #0]
 8001d28:	1c7b      	adds	r3, r7, #1
 8001d2a:	1c0a      	adds	r2, r1, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d2e:	1c7b      	adds	r3, r7, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d004      	beq.n	8001d40 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d36:	1cbb      	adds	r3, r7, #2
 8001d38:	881a      	ldrh	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001d3e:	e003      	b.n	8001d48 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001d40:	1cbb      	adds	r3, r7, #2
 8001d42:	881a      	ldrh	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d48:	46c0      	nop			@ (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	0002      	movs	r2, r0
 8001d58:	1dbb      	adds	r3, r7, #6
 8001d5a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	1dba      	adds	r2, r7, #6
 8001d62:	8812      	ldrh	r2, [r2, #0]
 8001d64:	4013      	ands	r3, r2
 8001d66:	d008      	beq.n	8001d7a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d6a:	1dba      	adds	r2, r7, #6
 8001d6c:	8812      	ldrh	r2, [r2, #0]
 8001d6e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d70:	1dbb      	adds	r3, r7, #6
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7fe fecf 	bl	8000b18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b002      	add	sp, #8
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	40010400 	.word	0x40010400

08001d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e082      	b.n	8001ea0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2241      	movs	r2, #65	@ 0x41
 8001d9e:	5c9b      	ldrb	r3, [r3, r2]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2240      	movs	r2, #64	@ 0x40
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7fe fd83 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2241      	movs	r2, #65	@ 0x41
 8001dba:	2124      	movs	r1, #36	@ 0x24
 8001dbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	438a      	bics	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4934      	ldr	r1, [pc, #208]	@ (8001ea8 <HAL_I2C_Init+0x120>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4931      	ldr	r1, [pc, #196]	@ (8001eac <HAL_I2C_Init+0x124>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d108      	bne.n	8001e06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	0209      	lsls	r1, r1, #8
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	e007      	b.n	8001e16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2184      	movs	r1, #132	@ 0x84
 8001e10:	0209      	lsls	r1, r1, #8
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d104      	bne.n	8001e28 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2280      	movs	r2, #128	@ 0x80
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	491f      	ldr	r1, [pc, #124]	@ (8001eb0 <HAL_I2C_Init+0x128>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	491a      	ldr	r1, [pc, #104]	@ (8001eac <HAL_I2C_Init+0x124>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69d9      	ldr	r1, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1a      	ldr	r2, [r3, #32]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2241      	movs	r2, #65	@ 0x41
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2242      	movs	r2, #66	@ 0x42
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	f0ffffff 	.word	0xf0ffffff
 8001eac:	ffff7fff 	.word	0xffff7fff
 8001eb0:	02008000 	.word	0x02008000

08001eb4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	0008      	movs	r0, r1
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	1c02      	adds	r2, r0, #0
 8001ec8:	801a      	strh	r2, [r3, #0]
 8001eca:	2308      	movs	r3, #8
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	1c0a      	adds	r2, r1, #0
 8001ed0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2241      	movs	r2, #65	@ 0x41
 8001ed6:	5c9b      	ldrb	r3, [r3, r2]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d000      	beq.n	8001ee0 <HAL_I2C_Master_Transmit+0x2c>
 8001ede:	e0e7      	b.n	80020b0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2240      	movs	r2, #64	@ 0x40
 8001ee4:	5c9b      	ldrb	r3, [r3, r2]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_I2C_Master_Transmit+0x3a>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e0e1      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1fe>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2240      	movs	r2, #64	@ 0x40
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ef6:	f7ff fbd3 	bl	80016a0 <HAL_GetTick>
 8001efa:	0003      	movs	r3, r0
 8001efc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001efe:	2380      	movs	r3, #128	@ 0x80
 8001f00:	0219      	lsls	r1, r3, #8
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2319      	movs	r3, #25
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f000 ff7a 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0cc      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2241      	movs	r2, #65	@ 0x41
 8001f1c:	2121      	movs	r1, #33	@ 0x21
 8001f1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2242      	movs	r2, #66	@ 0x42
 8001f24:	2110      	movs	r1, #16
 8001f26:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2208      	movs	r2, #8
 8001f38:	18ba      	adds	r2, r7, r2
 8001f3a:	8812      	ldrh	r2, [r2, #0]
 8001f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2bff      	cmp	r3, #255	@ 0xff
 8001f4c:	d911      	bls.n	8001f72 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	22ff      	movs	r2, #255	@ 0xff
 8001f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	045c      	lsls	r4, r3, #17
 8001f5e:	230a      	movs	r3, #10
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	8819      	ldrh	r1, [r3, #0]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	4b55      	ldr	r3, [pc, #340]	@ (80020bc <HAL_I2C_Master_Transmit+0x208>)
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	0023      	movs	r3, r4
 8001f6c:	f001 f99c 	bl	80032a8 <I2C_TransferConfig>
 8001f70:	e075      	b.n	800205e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	049c      	lsls	r4, r3, #18
 8001f86:	230a      	movs	r3, #10
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	8819      	ldrh	r1, [r3, #0]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80020bc <HAL_I2C_Master_Transmit+0x208>)
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	0023      	movs	r3, r4
 8001f94:	f001 f988 	bl	80032a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f98:	e061      	b.n	800205e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 ff7d 	bl	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e081      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d03a      	beq.n	800205e <HAL_I2C_Master_Transmit+0x1aa>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d136      	bne.n	800205e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	@ 0x80
 8001ffe:	f000 ff01 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002002:	1e03      	subs	r3, r0, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e053      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	2bff      	cmp	r3, #255	@ 0xff
 8002012:	d911      	bls.n	8002038 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	22ff      	movs	r2, #255	@ 0xff
 8002018:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201e:	b2da      	uxtb	r2, r3
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	045c      	lsls	r4, r3, #17
 8002024:	230a      	movs	r3, #10
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	8819      	ldrh	r1, [r3, #0]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	2300      	movs	r3, #0
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	0023      	movs	r3, r4
 8002032:	f001 f939 	bl	80032a8 <I2C_TransferConfig>
 8002036:	e012      	b.n	800205e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002046:	b2da      	uxtb	r2, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	049c      	lsls	r4, r3, #18
 800204c:	230a      	movs	r3, #10
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	8819      	ldrh	r1, [r3, #0]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	2300      	movs	r3, #0
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	0023      	movs	r3, r4
 800205a:	f001 f925 	bl	80032a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d198      	bne.n	8001f9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	0018      	movs	r0, r3
 8002070:	f000 ff5c 	bl	8002f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002074:	1e03      	subs	r3, r0, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e01a      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2220      	movs	r2, #32
 8002082:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <HAL_I2C_Master_Transmit+0x20c>)
 8002090:	400a      	ands	r2, r1
 8002092:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2241      	movs	r2, #65	@ 0x41
 8002098:	2120      	movs	r1, #32
 800209a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2242      	movs	r2, #66	@ 0x42
 80020a0:	2100      	movs	r1, #0
 80020a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2240      	movs	r2, #64	@ 0x40
 80020a8:	2100      	movs	r1, #0
 80020aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b007      	add	sp, #28
 80020b8:	bd90      	pop	{r4, r7, pc}
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	80002000 	.word	0x80002000
 80020c0:	fe00e800 	.word	0xfe00e800

080020c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b089      	sub	sp, #36	@ 0x24
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	0008      	movs	r0, r1
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	0019      	movs	r1, r3
 80020d2:	230a      	movs	r3, #10
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	1c02      	adds	r2, r0, #0
 80020d8:	801a      	strh	r2, [r3, #0]
 80020da:	2308      	movs	r3, #8
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	1c0a      	adds	r2, r1, #0
 80020e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2241      	movs	r2, #65	@ 0x41
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d000      	beq.n	80020f0 <HAL_I2C_Master_Receive+0x2c>
 80020ee:	e0e8      	b.n	80022c2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2240      	movs	r2, #64	@ 0x40
 80020f4:	5c9b      	ldrb	r3, [r3, r2]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_I2C_Master_Receive+0x3a>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e0e2      	b.n	80022c4 <HAL_I2C_Master_Receive+0x200>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2240      	movs	r2, #64	@ 0x40
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002106:	f7ff facb 	bl	80016a0 <HAL_GetTick>
 800210a:	0003      	movs	r3, r0
 800210c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	0219      	lsls	r1, r3, #8
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2319      	movs	r3, #25
 800211a:	2201      	movs	r2, #1
 800211c:	f000 fe72 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002120:	1e03      	subs	r3, r0, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0cd      	b.n	80022c4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2241      	movs	r2, #65	@ 0x41
 800212c:	2122      	movs	r1, #34	@ 0x22
 800212e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2242      	movs	r2, #66	@ 0x42
 8002134:	2110      	movs	r1, #16
 8002136:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2208      	movs	r2, #8
 8002148:	18ba      	adds	r2, r7, r2
 800214a:	8812      	ldrh	r2, [r2, #0]
 800214c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2bff      	cmp	r3, #255	@ 0xff
 800215c:	d911      	bls.n	8002182 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	22ff      	movs	r2, #255	@ 0xff
 8002162:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002168:	b2da      	uxtb	r2, r3
 800216a:	2380      	movs	r3, #128	@ 0x80
 800216c:	045c      	lsls	r4, r3, #17
 800216e:	230a      	movs	r3, #10
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	8819      	ldrh	r1, [r3, #0]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	4b55      	ldr	r3, [pc, #340]	@ (80022cc <HAL_I2C_Master_Receive+0x208>)
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	0023      	movs	r3, r4
 800217c:	f001 f894 	bl	80032a8 <I2C_TransferConfig>
 8002180:	e076      	b.n	8002270 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002190:	b2da      	uxtb	r2, r3
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	049c      	lsls	r4, r3, #18
 8002196:	230a      	movs	r3, #10
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	8819      	ldrh	r1, [r3, #0]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	4b4b      	ldr	r3, [pc, #300]	@ (80022cc <HAL_I2C_Master_Receive+0x208>)
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	0023      	movs	r3, r4
 80021a4:	f001 f880 	bl	80032a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80021a8:	e062      	b.n	8002270 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 feff 	bl	8002fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021b6:	1e03      	subs	r3, r0, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e082      	b.n	80022c4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d03a      	beq.n	8002270 <HAL_I2C_Master_Receive+0x1ac>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d136      	bne.n	8002270 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	0013      	movs	r3, r2
 800220c:	2200      	movs	r2, #0
 800220e:	2180      	movs	r1, #128	@ 0x80
 8002210:	f000 fdf8 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d001      	beq.n	800221c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e053      	b.n	80022c4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	2bff      	cmp	r3, #255	@ 0xff
 8002224:	d911      	bls.n	800224a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	22ff      	movs	r2, #255	@ 0xff
 800222a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002230:	b2da      	uxtb	r2, r3
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	045c      	lsls	r4, r3, #17
 8002236:	230a      	movs	r3, #10
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	8819      	ldrh	r1, [r3, #0]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	2300      	movs	r3, #0
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	0023      	movs	r3, r4
 8002244:	f001 f830 	bl	80032a8 <I2C_TransferConfig>
 8002248:	e012      	b.n	8002270 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002258:	b2da      	uxtb	r2, r3
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	049c      	lsls	r4, r3, #18
 800225e:	230a      	movs	r3, #10
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	8819      	ldrh	r1, [r3, #0]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	2300      	movs	r3, #0
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	0023      	movs	r3, r4
 800226c:	f001 f81c 	bl	80032a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d197      	bne.n	80021aa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 fe53 	bl	8002f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e01a      	b.n	80022c4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2220      	movs	r2, #32
 8002294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	490b      	ldr	r1, [pc, #44]	@ (80022d0 <HAL_I2C_Master_Receive+0x20c>)
 80022a2:	400a      	ands	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2241      	movs	r2, #65	@ 0x41
 80022aa:	2120      	movs	r1, #32
 80022ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2242      	movs	r2, #66	@ 0x42
 80022b2:	2100      	movs	r1, #0
 80022b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2240      	movs	r2, #64	@ 0x40
 80022ba:	2100      	movs	r1, #0
 80022bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
  }
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b007      	add	sp, #28
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	80002400 	.word	0x80002400
 80022d0:	fe00e800 	.word	0xfe00e800

080022d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	68f9      	ldr	r1, [r7, #12]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
  }
}
 8002300:	46c0      	nop			@ (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b004      	add	sp, #16
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	2380      	movs	r3, #128	@ 0x80
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4013      	ands	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2280      	movs	r2, #128	@ 0x80
 800232e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002330:	d00a      	beq.n	8002348 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	2201      	movs	r2, #1
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2280      	movs	r2, #128	@ 0x80
 8002344:	0052      	lsls	r2, r2, #1
 8002346:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4013      	ands	r3, r2
 8002350:	d00e      	beq.n	8002370 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2280      	movs	r2, #128	@ 0x80
 8002356:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002358:	d00a      	beq.n	8002370 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	2208      	movs	r2, #8
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2280      	movs	r2, #128	@ 0x80
 800236c:	00d2      	lsls	r2, r2, #3
 800236e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d00e      	beq.n	8002398 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2280      	movs	r2, #128	@ 0x80
 800237e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002380:	d00a      	beq.n	8002398 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	2202      	movs	r2, #2
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2280      	movs	r2, #128	@ 0x80
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	220b      	movs	r2, #11
 80023a2:	4013      	ands	r3, r2
 80023a4:	d005      	beq.n	80023b2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	0011      	movs	r1, r2
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 fbbd 	bl	8002b2c <I2C_ITError>
  }
}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b006      	add	sp, #24
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b002      	add	sp, #8
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	0008      	movs	r0, r1
 80023e4:	0011      	movs	r1, r2
 80023e6:	1cfb      	adds	r3, r7, #3
 80023e8:	1c02      	adds	r2, r0, #0
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	003b      	movs	r3, r7
 80023ee:	1c0a      	adds	r2, r1, #0
 80023f0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b002      	add	sp, #8
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	b002      	add	sp, #8
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b002      	add	sp, #8
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	b002      	add	sp, #8
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2240      	movs	r2, #64	@ 0x40
 8002446:	5c9b      	ldrb	r3, [r3, r2]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <I2C_Slave_ISR_IT+0x24>
 800244c:	2302      	movs	r3, #2
 800244e:	e0e6      	b.n	800261e <I2C_Slave_ISR_IT+0x1f2>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2240      	movs	r2, #64	@ 0x40
 8002454:	2101      	movs	r1, #1
 8002456:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2220      	movs	r2, #32
 800245c:	4013      	ands	r3, r2
 800245e:	d009      	beq.n	8002474 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002466:	d005      	beq.n	8002474 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	0011      	movs	r1, r2
 800246e:	0018      	movs	r0, r3
 8002470:	f000 f9e4 	bl	800283c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2210      	movs	r2, #16
 8002478:	4013      	ands	r3, r2
 800247a:	d052      	beq.n	8002522 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2210      	movs	r2, #16
 8002480:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002482:	d04e      	beq.n	8002522 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d12d      	bne.n	80024ea <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2241      	movs	r2, #65	@ 0x41
 8002492:	5c9b      	ldrb	r3, [r3, r2]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b28      	cmp	r3, #40	@ 0x28
 8002498:	d10b      	bne.n	80024b2 <I2C_Slave_ISR_IT+0x86>
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	049b      	lsls	r3, r3, #18
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d106      	bne.n	80024b2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	0011      	movs	r1, r2
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 fae6 	bl	8002a7c <I2C_ITListenCplt>
 80024b0:	e036      	b.n	8002520 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2241      	movs	r2, #65	@ 0x41
 80024b6:	5c9b      	ldrb	r3, [r3, r2]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b29      	cmp	r3, #41	@ 0x29
 80024bc:	d110      	bne.n	80024e0 <I2C_Slave_ISR_IT+0xb4>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	4a59      	ldr	r2, [pc, #356]	@ (8002628 <I2C_Slave_ISR_IT+0x1fc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00c      	beq.n	80024e0 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2210      	movs	r2, #16
 80024cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 fc56 	bl	8002d82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f94b 	bl	8002774 <I2C_ITSlaveSeqCplt>
 80024de:	e01f      	b.n	8002520 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2210      	movs	r2, #16
 80024e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80024e8:	e091      	b.n	800260e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2210      	movs	r2, #16
 80024f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	2204      	movs	r2, #4
 80024f8:	431a      	orrs	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <I2C_Slave_ISR_IT+0xe4>
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	045b      	lsls	r3, r3, #17
 800250a:	429a      	cmp	r2, r3
 800250c:	d000      	beq.n	8002510 <I2C_Slave_ISR_IT+0xe4>
 800250e:	e07e      	b.n	800260e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	0011      	movs	r1, r2
 8002518:	0018      	movs	r0, r3
 800251a:	f000 fb07 	bl	8002b2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800251e:	e076      	b.n	800260e <I2C_Slave_ISR_IT+0x1e2>
 8002520:	e075      	b.n	800260e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2204      	movs	r2, #4
 8002526:	4013      	ands	r3, r2
 8002528:	d02f      	beq.n	800258a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2204      	movs	r2, #4
 800252e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002530:	d02b      	beq.n	800258a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d018      	beq.n	800256e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d14c      	bne.n	8002612 <I2C_Slave_ISR_IT+0x1e6>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4a2b      	ldr	r2, [pc, #172]	@ (8002628 <I2C_Slave_ISR_IT+0x1fc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d048      	beq.n	8002612 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	0018      	movs	r0, r3
 8002584:	f000 f8f6 	bl	8002774 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002588:	e043      	b.n	8002612 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2208      	movs	r2, #8
 800258e:	4013      	ands	r3, r2
 8002590:	d00a      	beq.n	80025a8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2208      	movs	r2, #8
 8002596:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002598:	d006      	beq.n	80025a8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	0011      	movs	r1, r2
 80025a0:	0018      	movs	r0, r3
 80025a2:	f000 f843 	bl	800262c <I2C_ITAddrCplt>
 80025a6:	e035      	b.n	8002614 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	d031      	beq.n	8002614 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025b6:	d02d      	beq.n	8002614 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d018      	beq.n	80025f4 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80025f2:	e00f      	b.n	8002614 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	2380      	movs	r3, #128	@ 0x80
 80025f8:	045b      	lsls	r3, r3, #17
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d002      	beq.n	8002604 <I2C_Slave_ISR_IT+0x1d8>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d107      	bne.n	8002614 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	0018      	movs	r0, r3
 8002608:	f000 f8b4 	bl	8002774 <I2C_ITSlaveSeqCplt>
 800260c:	e002      	b.n	8002614 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	e000      	b.n	8002614 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8002612:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2240      	movs	r2, #64	@ 0x40
 8002618:	2100      	movs	r1, #0
 800261a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	b006      	add	sp, #24
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	ffff0000 	.word	0xffff0000

0800262c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800262c:	b5b0      	push	{r4, r5, r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2241      	movs	r2, #65	@ 0x41
 800263a:	5c9b      	ldrb	r3, [r3, r2]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	001a      	movs	r2, r3
 8002640:	2328      	movs	r3, #40	@ 0x28
 8002642:	4013      	ands	r3, r2
 8002644:	2b28      	cmp	r3, #40	@ 0x28
 8002646:	d000      	beq.n	800264a <I2C_ITAddrCplt+0x1e>
 8002648:	e088      	b.n	800275c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	b2da      	uxtb	r2, r3
 8002654:	250f      	movs	r5, #15
 8002656:	197b      	adds	r3, r7, r5
 8002658:	2101      	movs	r1, #1
 800265a:	400a      	ands	r2, r1
 800265c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	b29a      	uxth	r2, r3
 8002668:	200c      	movs	r0, #12
 800266a:	183b      	adds	r3, r7, r0
 800266c:	21fe      	movs	r1, #254	@ 0xfe
 800266e:	400a      	ands	r2, r1
 8002670:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	b29a      	uxth	r2, r3
 800267a:	240a      	movs	r4, #10
 800267c:	193b      	adds	r3, r7, r4
 800267e:	0592      	lsls	r2, r2, #22
 8002680:	0d92      	lsrs	r2, r2, #22
 8002682:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	b29a      	uxth	r2, r3
 800268c:	2308      	movs	r3, #8
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	21fe      	movs	r1, #254	@ 0xfe
 8002692:	400a      	ands	r2, r1
 8002694:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d148      	bne.n	8002730 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800269e:	0021      	movs	r1, r4
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	09db      	lsrs	r3, r3, #7
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	183b      	adds	r3, r7, r0
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	4053      	eors	r3, r2
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	001a      	movs	r2, r3
 80026b2:	2306      	movs	r3, #6
 80026b4:	4013      	ands	r3, r2
 80026b6:	d120      	bne.n	80026fa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80026b8:	183b      	adds	r3, r7, r0
 80026ba:	187a      	adds	r2, r7, r1
 80026bc:	8812      	ldrh	r2, [r2, #0]
 80026be:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d14c      	bne.n	800276c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2208      	movs	r2, #8
 80026de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2240      	movs	r2, #64	@ 0x40
 80026e4:	2100      	movs	r1, #0
 80026e6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026e8:	183b      	adds	r3, r7, r0
 80026ea:	881a      	ldrh	r2, [r3, #0]
 80026ec:	197b      	adds	r3, r7, r5
 80026ee:	7819      	ldrb	r1, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7ff fe71 	bl	80023da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80026f8:	e038      	b.n	800276c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80026fa:	240c      	movs	r4, #12
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	2208      	movs	r2, #8
 8002700:	18ba      	adds	r2, r7, r2
 8002702:	8812      	ldrh	r2, [r2, #0]
 8002704:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	0011      	movs	r1, r2
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fe04 	bl	800331c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2240      	movs	r2, #64	@ 0x40
 8002718:	2100      	movs	r1, #0
 800271a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800271c:	193b      	adds	r3, r7, r4
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	230f      	movs	r3, #15
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	7819      	ldrb	r1, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f7ff fe56 	bl	80023da <HAL_I2C_AddrCallback>
}
 800272e:	e01d      	b.n	800276c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	021a      	lsls	r2, r3, #8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	0011      	movs	r1, r2
 8002738:	0018      	movs	r0, r3
 800273a:	f000 fdef 	bl	800331c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2240      	movs	r2, #64	@ 0x40
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002746:	230c      	movs	r3, #12
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	881a      	ldrh	r2, [r3, #0]
 800274c:	230f      	movs	r3, #15
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	7819      	ldrb	r1, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f7ff fe40 	bl	80023da <HAL_I2C_AddrCallback>
}
 800275a:	e007      	b.n	800276c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2208      	movs	r2, #8
 8002762:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2240      	movs	r2, #64	@ 0x40
 8002768:	2100      	movs	r1, #0
 800276a:	5499      	strb	r1, [r3, r2]
}
 800276c:	46c0      	nop			@ (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bdb0      	pop	{r4, r5, r7, pc}

08002774 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2242      	movs	r2, #66	@ 0x42
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	01db      	lsls	r3, r3, #7
 8002792:	4013      	ands	r3, r2
 8002794:	d008      	beq.n	80027a8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4924      	ldr	r1, [pc, #144]	@ (8002834 <I2C_ITSlaveSeqCplt+0xc0>)
 80027a2:	400a      	ands	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e00c      	b.n	80027c2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	4013      	ands	r3, r2
 80027b0:	d007      	beq.n	80027c2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	491e      	ldr	r1, [pc, #120]	@ (8002838 <I2C_ITSlaveSeqCplt+0xc4>)
 80027be:	400a      	ands	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2241      	movs	r2, #65	@ 0x41
 80027c6:	5c9b      	ldrb	r3, [r3, r2]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b29      	cmp	r3, #41	@ 0x29
 80027cc:	d114      	bne.n	80027f8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2241      	movs	r2, #65	@ 0x41
 80027d2:	2128      	movs	r1, #40	@ 0x28
 80027d4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2221      	movs	r2, #33	@ 0x21
 80027da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2101      	movs	r1, #1
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 fd9b 	bl	800331c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2240      	movs	r2, #64	@ 0x40
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7ff fde2 	bl	80023ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80027f6:	e019      	b.n	800282c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2241      	movs	r2, #65	@ 0x41
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b2a      	cmp	r3, #42	@ 0x2a
 8002802:	d113      	bne.n	800282c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2241      	movs	r2, #65	@ 0x41
 8002808:	2128      	movs	r1, #40	@ 0x28
 800280a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2222      	movs	r2, #34	@ 0x22
 8002810:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2102      	movs	r1, #2
 8002816:	0018      	movs	r0, r3
 8002818:	f000 fd80 	bl	800331c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2240      	movs	r2, #64	@ 0x40
 8002820:	2100      	movs	r1, #0
 8002822:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0018      	movs	r0, r3
 8002828:	f7ff fdcf 	bl	80023ca <HAL_I2C_SlaveRxCpltCallback>
}
 800282c:	46c0      	nop			@ (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b004      	add	sp, #16
 8002832:	bd80      	pop	{r7, pc}
 8002834:	ffffbfff 	.word	0xffffbfff
 8002838:	ffff7fff 	.word	0xffff7fff

0800283c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002852:	200f      	movs	r0, #15
 8002854:	183b      	adds	r3, r7, r0
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	2141      	movs	r1, #65	@ 0x41
 800285a:	5c52      	ldrb	r2, [r2, r1]
 800285c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2220      	movs	r2, #32
 8002864:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002866:	183b      	adds	r3, r7, r0
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b21      	cmp	r3, #33	@ 0x21
 800286c:	d003      	beq.n	8002876 <I2C_ITSlaveCplt+0x3a>
 800286e:	183b      	adds	r3, r7, r0
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b29      	cmp	r3, #41	@ 0x29
 8002874:	d109      	bne.n	800288a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002876:	4a7b      	ldr	r2, [pc, #492]	@ (8002a64 <I2C_ITSlaveCplt+0x228>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0011      	movs	r1, r2
 800287c:	0018      	movs	r0, r3
 800287e:	f000 fd4d 	bl	800331c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2221      	movs	r2, #33	@ 0x21
 8002886:	631a      	str	r2, [r3, #48]	@ 0x30
 8002888:	e011      	b.n	80028ae <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800288a:	220f      	movs	r2, #15
 800288c:	18bb      	adds	r3, r7, r2
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b22      	cmp	r3, #34	@ 0x22
 8002892:	d003      	beq.n	800289c <I2C_ITSlaveCplt+0x60>
 8002894:	18bb      	adds	r3, r7, r2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b2a      	cmp	r3, #42	@ 0x2a
 800289a:	d108      	bne.n	80028ae <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800289c:	4a72      	ldr	r2, [pc, #456]	@ (8002a68 <I2C_ITSlaveCplt+0x22c>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0011      	movs	r1, r2
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 fd3a 	bl	800331c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2222      	movs	r2, #34	@ 0x22
 80028ac:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2180      	movs	r1, #128	@ 0x80
 80028ba:	0209      	lsls	r1, r1, #8
 80028bc:	430a      	orrs	r2, r1
 80028be:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4968      	ldr	r1, [pc, #416]	@ (8002a6c <I2C_ITSlaveCplt+0x230>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 fa55 	bl	8002d82 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	2380      	movs	r3, #128	@ 0x80
 80028dc:	01db      	lsls	r3, r3, #7
 80028de:	4013      	ands	r3, r2
 80028e0:	d013      	beq.n	800290a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4960      	ldr	r1, [pc, #384]	@ (8002a70 <I2C_ITSlaveCplt+0x234>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01f      	beq.n	800293a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002908:	e017      	b.n	800293a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	4013      	ands	r3, r2
 8002912:	d012      	beq.n	800293a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4955      	ldr	r1, [pc, #340]	@ (8002a74 <I2C_ITSlaveCplt+0x238>)
 8002920:	400a      	ands	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d006      	beq.n	800293a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	b29a      	uxth	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2204      	movs	r2, #4
 800293e:	4013      	ands	r3, r2
 8002940:	d020      	beq.n	8002984 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2204      	movs	r2, #4
 8002946:	4393      	bics	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	2204      	movs	r2, #4
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2242      	movs	r2, #66	@ 0x42
 800299e:	2100      	movs	r1, #0
 80029a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0011      	movs	r1, r2
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 f8b7 	bl	8002b2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2241      	movs	r2, #65	@ 0x41
 80029c2:	5c9b      	ldrb	r3, [r3, r2]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b28      	cmp	r3, #40	@ 0x28
 80029c8:	d147      	bne.n	8002a5a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0011      	movs	r1, r2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 f853 	bl	8002a7c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80029d6:	e040      	b.n	8002a5a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	4a26      	ldr	r2, [pc, #152]	@ (8002a78 <I2C_ITSlaveCplt+0x23c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d016      	beq.n	8002a10 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff fec5 	bl	8002774 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a22      	ldr	r2, [pc, #136]	@ (8002a78 <I2C_ITSlaveCplt+0x23c>)
 80029ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2241      	movs	r2, #65	@ 0x41
 80029f4:	2120      	movs	r1, #32
 80029f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2240      	movs	r2, #64	@ 0x40
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff fcf6 	bl	80023fa <HAL_I2C_ListenCpltCallback>
}
 8002a0e:	e024      	b.n	8002a5a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2241      	movs	r2, #65	@ 0x41
 8002a14:	5c9b      	ldrb	r3, [r3, r2]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b22      	cmp	r3, #34	@ 0x22
 8002a1a:	d10f      	bne.n	8002a3c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2241      	movs	r2, #65	@ 0x41
 8002a20:	2120      	movs	r1, #32
 8002a22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2240      	movs	r2, #64	@ 0x40
 8002a2e:	2100      	movs	r1, #0
 8002a30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff fcc8 	bl	80023ca <HAL_I2C_SlaveRxCpltCallback>
}
 8002a3a:	e00e      	b.n	8002a5a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2241      	movs	r2, #65	@ 0x41
 8002a40:	2120      	movs	r1, #32
 8002a42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2240      	movs	r2, #64	@ 0x40
 8002a4e:	2100      	movs	r1, #0
 8002a50:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7ff fcb0 	bl	80023ba <HAL_I2C_SlaveTxCpltCallback>
}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b006      	add	sp, #24
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	00008001 	.word	0x00008001
 8002a68:	00008002 	.word	0x00008002
 8002a6c:	fe00e800 	.word	0xfe00e800
 8002a70:	ffffbfff 	.word	0xffffbfff
 8002a74:	ffff7fff 	.word	0xffff7fff
 8002a78:	ffff0000 	.word	0xffff0000

08002a7c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a26      	ldr	r2, [pc, #152]	@ (8002b24 <I2C_ITListenCplt+0xa8>)
 8002a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2241      	movs	r2, #65	@ 0x41
 8002a96:	2120      	movs	r1, #32
 8002a98:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2242      	movs	r2, #66	@ 0x42
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2204      	movs	r2, #4
 8002aac:	4013      	ands	r3, r2
 8002aae:	d022      	beq.n	8002af6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	2204      	movs	r2, #4
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002af6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b28 <I2C_ITListenCplt+0xac>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0011      	movs	r1, r2
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 fc0d 	bl	800331c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2210      	movs	r2, #16
 8002b08:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2240      	movs	r2, #64	@ 0x40
 8002b0e:	2100      	movs	r1, #0
 8002b10:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7ff fc70 	bl	80023fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b002      	add	sp, #8
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	ffff0000 	.word	0xffff0000
 8002b28:	00008003 	.word	0x00008003

08002b2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b36:	200f      	movs	r0, #15
 8002b38:	183b      	adds	r3, r7, r0
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	2141      	movs	r1, #65	@ 0x41
 8002b3e:	5c52      	ldrb	r2, [r2, r1]
 8002b40:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2242      	movs	r2, #66	@ 0x42
 8002b46:	2100      	movs	r1, #0
 8002b48:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a72      	ldr	r2, [pc, #456]	@ (8002d18 <I2C_ITError+0x1ec>)
 8002b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002b62:	183b      	adds	r3, r7, r0
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b28      	cmp	r3, #40	@ 0x28
 8002b68:	d007      	beq.n	8002b7a <I2C_ITError+0x4e>
 8002b6a:	183b      	adds	r3, r7, r0
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b29      	cmp	r3, #41	@ 0x29
 8002b70:	d003      	beq.n	8002b7a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002b72:	183b      	adds	r3, r7, r0
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b78:	d10c      	bne.n	8002b94 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2103      	movs	r1, #3
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 fbcc 	bl	800331c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2241      	movs	r2, #65	@ 0x41
 8002b88:	2128      	movs	r1, #40	@ 0x28
 8002b8a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a63      	ldr	r2, [pc, #396]	@ (8002d1c <I2C_ITError+0x1f0>)
 8002b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b92:	e032      	b.n	8002bfa <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b94:	4a62      	ldr	r2, [pc, #392]	@ (8002d20 <I2C_ITError+0x1f4>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	0011      	movs	r1, r2
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fbbe 	bl	800331c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 f8ed 	bl	8002d82 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2241      	movs	r2, #65	@ 0x41
 8002bac:	5c9b      	ldrb	r3, [r3, r2]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b60      	cmp	r3, #96	@ 0x60
 8002bb2:	d01f      	beq.n	8002bf4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2241      	movs	r2, #65	@ 0x41
 8002bb8:	2120      	movs	r1, #32
 8002bba:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d114      	bne.n	8002bf4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2210      	movs	r2, #16
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d109      	bne.n	8002bec <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be4:	2204      	movs	r2, #4
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d03b      	beq.n	8002c80 <I2C_ITError+0x154>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b11      	cmp	r3, #17
 8002c0c:	d002      	beq.n	8002c14 <I2C_ITError+0xe8>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b21      	cmp	r3, #33	@ 0x21
 8002c12:	d135      	bne.n	8002c80 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	01db      	lsls	r3, r3, #7
 8002c1e:	401a      	ands	r2, r3
 8002c20:	2380      	movs	r3, #128	@ 0x80
 8002c22:	01db      	lsls	r3, r3, #7
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	493c      	ldr	r1, [pc, #240]	@ (8002d24 <I2C_ITError+0x1f8>)
 8002c34:	400a      	ands	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7fe fec2 	bl	80019c6 <HAL_DMA_GetState>
 8002c42:	0003      	movs	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d016      	beq.n	8002c76 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4c:	4a36      	ldr	r2, [pc, #216]	@ (8002d28 <I2C_ITError+0x1fc>)
 8002c4e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2240      	movs	r2, #64	@ 0x40
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f7fe fe6b 	bl	8001938 <HAL_DMA_Abort_IT>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d051      	beq.n	8002d0a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c70:	0018      	movs	r0, r3
 8002c72:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c74:	e049      	b.n	8002d0a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 f859 	bl	8002d30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c7e:	e044      	b.n	8002d0a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d03b      	beq.n	8002d00 <I2C_ITError+0x1d4>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b12      	cmp	r3, #18
 8002c8c:	d002      	beq.n	8002c94 <I2C_ITError+0x168>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b22      	cmp	r3, #34	@ 0x22
 8002c92:	d135      	bne.n	8002d00 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	2380      	movs	r3, #128	@ 0x80
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	2380      	movs	r3, #128	@ 0x80
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d107      	bne.n	8002cb8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	491e      	ldr	r1, [pc, #120]	@ (8002d2c <I2C_ITError+0x200>)
 8002cb4:	400a      	ands	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7fe fe82 	bl	80019c6 <HAL_DMA_GetState>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d016      	beq.n	8002cf6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	4a16      	ldr	r2, [pc, #88]	@ (8002d28 <I2C_ITError+0x1fc>)
 8002cce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2240      	movs	r2, #64	@ 0x40
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7fe fe2b 	bl	8001938 <HAL_DMA_Abort_IT>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d013      	beq.n	8002d0e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cf4:	e00b      	b.n	8002d0e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f819 	bl	8002d30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cfe:	e006      	b.n	8002d0e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 f814 	bl	8002d30 <I2C_TreatErrorCallback>
  }
}
 8002d08:	e002      	b.n	8002d10 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	e000      	b.n	8002d10 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d0e:	46c0      	nop			@ (mov r8, r8)
}
 8002d10:	46c0      	nop			@ (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b004      	add	sp, #16
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	ffff0000 	.word	0xffff0000
 8002d1c:	0800242d 	.word	0x0800242d
 8002d20:	00008003 	.word	0x00008003
 8002d24:	ffffbfff 	.word	0xffffbfff
 8002d28:	08002dc7 	.word	0x08002dc7
 8002d2c:	ffff7fff 	.word	0xffff7fff

08002d30 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2241      	movs	r2, #65	@ 0x41
 8002d3c:	5c9b      	ldrb	r3, [r3, r2]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b60      	cmp	r3, #96	@ 0x60
 8002d42:	d10f      	bne.n	8002d64 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2241      	movs	r2, #65	@ 0x41
 8002d48:	2120      	movs	r1, #32
 8002d4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2240      	movs	r2, #64	@ 0x40
 8002d56:	2100      	movs	r1, #0
 8002d58:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7ff fb5c 	bl	800241a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d62:	e00a      	b.n	8002d7a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2240      	movs	r2, #64	@ 0x40
 8002d6e:	2100      	movs	r1, #0
 8002d70:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff fb48 	bl	800240a <HAL_I2C_ErrorCallback>
}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2202      	movs	r2, #2
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d103      	bne.n	8002da0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2201      	movs	r2, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d007      	beq.n	8002dbe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	619a      	str	r2, [r3, #24]
  }
}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	2200      	movs	r2, #0
 8002de2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df0:	2200      	movs	r2, #0
 8002df2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7ff ff9a 	bl	8002d30 <I2C_TreatErrorCallback>
}
 8002dfc:	46c0      	nop			@ (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	1dfb      	adds	r3, r7, #7
 8002e12:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	e030      	b.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	d02d      	beq.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1c:	f7fe fc40 	bl	80016a0 <HAL_GetTick>
 8002e20:	0002      	movs	r2, r0
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d302      	bcc.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d122      	bne.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	425a      	negs	r2, r3
 8002e42:	4153      	adcs	r3, r2
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	001a      	movs	r2, r3
 8002e48:	1dfb      	adds	r3, r7, #7
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d113      	bne.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e54:	2220      	movs	r2, #32
 8002e56:	431a      	orrs	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2241      	movs	r2, #65	@ 0x41
 8002e60:	2120      	movs	r1, #32
 8002e62:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2242      	movs	r2, #66	@ 0x42
 8002e68:	2100      	movs	r1, #0
 8002e6a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2240      	movs	r2, #64	@ 0x40
 8002e70:	2100      	movs	r1, #0
 8002e72:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e00f      	b.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	4013      	ands	r3, r2
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	425a      	negs	r2, r3
 8002e88:	4153      	adcs	r3, r2
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d0bf      	beq.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b004      	add	sp, #16
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eac:	e032      	b.n	8002f14 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 f8ff 	bl	80030b8 <I2C_IsErrorOccurred>
 8002eba:	1e03      	subs	r3, r0, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e030      	b.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	d025      	beq.n	8002f14 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec8:	f7fe fbea 	bl	80016a0 <HAL_GetTick>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d302      	bcc.n	8002ede <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11a      	bne.n	8002f14 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d013      	beq.n	8002f14 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2241      	movs	r2, #65	@ 0x41
 8002efc:	2120      	movs	r1, #32
 8002efe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2242      	movs	r2, #66	@ 0x42
 8002f04:	2100      	movs	r1, #0
 8002f06:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2240      	movs	r2, #64	@ 0x40
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e007      	b.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d1c5      	bne.n	8002eae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b004      	add	sp, #16
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f38:	e02f      	b.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 f8b9 	bl	80030b8 <I2C_IsErrorOccurred>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e02d      	b.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4e:	f7fe fba7 	bl	80016a0 <HAL_GetTick>
 8002f52:	0002      	movs	r2, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11a      	bne.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d013      	beq.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	2220      	movs	r2, #32
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2241      	movs	r2, #65	@ 0x41
 8002f82:	2120      	movs	r1, #32
 8002f84:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2242      	movs	r2, #66	@ 0x42
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2240      	movs	r2, #64	@ 0x40
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e007      	b.n	8002faa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d1c8      	bne.n	8002f3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b004      	add	sp, #16
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fc0:	e06b      	b.n	800309a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 f875 	bl	80030b8 <I2C_IsErrorOccurred>
 8002fce:	1e03      	subs	r3, r0, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e069      	b.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d138      	bne.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d105      	bne.n	8002ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e055      	b.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2210      	movs	r2, #16
 8003006:	4013      	ands	r3, r2
 8003008:	2b10      	cmp	r3, #16
 800300a:	d107      	bne.n	800301c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2210      	movs	r2, #16
 8003012:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2204      	movs	r2, #4
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
 800301a:	e002      	b.n	8003022 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2220      	movs	r2, #32
 8003028:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	491f      	ldr	r1, [pc, #124]	@ (80030b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003036:	400a      	ands	r2, r1
 8003038:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2241      	movs	r2, #65	@ 0x41
 800303e:	2120      	movs	r1, #32
 8003040:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2242      	movs	r2, #66	@ 0x42
 8003046:	2100      	movs	r1, #0
 8003048:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	2100      	movs	r1, #0
 8003050:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e029      	b.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003056:	f7fe fb23 	bl	80016a0 <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d116      	bne.n	800309a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2204      	movs	r2, #4
 8003074:	4013      	ands	r3, r2
 8003076:	2b04      	cmp	r3, #4
 8003078:	d00f      	beq.n	800309a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	2220      	movs	r2, #32
 8003080:	431a      	orrs	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2241      	movs	r2, #65	@ 0x41
 800308a:	2120      	movs	r1, #32
 800308c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2240      	movs	r2, #64	@ 0x40
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e007      	b.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2204      	movs	r2, #4
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d18c      	bne.n	8002fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	0018      	movs	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b004      	add	sp, #16
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	fe00e800 	.word	0xfe00e800

080030b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	@ 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2327      	movs	r3, #39	@ 0x27
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2210      	movs	r2, #16
 80030e0:	4013      	ands	r3, r2
 80030e2:	d100      	bne.n	80030e6 <I2C_IsErrorOccurred+0x2e>
 80030e4:	e079      	b.n	80031da <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2210      	movs	r2, #16
 80030ec:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030ee:	e057      	b.n	80031a0 <I2C_IsErrorOccurred+0xe8>
 80030f0:	2227      	movs	r2, #39	@ 0x27
 80030f2:	18bb      	adds	r3, r7, r2
 80030f4:	18ba      	adds	r2, r7, r2
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3301      	adds	r3, #1
 80030fe:	d04f      	beq.n	80031a0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003100:	f7fe face 	bl	80016a0 <HAL_GetTick>
 8003104:	0002      	movs	r2, r0
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	d302      	bcc.n	8003116 <I2C_IsErrorOccurred+0x5e>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d144      	bne.n	80031a0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	2380      	movs	r3, #128	@ 0x80
 800311e:	01db      	lsls	r3, r3, #7
 8003120:	4013      	ands	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003124:	2013      	movs	r0, #19
 8003126:	183b      	adds	r3, r7, r0
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	2142      	movs	r1, #66	@ 0x42
 800312c:	5c52      	ldrb	r2, [r2, r1]
 800312e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	401a      	ands	r2, r3
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	429a      	cmp	r2, r3
 8003142:	d126      	bne.n	8003192 <I2C_IsErrorOccurred+0xda>
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	2380      	movs	r3, #128	@ 0x80
 8003148:	01db      	lsls	r3, r3, #7
 800314a:	429a      	cmp	r2, r3
 800314c:	d021      	beq.n	8003192 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800314e:	183b      	adds	r3, r7, r0
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b20      	cmp	r3, #32
 8003154:	d01d      	beq.n	8003192 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2180      	movs	r1, #128	@ 0x80
 8003162:	01c9      	lsls	r1, r1, #7
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003168:	f7fe fa9a 	bl	80016a0 <HAL_GetTick>
 800316c:	0003      	movs	r3, r0
 800316e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003170:	e00f      	b.n	8003192 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003172:	f7fe fa95 	bl	80016a0 <HAL_GetTick>
 8003176:	0002      	movs	r2, r0
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b19      	cmp	r3, #25
 800317e:	d908      	bls.n	8003192 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	2220      	movs	r2, #32
 8003184:	4313      	orrs	r3, r2
 8003186:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003188:	2327      	movs	r3, #39	@ 0x27
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]

              break;
 8003190:	e006      	b.n	80031a0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2220      	movs	r2, #32
 800319a:	4013      	ands	r3, r2
 800319c:	2b20      	cmp	r3, #32
 800319e:	d1e8      	bne.n	8003172 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2220      	movs	r2, #32
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d004      	beq.n	80031b8 <I2C_IsErrorOccurred+0x100>
 80031ae:	2327      	movs	r3, #39	@ 0x27
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d09b      	beq.n	80030f0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031b8:	2327      	movs	r3, #39	@ 0x27
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2220      	movs	r2, #32
 80031c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	2204      	movs	r2, #4
 80031ce:	4313      	orrs	r3, r2
 80031d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031d2:	2327      	movs	r3, #39	@ 0x27
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4013      	ands	r3, r2
 80031ea:	d00c      	beq.n	8003206 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	2201      	movs	r2, #1
 80031f0:	4313      	orrs	r3, r2
 80031f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2280      	movs	r2, #128	@ 0x80
 80031fa:	0052      	lsls	r2, r2, #1
 80031fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031fe:	2327      	movs	r3, #39	@ 0x27
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4013      	ands	r3, r2
 800320e:	d00c      	beq.n	800322a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	2208      	movs	r2, #8
 8003214:	4313      	orrs	r3, r2
 8003216:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2280      	movs	r2, #128	@ 0x80
 800321e:	00d2      	lsls	r2, r2, #3
 8003220:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003222:	2327      	movs	r3, #39	@ 0x27
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4013      	ands	r3, r2
 8003232:	d00c      	beq.n	800324e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2202      	movs	r2, #2
 8003238:	4313      	orrs	r3, r2
 800323a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2280      	movs	r2, #128	@ 0x80
 8003242:	0092      	lsls	r2, r2, #2
 8003244:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003246:	2327      	movs	r3, #39	@ 0x27
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800324e:	2327      	movs	r3, #39	@ 0x27
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01d      	beq.n	8003294 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	0018      	movs	r0, r3
 800325c:	f7ff fd91 	bl	8002d82 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	490e      	ldr	r1, [pc, #56]	@ (80032a4 <I2C_IsErrorOccurred+0x1ec>)
 800326c:	400a      	ands	r2, r1
 800326e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2241      	movs	r2, #65	@ 0x41
 8003280:	2120      	movs	r1, #32
 8003282:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2242      	movs	r2, #66	@ 0x42
 8003288:	2100      	movs	r1, #0
 800328a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2240      	movs	r2, #64	@ 0x40
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003294:	2327      	movs	r3, #39	@ 0x27
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	781b      	ldrb	r3, [r3, #0]
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b00a      	add	sp, #40	@ 0x28
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	fe00e800 	.word	0xfe00e800

080032a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	0008      	movs	r0, r1
 80032b2:	0011      	movs	r1, r2
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	240a      	movs	r4, #10
 80032b8:	193b      	adds	r3, r7, r4
 80032ba:	1c02      	adds	r2, r0, #0
 80032bc:	801a      	strh	r2, [r3, #0]
 80032be:	2009      	movs	r0, #9
 80032c0:	183b      	adds	r3, r7, r0
 80032c2:	1c0a      	adds	r2, r1, #0
 80032c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	059b      	lsls	r3, r3, #22
 80032cc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ce:	183b      	adds	r3, r7, r0
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	0419      	lsls	r1, r3, #16
 80032d4:	23ff      	movs	r3, #255	@ 0xff
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032da:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e2:	4313      	orrs	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032f2:	0d51      	lsrs	r1, r2, #21
 80032f4:	2280      	movs	r2, #128	@ 0x80
 80032f6:	00d2      	lsls	r2, r2, #3
 80032f8:	400a      	ands	r2, r1
 80032fa:	4907      	ldr	r1, [pc, #28]	@ (8003318 <I2C_TransferConfig+0x70>)
 80032fc:	430a      	orrs	r2, r1
 80032fe:	43d2      	mvns	r2, r2
 8003300:	401a      	ands	r2, r3
 8003302:	0011      	movs	r1, r2
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b007      	add	sp, #28
 8003314:	bd90      	pop	{r4, r7, pc}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	03ff63ff 	.word	0x03ff63ff

0800331c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	000a      	movs	r2, r1
 8003326:	1cbb      	adds	r3, r7, #2
 8003328:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800332e:	1cbb      	adds	r3, r7, #2
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	2201      	movs	r2, #1
 8003334:	4013      	ands	r3, r2
 8003336:	d010      	beq.n	800335a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2242      	movs	r2, #66	@ 0x42
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2241      	movs	r2, #65	@ 0x41
 8003344:	5c9b      	ldrb	r3, [r3, r2]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	001a      	movs	r2, r3
 800334a:	2328      	movs	r3, #40	@ 0x28
 800334c:	4013      	ands	r3, r2
 800334e:	2b28      	cmp	r3, #40	@ 0x28
 8003350:	d003      	beq.n	800335a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	22b0      	movs	r2, #176	@ 0xb0
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800335a:	1cbb      	adds	r3, r7, #2
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	2202      	movs	r2, #2
 8003360:	4013      	ands	r3, r2
 8003362:	d010      	beq.n	8003386 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2244      	movs	r2, #68	@ 0x44
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2241      	movs	r2, #65	@ 0x41
 8003370:	5c9b      	ldrb	r3, [r3, r2]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	001a      	movs	r2, r3
 8003376:	2328      	movs	r3, #40	@ 0x28
 8003378:	4013      	ands	r3, r2
 800337a:	2b28      	cmp	r3, #40	@ 0x28
 800337c:	d003      	beq.n	8003386 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	22b0      	movs	r2, #176	@ 0xb0
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003386:	1cbb      	adds	r3, r7, #2
 8003388:	2200      	movs	r2, #0
 800338a:	5e9b      	ldrsh	r3, [r3, r2]
 800338c:	2b00      	cmp	r3, #0
 800338e:	da03      	bge.n	8003398 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	22b8      	movs	r2, #184	@ 0xb8
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003398:	1cbb      	adds	r3, r7, #2
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	2b10      	cmp	r3, #16
 800339e:	d103      	bne.n	80033a8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2290      	movs	r2, #144	@ 0x90
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80033a8:	1cbb      	adds	r3, r7, #2
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d103      	bne.n	80033b8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80033b8:	1cbb      	adds	r3, r7, #2
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	2b40      	cmp	r3, #64	@ 0x40
 80033be:	d103      	bne.n	80033c8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2240      	movs	r2, #64	@ 0x40
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	43d9      	mvns	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	400a      	ands	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]
}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b004      	add	sp, #16
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2241      	movs	r2, #65	@ 0x41
 80033f2:	5c9b      	ldrb	r3, [r3, r2]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d138      	bne.n	800346c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2240      	movs	r2, #64	@ 0x40
 80033fe:	5c9b      	ldrb	r3, [r3, r2]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003404:	2302      	movs	r3, #2
 8003406:	e032      	b.n	800346e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2240      	movs	r2, #64	@ 0x40
 800340c:	2101      	movs	r1, #1
 800340e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2241      	movs	r2, #65	@ 0x41
 8003414:	2124      	movs	r1, #36	@ 0x24
 8003416:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2101      	movs	r1, #1
 8003424:	438a      	bics	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4911      	ldr	r1, [pc, #68]	@ (8003478 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003434:	400a      	ands	r2, r1
 8003436:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2101      	movs	r1, #1
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2241      	movs	r2, #65	@ 0x41
 800345c:	2120      	movs	r1, #32
 800345e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2240      	movs	r2, #64	@ 0x40
 8003464:	2100      	movs	r1, #0
 8003466:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	ffffefff 	.word	0xffffefff

0800347c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2241      	movs	r2, #65	@ 0x41
 800348a:	5c9b      	ldrb	r3, [r3, r2]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b20      	cmp	r3, #32
 8003490:	d139      	bne.n	8003506 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2240      	movs	r2, #64	@ 0x40
 8003496:	5c9b      	ldrb	r3, [r3, r2]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800349c:	2302      	movs	r3, #2
 800349e:	e033      	b.n	8003508 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2240      	movs	r2, #64	@ 0x40
 80034a4:	2101      	movs	r1, #1
 80034a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2241      	movs	r2, #65	@ 0x41
 80034ac:	2124      	movs	r1, #36	@ 0x24
 80034ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2101      	movs	r1, #1
 80034bc:	438a      	bics	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a11      	ldr	r2, [pc, #68]	@ (8003510 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2101      	movs	r1, #1
 80034ee:	430a      	orrs	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2241      	movs	r2, #65	@ 0x41
 80034f6:	2120      	movs	r1, #32
 80034f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2240      	movs	r2, #64	@ 0x40
 80034fe:	2100      	movs	r1, #0
 8003500:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e000      	b.n	8003508 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003506:	2302      	movs	r3, #2
  }
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b004      	add	sp, #16
 800350e:	bd80      	pop	{r7, pc}
 8003510:	fffff0ff 	.word	0xfffff0ff

08003514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	b5b0      	push	{r4, r5, r7, lr}
 8003516:	b08a      	sub	sp, #40	@ 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f000 fbbf 	bl	8003ca6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003528:	4bc9      	ldr	r3, [pc, #804]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	220c      	movs	r2, #12
 800352e:	4013      	ands	r3, r2
 8003530:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003532:	4bc7      	ldr	r3, [pc, #796]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	2380      	movs	r3, #128	@ 0x80
 8003538:	025b      	lsls	r3, r3, #9
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2201      	movs	r2, #1
 8003544:	4013      	ands	r3, r2
 8003546:	d100      	bne.n	800354a <HAL_RCC_OscConfig+0x36>
 8003548:	e07e      	b.n	8003648 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d007      	beq.n	8003560 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b0c      	cmp	r3, #12
 8003554:	d112      	bne.n	800357c <HAL_RCC_OscConfig+0x68>
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	2380      	movs	r3, #128	@ 0x80
 800355a:	025b      	lsls	r3, r3, #9
 800355c:	429a      	cmp	r2, r3
 800355e:	d10d      	bne.n	800357c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	4bbb      	ldr	r3, [pc, #748]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2380      	movs	r3, #128	@ 0x80
 8003566:	029b      	lsls	r3, r3, #10
 8003568:	4013      	ands	r3, r2
 800356a:	d100      	bne.n	800356e <HAL_RCC_OscConfig+0x5a>
 800356c:	e06b      	b.n	8003646 <HAL_RCC_OscConfig+0x132>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d167      	bne.n	8003646 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f000 fb95 	bl	8003ca6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	025b      	lsls	r3, r3, #9
 8003584:	429a      	cmp	r2, r3
 8003586:	d107      	bne.n	8003598 <HAL_RCC_OscConfig+0x84>
 8003588:	4bb1      	ldr	r3, [pc, #708]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4bb0      	ldr	r3, [pc, #704]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 800358e:	2180      	movs	r1, #128	@ 0x80
 8003590:	0249      	lsls	r1, r1, #9
 8003592:	430a      	orrs	r2, r1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e027      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	23a0      	movs	r3, #160	@ 0xa0
 800359e:	02db      	lsls	r3, r3, #11
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d10e      	bne.n	80035c2 <HAL_RCC_OscConfig+0xae>
 80035a4:	4baa      	ldr	r3, [pc, #680]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4ba9      	ldr	r3, [pc, #676]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80035aa:	2180      	movs	r1, #128	@ 0x80
 80035ac:	02c9      	lsls	r1, r1, #11
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	4ba7      	ldr	r3, [pc, #668]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4ba6      	ldr	r3, [pc, #664]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80035b8:	2180      	movs	r1, #128	@ 0x80
 80035ba:	0249      	lsls	r1, r1, #9
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e012      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 80035c2:	4ba3      	ldr	r3, [pc, #652]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4ba2      	ldr	r3, [pc, #648]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80035c8:	49a2      	ldr	r1, [pc, #648]	@ (8003854 <HAL_RCC_OscConfig+0x340>)
 80035ca:	400a      	ands	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	4ba0      	ldr	r3, [pc, #640]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	2380      	movs	r3, #128	@ 0x80
 80035d4:	025b      	lsls	r3, r3, #9
 80035d6:	4013      	ands	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4b9c      	ldr	r3, [pc, #624]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b9b      	ldr	r3, [pc, #620]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80035e2:	499d      	ldr	r1, [pc, #628]	@ (8003858 <HAL_RCC_OscConfig+0x344>)
 80035e4:	400a      	ands	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe f856 	bl	80016a0 <HAL_GetTick>
 80035f4:	0003      	movs	r3, r0
 80035f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035f8:	e009      	b.n	800360e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035fa:	f7fe f851 	bl	80016a0 <HAL_GetTick>
 80035fe:	0002      	movs	r2, r0
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	@ 0x64
 8003606:	d902      	bls.n	800360e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	f000 fb4c 	bl	8003ca6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800360e:	4b90      	ldr	r3, [pc, #576]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	029b      	lsls	r3, r3, #10
 8003616:	4013      	ands	r3, r2
 8003618:	d0ef      	beq.n	80035fa <HAL_RCC_OscConfig+0xe6>
 800361a:	e015      	b.n	8003648 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fe f840 	bl	80016a0 <HAL_GetTick>
 8003620:	0003      	movs	r3, r0
 8003622:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003626:	f7fe f83b 	bl	80016a0 <HAL_GetTick>
 800362a:	0002      	movs	r2, r0
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b64      	cmp	r3, #100	@ 0x64
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e336      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003638:	4b85      	ldr	r3, [pc, #532]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2380      	movs	r3, #128	@ 0x80
 800363e:	029b      	lsls	r3, r3, #10
 8003640:	4013      	ands	r3, r2
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0x112>
 8003644:	e000      	b.n	8003648 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003646:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2202      	movs	r2, #2
 800364e:	4013      	ands	r3, r2
 8003650:	d100      	bne.n	8003654 <HAL_RCC_OscConfig+0x140>
 8003652:	e099      	b.n	8003788 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	2220      	movs	r2, #32
 800365e:	4013      	ands	r3, r2
 8003660:	d009      	beq.n	8003676 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003662:	4b7b      	ldr	r3, [pc, #492]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4b7a      	ldr	r3, [pc, #488]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003668:	2120      	movs	r1, #32
 800366a:	430a      	orrs	r2, r1
 800366c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	2220      	movs	r2, #32
 8003672:	4393      	bics	r3, r2
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2b04      	cmp	r3, #4
 800367a:	d005      	beq.n	8003688 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d13e      	bne.n	8003700 <HAL_RCC_OscConfig+0x1ec>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d13b      	bne.n	8003700 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003688:	4b71      	ldr	r3, [pc, #452]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2204      	movs	r2, #4
 800368e:	4013      	ands	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_RCC_OscConfig+0x188>
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e304      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369c:	4b6c      	ldr	r3, [pc, #432]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a6e      	ldr	r2, [pc, #440]	@ (800385c <HAL_RCC_OscConfig+0x348>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	021a      	lsls	r2, r3, #8
 80036ac:	4b68      	ldr	r3, [pc, #416]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80036b2:	4b67      	ldr	r3, [pc, #412]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2209      	movs	r2, #9
 80036b8:	4393      	bics	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	4b64      	ldr	r3, [pc, #400]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80036be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c4:	f000 fc42 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 80036c8:	0001      	movs	r1, r0
 80036ca:	4b61      	ldr	r3, [pc, #388]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	220f      	movs	r2, #15
 80036d2:	4013      	ands	r3, r2
 80036d4:	4a62      	ldr	r2, [pc, #392]	@ (8003860 <HAL_RCC_OscConfig+0x34c>)
 80036d6:	5cd3      	ldrb	r3, [r2, r3]
 80036d8:	000a      	movs	r2, r1
 80036da:	40da      	lsrs	r2, r3
 80036dc:	4b61      	ldr	r3, [pc, #388]	@ (8003864 <HAL_RCC_OscConfig+0x350>)
 80036de:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80036e0:	4b61      	ldr	r3, [pc, #388]	@ (8003868 <HAL_RCC_OscConfig+0x354>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2513      	movs	r5, #19
 80036e6:	197c      	adds	r4, r7, r5
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7fd ff93 	bl	8001614 <HAL_InitTick>
 80036ee:	0003      	movs	r3, r0
 80036f0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80036f2:	197b      	adds	r3, r7, r5
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d046      	beq.n	8003788 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80036fa:	197b      	adds	r3, r7, r5
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	e2d2      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	2b00      	cmp	r3, #0
 8003704:	d027      	beq.n	8003756 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003706:	4b52      	ldr	r3, [pc, #328]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2209      	movs	r2, #9
 800370c:	4393      	bics	r3, r2
 800370e:	0019      	movs	r1, r3
 8003710:	4b4f      	ldr	r3, [pc, #316]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fd ffc2 	bl	80016a0 <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003722:	f7fd ffbd 	bl	80016a0 <HAL_GetTick>
 8003726:	0002      	movs	r2, r0
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e2b8      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003734:	4b46      	ldr	r3, [pc, #280]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2204      	movs	r2, #4
 800373a:	4013      	ands	r3, r2
 800373c:	d0f1      	beq.n	8003722 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b44      	ldr	r3, [pc, #272]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4a46      	ldr	r2, [pc, #280]	@ (800385c <HAL_RCC_OscConfig+0x348>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	021a      	lsls	r2, r3, #8
 800374e:	4b40      	ldr	r3, [pc, #256]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	e018      	b.n	8003788 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003756:	4b3e      	ldr	r3, [pc, #248]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4b3d      	ldr	r3, [pc, #244]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 800375c:	2101      	movs	r1, #1
 800375e:	438a      	bics	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fd ff9d 	bl	80016a0 <HAL_GetTick>
 8003766:	0003      	movs	r3, r0
 8003768:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800376c:	f7fd ff98 	bl	80016a0 <HAL_GetTick>
 8003770:	0002      	movs	r2, r0
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e293      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800377e:	4b34      	ldr	r3, [pc, #208]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2204      	movs	r2, #4
 8003784:	4013      	ands	r3, r2
 8003786:	d1f1      	bne.n	800376c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2210      	movs	r2, #16
 800378e:	4013      	ands	r3, r2
 8003790:	d100      	bne.n	8003794 <HAL_RCC_OscConfig+0x280>
 8003792:	e0a2      	b.n	80038da <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d140      	bne.n	800381c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800379a:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4013      	ands	r3, r2
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x29e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e279      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b2:	4b27      	ldr	r3, [pc, #156]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4a2d      	ldr	r2, [pc, #180]	@ (800386c <HAL_RCC_OscConfig+0x358>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	0019      	movs	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037c0:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c6:	4b22      	ldr	r3, [pc, #136]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	0a19      	lsrs	r1, r3, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	061a      	lsls	r2, r3, #24
 80037d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	0b5b      	lsrs	r3, r3, #13
 80037e0:	3301      	adds	r3, #1
 80037e2:	2280      	movs	r2, #128	@ 0x80
 80037e4:	0212      	lsls	r2, r2, #8
 80037e6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037e8:	4b19      	ldr	r3, [pc, #100]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	210f      	movs	r1, #15
 80037f0:	400b      	ands	r3, r1
 80037f2:	491b      	ldr	r1, [pc, #108]	@ (8003860 <HAL_RCC_OscConfig+0x34c>)
 80037f4:	5ccb      	ldrb	r3, [r1, r3]
 80037f6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003864 <HAL_RCC_OscConfig+0x350>)
 80037fa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80037fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003868 <HAL_RCC_OscConfig+0x354>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2513      	movs	r5, #19
 8003802:	197c      	adds	r4, r7, r5
 8003804:	0018      	movs	r0, r3
 8003806:	f7fd ff05 	bl	8001614 <HAL_InitTick>
 800380a:	0003      	movs	r3, r0
 800380c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800380e:	197b      	adds	r3, r7, r5
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d061      	beq.n	80038da <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003816:	197b      	adds	r3, r7, r5
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	e244      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d040      	beq.n	80038a6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003824:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b09      	ldr	r3, [pc, #36]	@ (8003850 <HAL_RCC_OscConfig+0x33c>)
 800382a:	2180      	movs	r1, #128	@ 0x80
 800382c:	0049      	lsls	r1, r1, #1
 800382e:	430a      	orrs	r2, r1
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003832:	f7fd ff35 	bl	80016a0 <HAL_GetTick>
 8003836:	0003      	movs	r3, r0
 8003838:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800383a:	e019      	b.n	8003870 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800383c:	f7fd ff30 	bl	80016a0 <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d912      	bls.n	8003870 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e22b      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	40021000 	.word	0x40021000
 8003854:	fffeffff 	.word	0xfffeffff
 8003858:	fffbffff 	.word	0xfffbffff
 800385c:	ffffe0ff 	.word	0xffffe0ff
 8003860:	08007568 	.word	0x08007568
 8003864:	20000000 	.word	0x20000000
 8003868:	20000004 	.word	0x20000004
 800386c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003870:	4bca      	ldr	r3, [pc, #808]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4013      	ands	r3, r2
 800387a:	d0df      	beq.n	800383c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800387c:	4bc7      	ldr	r3, [pc, #796]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4ac7      	ldr	r2, [pc, #796]	@ (8003ba0 <HAL_RCC_OscConfig+0x68c>)
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800388a:	4bc4      	ldr	r3, [pc, #784]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003890:	4bc2      	ldr	r3, [pc, #776]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	0a19      	lsrs	r1, r3, #8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	061a      	lsls	r2, r3, #24
 800389e:	4bbf      	ldr	r3, [pc, #764]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	e019      	b.n	80038da <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038a6:	4bbd      	ldr	r3, [pc, #756]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4bbc      	ldr	r3, [pc, #752]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80038ac:	49bd      	ldr	r1, [pc, #756]	@ (8003ba4 <HAL_RCC_OscConfig+0x690>)
 80038ae:	400a      	ands	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fd fef5 	bl	80016a0 <HAL_GetTick>
 80038b6:	0003      	movs	r3, r0
 80038b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038bc:	f7fd fef0 	bl	80016a0 <HAL_GetTick>
 80038c0:	0002      	movs	r2, r0
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e1eb      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80038ce:	4bb3      	ldr	r3, [pc, #716]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	2380      	movs	r3, #128	@ 0x80
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4013      	ands	r3, r2
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2208      	movs	r2, #8
 80038e0:	4013      	ands	r3, r2
 80038e2:	d036      	beq.n	8003952 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d019      	beq.n	8003920 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ec:	4bab      	ldr	r3, [pc, #684]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80038ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038f0:	4baa      	ldr	r3, [pc, #680]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80038f2:	2101      	movs	r1, #1
 80038f4:	430a      	orrs	r2, r1
 80038f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f8:	f7fd fed2 	bl	80016a0 <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003902:	f7fd fecd 	bl	80016a0 <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e1c8      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003914:	4ba1      	ldr	r3, [pc, #644]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003918:	2202      	movs	r2, #2
 800391a:	4013      	ands	r3, r2
 800391c:	d0f1      	beq.n	8003902 <HAL_RCC_OscConfig+0x3ee>
 800391e:	e018      	b.n	8003952 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003920:	4b9e      	ldr	r3, [pc, #632]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003922:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003924:	4b9d      	ldr	r3, [pc, #628]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003926:	2101      	movs	r1, #1
 8003928:	438a      	bics	r2, r1
 800392a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392c:	f7fd feb8 	bl	80016a0 <HAL_GetTick>
 8003930:	0003      	movs	r3, r0
 8003932:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003936:	f7fd feb3 	bl	80016a0 <HAL_GetTick>
 800393a:	0002      	movs	r2, r0
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e1ae      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003948:	4b94      	ldr	r3, [pc, #592]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 800394a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394c:	2202      	movs	r2, #2
 800394e:	4013      	ands	r3, r2
 8003950:	d1f1      	bne.n	8003936 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2204      	movs	r2, #4
 8003958:	4013      	ands	r3, r2
 800395a:	d100      	bne.n	800395e <HAL_RCC_OscConfig+0x44a>
 800395c:	e0ae      	b.n	8003abc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395e:	2023      	movs	r0, #35	@ 0x23
 8003960:	183b      	adds	r3, r7, r0
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003966:	4b8d      	ldr	r3, [pc, #564]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	055b      	lsls	r3, r3, #21
 800396e:	4013      	ands	r3, r2
 8003970:	d109      	bne.n	8003986 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	4b8a      	ldr	r3, [pc, #552]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003976:	4b89      	ldr	r3, [pc, #548]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003978:	2180      	movs	r1, #128	@ 0x80
 800397a:	0549      	lsls	r1, r1, #21
 800397c:	430a      	orrs	r2, r1
 800397e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003980:	183b      	adds	r3, r7, r0
 8003982:	2201      	movs	r2, #1
 8003984:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b88      	ldr	r3, [pc, #544]	@ (8003ba8 <HAL_RCC_OscConfig+0x694>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4013      	ands	r3, r2
 8003990:	d11a      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003992:	4b85      	ldr	r3, [pc, #532]	@ (8003ba8 <HAL_RCC_OscConfig+0x694>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b84      	ldr	r3, [pc, #528]	@ (8003ba8 <HAL_RCC_OscConfig+0x694>)
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	0049      	lsls	r1, r1, #1
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a0:	f7fd fe7e 	bl	80016a0 <HAL_GetTick>
 80039a4:	0003      	movs	r3, r0
 80039a6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7fd fe79 	bl	80016a0 <HAL_GetTick>
 80039ae:	0002      	movs	r2, r0
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b64      	cmp	r3, #100	@ 0x64
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e174      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	4b7a      	ldr	r3, [pc, #488]	@ (8003ba8 <HAL_RCC_OscConfig+0x694>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	2380      	movs	r3, #128	@ 0x80
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4013      	ands	r3, r2
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	2380      	movs	r3, #128	@ 0x80
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d107      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4d0>
 80039d4:	4b71      	ldr	r3, [pc, #452]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80039d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039d8:	4b70      	ldr	r3, [pc, #448]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	0049      	lsls	r1, r1, #1
 80039de:	430a      	orrs	r2, r1
 80039e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80039e2:	e031      	b.n	8003a48 <HAL_RCC_OscConfig+0x534>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4f2>
 80039ec:	4b6b      	ldr	r3, [pc, #428]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80039ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039f0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80039f2:	496c      	ldr	r1, [pc, #432]	@ (8003ba4 <HAL_RCC_OscConfig+0x690>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80039f8:	4b68      	ldr	r3, [pc, #416]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80039fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039fc:	4b67      	ldr	r3, [pc, #412]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 80039fe:	496b      	ldr	r1, [pc, #428]	@ (8003bac <HAL_RCC_OscConfig+0x698>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a04:	e020      	b.n	8003a48 <HAL_RCC_OscConfig+0x534>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	23a0      	movs	r3, #160	@ 0xa0
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d10e      	bne.n	8003a30 <HAL_RCC_OscConfig+0x51c>
 8003a12:	4b62      	ldr	r3, [pc, #392]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003a14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a16:	4b61      	ldr	r3, [pc, #388]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003a18:	2180      	movs	r1, #128	@ 0x80
 8003a1a:	00c9      	lsls	r1, r1, #3
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a20:	4b5e      	ldr	r3, [pc, #376]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003a22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a24:	4b5d      	ldr	r3, [pc, #372]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003a26:	2180      	movs	r1, #128	@ 0x80
 8003a28:	0049      	lsls	r1, r1, #1
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a2e:	e00b      	b.n	8003a48 <HAL_RCC_OscConfig+0x534>
 8003a30:	4b5a      	ldr	r3, [pc, #360]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003a32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a34:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003a36:	495b      	ldr	r1, [pc, #364]	@ (8003ba4 <HAL_RCC_OscConfig+0x690>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a3c:	4b57      	ldr	r3, [pc, #348]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003a3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a40:	4b56      	ldr	r3, [pc, #344]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003a42:	495a      	ldr	r1, [pc, #360]	@ (8003bac <HAL_RCC_OscConfig+0x698>)
 8003a44:	400a      	ands	r2, r1
 8003a46:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d015      	beq.n	8003a7c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a50:	f7fd fe26 	bl	80016a0 <HAL_GetTick>
 8003a54:	0003      	movs	r3, r0
 8003a56:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a58:	e009      	b.n	8003a6e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fd fe21 	bl	80016a0 <HAL_GetTick>
 8003a5e:	0002      	movs	r2, r0
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	4a52      	ldr	r2, [pc, #328]	@ (8003bb0 <HAL_RCC_OscConfig+0x69c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e11b      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003a70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a72:	2380      	movs	r3, #128	@ 0x80
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4013      	ands	r3, r2
 8003a78:	d0ef      	beq.n	8003a5a <HAL_RCC_OscConfig+0x546>
 8003a7a:	e014      	b.n	8003aa6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7c:	f7fd fe10 	bl	80016a0 <HAL_GetTick>
 8003a80:	0003      	movs	r3, r0
 8003a82:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a84:	e009      	b.n	8003a9a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fd fe0b 	bl	80016a0 <HAL_GetTick>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	4a47      	ldr	r2, [pc, #284]	@ (8003bb0 <HAL_RCC_OscConfig+0x69c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e105      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a9a:	4b40      	ldr	r3, [pc, #256]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003a9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a9e:	2380      	movs	r3, #128	@ 0x80
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d1ef      	bne.n	8003a86 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003aa6:	2323      	movs	r3, #35	@ 0x23
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003ab2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ab4:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003ab6:	493f      	ldr	r1, [pc, #252]	@ (8003bb4 <HAL_RCC_OscConfig+0x6a0>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d049      	beq.n	8003b5a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d026      	beq.n	8003b1c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003ace:	4b33      	ldr	r3, [pc, #204]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	4b32      	ldr	r3, [pc, #200]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	4b30      	ldr	r3, [pc, #192]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ade:	4b2f      	ldr	r3, [pc, #188]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ae6:	4b34      	ldr	r3, [pc, #208]	@ (8003bb8 <HAL_RCC_OscConfig+0x6a4>)
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	4b33      	ldr	r3, [pc, #204]	@ (8003bb8 <HAL_RCC_OscConfig+0x6a4>)
 8003aec:	2180      	movs	r1, #128	@ 0x80
 8003aee:	0189      	lsls	r1, r1, #6
 8003af0:	430a      	orrs	r2, r1
 8003af2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fd fdd4 	bl	80016a0 <HAL_GetTick>
 8003af8:	0003      	movs	r3, r0
 8003afa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003afe:	f7fd fdcf 	bl	80016a0 <HAL_GetTick>
 8003b02:	0002      	movs	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0ca      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b10:	4b22      	ldr	r3, [pc, #136]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2202      	movs	r2, #2
 8003b16:	4013      	ands	r3, r2
 8003b18:	d0f1      	beq.n	8003afe <HAL_RCC_OscConfig+0x5ea>
 8003b1a:	e01e      	b.n	8003b5a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	4b1e      	ldr	r3, [pc, #120]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003b22:	2101      	movs	r1, #1
 8003b24:	438a      	bics	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <HAL_RCC_OscConfig+0x6a4>)
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	4b22      	ldr	r3, [pc, #136]	@ (8003bb8 <HAL_RCC_OscConfig+0x6a4>)
 8003b2e:	4923      	ldr	r1, [pc, #140]	@ (8003bbc <HAL_RCC_OscConfig+0x6a8>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fd fdb4 	bl	80016a0 <HAL_GetTick>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b3e:	f7fd fdaf 	bl	80016a0 <HAL_GetTick>
 8003b42:	0002      	movs	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e0aa      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b50:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2202      	movs	r2, #2
 8003b56:	4013      	ands	r3, r2
 8003b58:	d1f1      	bne.n	8003b3e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d100      	bne.n	8003b64 <HAL_RCC_OscConfig+0x650>
 8003b62:	e09f      	b.n	8003ca4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b0c      	cmp	r3, #12
 8003b68:	d100      	bne.n	8003b6c <HAL_RCC_OscConfig+0x658>
 8003b6a:	e078      	b.n	8003c5e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d159      	bne.n	8003c28 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <HAL_RCC_OscConfig+0x688>)
 8003b7a:	4911      	ldr	r1, [pc, #68]	@ (8003bc0 <HAL_RCC_OscConfig+0x6ac>)
 8003b7c:	400a      	ands	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fd fd8e 	bl	80016a0 <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b88:	e01c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fd fd89 	bl	80016a0 <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d915      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e084      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	ffff1fff 	.word	0xffff1fff
 8003ba4:	fffffeff 	.word	0xfffffeff
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	fffffbff 	.word	0xfffffbff
 8003bb0:	00001388 	.word	0x00001388
 8003bb4:	efffffff 	.word	0xefffffff
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	ffffdfff 	.word	0xffffdfff
 8003bc0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb0 <HAL_RCC_OscConfig+0x79c>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2380      	movs	r3, #128	@ 0x80
 8003bca:	049b      	lsls	r3, r3, #18
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d1dc      	bne.n	8003b8a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd0:	4b37      	ldr	r3, [pc, #220]	@ (8003cb0 <HAL_RCC_OscConfig+0x79c>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a37      	ldr	r2, [pc, #220]	@ (8003cb4 <HAL_RCC_OscConfig+0x7a0>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	0019      	movs	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be8:	431a      	orrs	r2, r3
 8003bea:	4b31      	ldr	r3, [pc, #196]	@ (8003cb0 <HAL_RCC_OscConfig+0x79c>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb0 <HAL_RCC_OscConfig+0x79c>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb0 <HAL_RCC_OscConfig+0x79c>)
 8003bf6:	2180      	movs	r1, #128	@ 0x80
 8003bf8:	0449      	lsls	r1, r1, #17
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fd4f 	bl	80016a0 <HAL_GetTick>
 8003c02:	0003      	movs	r3, r0
 8003c04:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd fd4a 	bl	80016a0 <HAL_GetTick>
 8003c0c:	0002      	movs	r2, r0
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e045      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c1a:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_RCC_OscConfig+0x79c>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	2380      	movs	r3, #128	@ 0x80
 8003c20:	049b      	lsls	r3, r3, #18
 8003c22:	4013      	ands	r3, r2
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x6f4>
 8003c26:	e03d      	b.n	8003ca4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c28:	4b21      	ldr	r3, [pc, #132]	@ (8003cb0 <HAL_RCC_OscConfig+0x79c>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <HAL_RCC_OscConfig+0x79c>)
 8003c2e:	4922      	ldr	r1, [pc, #136]	@ (8003cb8 <HAL_RCC_OscConfig+0x7a4>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd fd34 	bl	80016a0 <HAL_GetTick>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fd fd2f 	bl	80016a0 <HAL_GetTick>
 8003c42:	0002      	movs	r2, r0
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e02a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c50:	4b17      	ldr	r3, [pc, #92]	@ (8003cb0 <HAL_RCC_OscConfig+0x79c>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	2380      	movs	r3, #128	@ 0x80
 8003c56:	049b      	lsls	r3, r3, #18
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x72a>
 8003c5c:	e022      	b.n	8003ca4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e01d      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c6a:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <HAL_RCC_OscConfig+0x79c>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	2380      	movs	r3, #128	@ 0x80
 8003c74:	025b      	lsls	r3, r3, #9
 8003c76:	401a      	ands	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	23f0      	movs	r3, #240	@ 0xf0
 8003c84:	039b      	lsls	r3, r3, #14
 8003c86:	401a      	ands	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d107      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	23c0      	movs	r3, #192	@ 0xc0
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	401a      	ands	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b00a      	add	sp, #40	@ 0x28
 8003cac:	bdb0      	pop	{r4, r5, r7, pc}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	ff02ffff 	.word	0xff02ffff
 8003cb8:	feffffff 	.word	0xfeffffff

08003cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e128      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd0:	4b96      	ldr	r3, [pc, #600]	@ (8003f2c <HAL_RCC_ClockConfig+0x270>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d91e      	bls.n	8003d1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cde:	4b93      	ldr	r3, [pc, #588]	@ (8003f2c <HAL_RCC_ClockConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	4b90      	ldr	r3, [pc, #576]	@ (8003f2c <HAL_RCC_ClockConfig+0x270>)
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cf0:	f7fd fcd6 	bl	80016a0 <HAL_GetTick>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf8:	e009      	b.n	8003d0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfa:	f7fd fcd1 	bl	80016a0 <HAL_GetTick>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	4a8a      	ldr	r2, [pc, #552]	@ (8003f30 <HAL_RCC_ClockConfig+0x274>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e109      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b87      	ldr	r3, [pc, #540]	@ (8003f2c <HAL_RCC_ClockConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2201      	movs	r2, #1
 8003d14:	4013      	ands	r3, r2
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1ee      	bne.n	8003cfa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2202      	movs	r2, #2
 8003d22:	4013      	ands	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d26:	4b83      	ldr	r3, [pc, #524]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	22f0      	movs	r2, #240	@ 0xf0
 8003d2c:	4393      	bics	r3, r2
 8003d2e:	0019      	movs	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	4b7f      	ldr	r3, [pc, #508]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003d36:	430a      	orrs	r2, r1
 8003d38:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	4013      	ands	r3, r2
 8003d42:	d100      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x8a>
 8003d44:	e089      	b.n	8003e5a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d4e:	4b79      	ldr	r3, [pc, #484]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	2380      	movs	r3, #128	@ 0x80
 8003d54:	029b      	lsls	r3, r3, #10
 8003d56:	4013      	ands	r3, r2
 8003d58:	d120      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0e1      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d66:	4b73      	ldr	r3, [pc, #460]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	2380      	movs	r3, #128	@ 0x80
 8003d6c:	049b      	lsls	r3, r3, #18
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d114      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0d5      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2204      	movs	r2, #4
 8003d84:	4013      	ands	r3, r2
 8003d86:	d109      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0ca      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d8c:	4b69      	ldr	r3, [pc, #420]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	2380      	movs	r3, #128	@ 0x80
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4013      	ands	r3, r2
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0c2      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d9c:	4b65      	ldr	r3, [pc, #404]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2203      	movs	r2, #3
 8003da2:	4393      	bics	r3, r2
 8003da4:	0019      	movs	r1, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	4b62      	ldr	r3, [pc, #392]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003dac:	430a      	orrs	r2, r1
 8003dae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db0:	f7fd fc76 	bl	80016a0 <HAL_GetTick>
 8003db4:	0003      	movs	r3, r0
 8003db6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d111      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dc0:	e009      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc2:	f7fd fc6d 	bl	80016a0 <HAL_GetTick>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	4a58      	ldr	r2, [pc, #352]	@ (8003f30 <HAL_RCC_ClockConfig+0x274>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e0a5      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd6:	4b57      	ldr	r3, [pc, #348]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	220c      	movs	r2, #12
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d1ef      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0x106>
 8003de2:	e03a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d111      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dec:	e009      	b.n	8003e02 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dee:	f7fd fc57 	bl	80016a0 <HAL_GetTick>
 8003df2:	0002      	movs	r2, r0
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	4a4d      	ldr	r2, [pc, #308]	@ (8003f30 <HAL_RCC_ClockConfig+0x274>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e08f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e02:	4b4c      	ldr	r3, [pc, #304]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	220c      	movs	r2, #12
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d1ef      	bne.n	8003dee <HAL_RCC_ClockConfig+0x132>
 8003e0e:	e024      	b.n	8003e5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d11b      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e18:	e009      	b.n	8003e2e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1a:	f7fd fc41 	bl	80016a0 <HAL_GetTick>
 8003e1e:	0002      	movs	r2, r0
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	4a42      	ldr	r2, [pc, #264]	@ (8003f30 <HAL_RCC_ClockConfig+0x274>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e079      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2e:	4b41      	ldr	r3, [pc, #260]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	220c      	movs	r2, #12
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d1ef      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x15e>
 8003e3a:	e00e      	b.n	8003e5a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7fd fc30 	bl	80016a0 <HAL_GetTick>
 8003e40:	0002      	movs	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	4a3a      	ldr	r2, [pc, #232]	@ (8003f30 <HAL_RCC_ClockConfig+0x274>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e068      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e50:	4b38      	ldr	r3, [pc, #224]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	220c      	movs	r2, #12
 8003e56:	4013      	ands	r3, r2
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e5a:	4b34      	ldr	r3, [pc, #208]	@ (8003f2c <HAL_RCC_ClockConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4013      	ands	r3, r2
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d21e      	bcs.n	8003ea6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e68:	4b30      	ldr	r3, [pc, #192]	@ (8003f2c <HAL_RCC_ClockConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4393      	bics	r3, r2
 8003e70:	0019      	movs	r1, r3
 8003e72:	4b2e      	ldr	r3, [pc, #184]	@ (8003f2c <HAL_RCC_ClockConfig+0x270>)
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e7a:	f7fd fc11 	bl	80016a0 <HAL_GetTick>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	e009      	b.n	8003e98 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e84:	f7fd fc0c 	bl	80016a0 <HAL_GetTick>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	4a28      	ldr	r2, [pc, #160]	@ (8003f30 <HAL_RCC_ClockConfig+0x274>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e044      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e98:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <HAL_RCC_ClockConfig+0x270>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d1ee      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	d009      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb0:	4b20      	ldr	r3, [pc, #128]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4a20      	ldr	r2, [pc, #128]	@ (8003f38 <HAL_RCC_ClockConfig+0x27c>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2208      	movs	r2, #8
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ece:	4b19      	ldr	r3, [pc, #100]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f3c <HAL_RCC_ClockConfig+0x280>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	00da      	lsls	r2, r3, #3
 8003ede:	4b15      	ldr	r3, [pc, #84]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ee4:	f000 f832 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8003ee8:	0001      	movs	r1, r0
 8003eea:	4b12      	ldr	r3, [pc, #72]	@ (8003f34 <HAL_RCC_ClockConfig+0x278>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	4a12      	ldr	r2, [pc, #72]	@ (8003f40 <HAL_RCC_ClockConfig+0x284>)
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	000a      	movs	r2, r1
 8003efa:	40da      	lsrs	r2, r3
 8003efc:	4b11      	ldr	r3, [pc, #68]	@ (8003f44 <HAL_RCC_ClockConfig+0x288>)
 8003efe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f00:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <HAL_RCC_ClockConfig+0x28c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	250b      	movs	r5, #11
 8003f06:	197c      	adds	r4, r7, r5
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f7fd fb83 	bl	8001614 <HAL_InitTick>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003f12:	197b      	adds	r3, r7, r5
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003f1a:	197b      	adds	r3, r7, r5
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	0018      	movs	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b004      	add	sp, #16
 8003f28:	bdb0      	pop	{r4, r5, r7, pc}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	40022000 	.word	0x40022000
 8003f30:	00001388 	.word	0x00001388
 8003f34:	40021000 	.word	0x40021000
 8003f38:	fffff8ff 	.word	0xfffff8ff
 8003f3c:	ffffc7ff 	.word	0xffffc7ff
 8003f40:	08007568 	.word	0x08007568
 8003f44:	20000000 	.word	0x20000000
 8003f48:	20000004 	.word	0x20000004

08003f4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	b5b0      	push	{r4, r5, r7, lr}
 8003f4e:	b08e      	sub	sp, #56	@ 0x38
 8003f50:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003f52:	4b4c      	ldr	r3, [pc, #304]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f5a:	230c      	movs	r3, #12
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d014      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x40>
 8003f62:	d900      	bls.n	8003f66 <HAL_RCC_GetSysClockFreq+0x1a>
 8003f64:	e07b      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x112>
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d002      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x24>
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d00b      	beq.n	8003f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f6e:	e076      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f70:	4b44      	ldr	r3, [pc, #272]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2210      	movs	r2, #16
 8003f76:	4013      	ands	r3, r2
 8003f78:	d002      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003f7a:	4b43      	ldr	r3, [pc, #268]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f7c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003f7e:	e07c      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003f80:	4b42      	ldr	r3, [pc, #264]	@ (800408c <HAL_RCC_GetSysClockFreq+0x140>)
 8003f82:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003f84:	e079      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f86:	4b42      	ldr	r3, [pc, #264]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x144>)
 8003f88:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003f8a:	e076      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8e:	0c9a      	lsrs	r2, r3, #18
 8003f90:	230f      	movs	r3, #15
 8003f92:	401a      	ands	r2, r3
 8003f94:	4b3f      	ldr	r3, [pc, #252]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x148>)
 8003f96:	5c9b      	ldrb	r3, [r3, r2]
 8003f98:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9c:	0d9a      	lsrs	r2, r3, #22
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fa6:	4b37      	ldr	r3, [pc, #220]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	2380      	movs	r3, #128	@ 0x80
 8003fac:	025b      	lsls	r3, r3, #9
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d01a      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	4a35      	ldr	r2, [pc, #212]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x144>)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	69b8      	ldr	r0, [r7, #24]
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	f7fc fa41 	bl	8000448 <__aeabi_lmul>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	000b      	movs	r3, r1
 8003fca:	0010      	movs	r0, r2
 8003fcc:	0019      	movs	r1, r3
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f7fc fa15 	bl	8000408 <__aeabi_uldivmod>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	000b      	movs	r3, r1
 8003fe2:	0013      	movs	r3, r2
 8003fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe6:	e037      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003fe8:	4b26      	ldr	r3, [pc, #152]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2210      	movs	r2, #16
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d01a      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	4a23      	ldr	r2, [pc, #140]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	68b8      	ldr	r0, [r7, #8]
 8004000:	68f9      	ldr	r1, [r7, #12]
 8004002:	f7fc fa21 	bl	8000448 <__aeabi_lmul>
 8004006:	0002      	movs	r2, r0
 8004008:	000b      	movs	r3, r1
 800400a:	0010      	movs	r0, r2
 800400c:	0019      	movs	r1, r3
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f7fc f9f5 	bl	8000408 <__aeabi_uldivmod>
 800401e:	0002      	movs	r2, r0
 8004020:	000b      	movs	r3, r1
 8004022:	0013      	movs	r3, r2
 8004024:	637b      	str	r3, [r7, #52]	@ 0x34
 8004026:	e017      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402a:	0018      	movs	r0, r3
 800402c:	2300      	movs	r3, #0
 800402e:	0019      	movs	r1, r3
 8004030:	4a16      	ldr	r2, [pc, #88]	@ (800408c <HAL_RCC_GetSysClockFreq+0x140>)
 8004032:	2300      	movs	r3, #0
 8004034:	f7fc fa08 	bl	8000448 <__aeabi_lmul>
 8004038:	0002      	movs	r2, r0
 800403a:	000b      	movs	r3, r1
 800403c:	0010      	movs	r0, r2
 800403e:	0019      	movs	r1, r3
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	001c      	movs	r4, r3
 8004044:	2300      	movs	r3, #0
 8004046:	001d      	movs	r5, r3
 8004048:	0022      	movs	r2, r4
 800404a:	002b      	movs	r3, r5
 800404c:	f7fc f9dc 	bl	8000408 <__aeabi_uldivmod>
 8004050:	0002      	movs	r2, r0
 8004052:	000b      	movs	r3, r1
 8004054:	0013      	movs	r3, r2
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8004058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800405c:	e00d      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800405e:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x138>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	0b5b      	lsrs	r3, r3, #13
 8004064:	2207      	movs	r2, #7
 8004066:	4013      	ands	r3, r2
 8004068:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	3301      	adds	r3, #1
 800406e:	2280      	movs	r2, #128	@ 0x80
 8004070:	0212      	lsls	r2, r2, #8
 8004072:	409a      	lsls	r2, r3
 8004074:	0013      	movs	r3, r2
 8004076:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004078:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b00e      	add	sp, #56	@ 0x38
 8004082:	bdb0      	pop	{r4, r5, r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	003d0900 	.word	0x003d0900
 800408c:	00f42400 	.word	0x00f42400
 8004090:	007a1200 	.word	0x007a1200
 8004094:	08007580 	.word	0x08007580

08004098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800409c:	4b02      	ldr	r3, [pc, #8]	@ (80040a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800409e:	681b      	ldr	r3, [r3, #0]
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	20000000 	.word	0x20000000

080040ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040b0:	f7ff fff2 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040b4:	0001      	movs	r1, r0
 80040b6:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	2207      	movs	r2, #7
 80040be:	4013      	ands	r3, r2
 80040c0:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040c2:	5cd3      	ldrb	r3, [r2, r3]
 80040c4:	40d9      	lsrs	r1, r3
 80040c6:	000b      	movs	r3, r1
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	40021000 	.word	0x40021000
 80040d4:	08007578 	.word	0x08007578

080040d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040dc:	f7ff ffdc 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040e0:	0001      	movs	r1, r0
 80040e2:	4b06      	ldr	r3, [pc, #24]	@ (80040fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	0adb      	lsrs	r3, r3, #11
 80040e8:	2207      	movs	r2, #7
 80040ea:	4013      	ands	r3, r2
 80040ec:	4a04      	ldr	r2, [pc, #16]	@ (8004100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ee:	5cd3      	ldrb	r3, [r2, r3]
 80040f0:	40d9      	lsrs	r1, r3
 80040f2:	000b      	movs	r3, r1
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	40021000 	.word	0x40021000
 8004100:	08007578 	.word	0x08007578

08004104 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800410c:	2317      	movs	r3, #23
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2220      	movs	r2, #32
 800411a:	4013      	ands	r3, r2
 800411c:	d106      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	2380      	movs	r3, #128	@ 0x80
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	4013      	ands	r3, r2
 8004128:	d100      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800412a:	e104      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412c:	4bb9      	ldr	r3, [pc, #740]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800412e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004130:	2380      	movs	r3, #128	@ 0x80
 8004132:	055b      	lsls	r3, r3, #21
 8004134:	4013      	ands	r3, r2
 8004136:	d10a      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004138:	4bb6      	ldr	r3, [pc, #728]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800413a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800413c:	4bb5      	ldr	r3, [pc, #724]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800413e:	2180      	movs	r1, #128	@ 0x80
 8004140:	0549      	lsls	r1, r1, #21
 8004142:	430a      	orrs	r2, r1
 8004144:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004146:	2317      	movs	r3, #23
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414e:	4bb2      	ldr	r3, [pc, #712]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	2380      	movs	r3, #128	@ 0x80
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4013      	ands	r3, r2
 8004158:	d11a      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415a:	4baf      	ldr	r3, [pc, #700]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4bae      	ldr	r3, [pc, #696]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004160:	2180      	movs	r1, #128	@ 0x80
 8004162:	0049      	lsls	r1, r1, #1
 8004164:	430a      	orrs	r2, r1
 8004166:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004168:	f7fd fa9a 	bl	80016a0 <HAL_GetTick>
 800416c:	0003      	movs	r3, r0
 800416e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004170:	e008      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004172:	f7fd fa95 	bl	80016a0 <HAL_GetTick>
 8004176:	0002      	movs	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	@ 0x64
 800417e:	d901      	bls.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e143      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	4ba4      	ldr	r3, [pc, #656]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	2380      	movs	r3, #128	@ 0x80
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	4013      	ands	r3, r2
 800418e:	d0f0      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004190:	4ba0      	ldr	r3, [pc, #640]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	23c0      	movs	r3, #192	@ 0xc0
 8004196:	039b      	lsls	r3, r3, #14
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	23c0      	movs	r3, #192	@ 0xc0
 80041a2:	039b      	lsls	r3, r3, #14
 80041a4:	4013      	ands	r3, r2
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d107      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	23c0      	movs	r3, #192	@ 0xc0
 80041b2:	039b      	lsls	r3, r3, #14
 80041b4:	4013      	ands	r3, r2
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d013      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	23c0      	movs	r3, #192	@ 0xc0
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	401a      	ands	r2, r3
 80041c6:	23c0      	movs	r3, #192	@ 0xc0
 80041c8:	029b      	lsls	r3, r3, #10
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d10a      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041ce:	4b91      	ldr	r3, [pc, #580]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	2380      	movs	r3, #128	@ 0x80
 80041d4:	029b      	lsls	r3, r3, #10
 80041d6:	401a      	ands	r2, r3
 80041d8:	2380      	movs	r3, #128	@ 0x80
 80041da:	029b      	lsls	r3, r3, #10
 80041dc:	429a      	cmp	r2, r3
 80041de:	d101      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e113      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80041e4:	4b8b      	ldr	r3, [pc, #556]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041e8:	23c0      	movs	r3, #192	@ 0xc0
 80041ea:	029b      	lsls	r3, r3, #10
 80041ec:	4013      	ands	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d049      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	23c0      	movs	r3, #192	@ 0xc0
 80041fc:	029b      	lsls	r3, r3, #10
 80041fe:	4013      	ands	r3, r2
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	429a      	cmp	r2, r3
 8004204:	d004      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2220      	movs	r2, #32
 800420c:	4013      	ands	r3, r2
 800420e:	d10d      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	23c0      	movs	r3, #192	@ 0xc0
 8004216:	029b      	lsls	r3, r3, #10
 8004218:	4013      	ands	r3, r2
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	429a      	cmp	r2, r3
 800421e:	d034      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4013      	ands	r3, r2
 800422a:	d02e      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800422c:	4b79      	ldr	r3, [pc, #484]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800422e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004230:	4a7a      	ldr	r2, [pc, #488]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004232:	4013      	ands	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004236:	4b77      	ldr	r3, [pc, #476]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004238:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800423a:	4b76      	ldr	r3, [pc, #472]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800423c:	2180      	movs	r1, #128	@ 0x80
 800423e:	0309      	lsls	r1, r1, #12
 8004240:	430a      	orrs	r2, r1
 8004242:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004244:	4b73      	ldr	r3, [pc, #460]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004246:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004248:	4b72      	ldr	r3, [pc, #456]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800424a:	4975      	ldr	r1, [pc, #468]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800424c:	400a      	ands	r2, r1
 800424e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004250:	4b70      	ldr	r3, [pc, #448]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	2380      	movs	r3, #128	@ 0x80
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	4013      	ands	r3, r2
 800425e:	d014      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fd fa1e 	bl	80016a0 <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004268:	e009      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426a:	f7fd fa19 	bl	80016a0 <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	4a6b      	ldr	r2, [pc, #428]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0c6      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800427e:	4b65      	ldr	r3, [pc, #404]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004280:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004282:	2380      	movs	r3, #128	@ 0x80
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4013      	ands	r3, r2
 8004288:	d0ef      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	2380      	movs	r3, #128	@ 0x80
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	4013      	ands	r3, r2
 8004294:	d01f      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	23c0      	movs	r3, #192	@ 0xc0
 800429c:	029b      	lsls	r3, r3, #10
 800429e:	401a      	ands	r2, r3
 80042a0:	23c0      	movs	r3, #192	@ 0xc0
 80042a2:	029b      	lsls	r3, r3, #10
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d10c      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80042a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a5e      	ldr	r2, [pc, #376]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	23c0      	movs	r3, #192	@ 0xc0
 80042b8:	039b      	lsls	r3, r3, #14
 80042ba:	401a      	ands	r2, r3
 80042bc:	4b55      	ldr	r3, [pc, #340]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042be:	430a      	orrs	r2, r1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	4b54      	ldr	r3, [pc, #336]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	23c0      	movs	r3, #192	@ 0xc0
 80042cc:	029b      	lsls	r3, r3, #10
 80042ce:	401a      	ands	r2, r3
 80042d0:	4b50      	ldr	r3, [pc, #320]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042d2:	430a      	orrs	r2, r1
 80042d4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2220      	movs	r2, #32
 80042dc:	4013      	ands	r3, r2
 80042de:	d01f      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	23c0      	movs	r3, #192	@ 0xc0
 80042e6:	029b      	lsls	r3, r3, #10
 80042e8:	401a      	ands	r2, r3
 80042ea:	23c0      	movs	r3, #192	@ 0xc0
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d10c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x208>
 80042f2:	4b48      	ldr	r3, [pc, #288]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4c      	ldr	r2, [pc, #304]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	23c0      	movs	r3, #192	@ 0xc0
 8004302:	039b      	lsls	r3, r3, #14
 8004304:	401a      	ands	r2, r3
 8004306:	4b43      	ldr	r3, [pc, #268]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	4b41      	ldr	r3, [pc, #260]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800430e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	23c0      	movs	r3, #192	@ 0xc0
 8004316:	029b      	lsls	r3, r3, #10
 8004318:	401a      	ands	r2, r3
 800431a:	4b3e      	ldr	r3, [pc, #248]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800431c:	430a      	orrs	r2, r1
 800431e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004320:	2317      	movs	r3, #23
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d105      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432a:	4b3a      	ldr	r3, [pc, #232]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800432c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800432e:	4b39      	ldr	r3, [pc, #228]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004330:	493e      	ldr	r1, [pc, #248]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004332:	400a      	ands	r2, r1
 8004334:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2201      	movs	r2, #1
 800433c:	4013      	ands	r3, r2
 800433e:	d009      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004340:	4b34      	ldr	r3, [pc, #208]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004344:	2203      	movs	r2, #3
 8004346:	4393      	bics	r3, r2
 8004348:	0019      	movs	r1, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	4b31      	ldr	r3, [pc, #196]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004350:	430a      	orrs	r2, r1
 8004352:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2202      	movs	r2, #2
 800435a:	4013      	ands	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800435e:	4b2d      	ldr	r3, [pc, #180]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004362:	220c      	movs	r2, #12
 8004364:	4393      	bics	r3, r2
 8004366:	0019      	movs	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	4b29      	ldr	r3, [pc, #164]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800436e:	430a      	orrs	r2, r1
 8004370:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2204      	movs	r2, #4
 8004378:	4013      	ands	r3, r2
 800437a:	d009      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800437c:	4b25      	ldr	r3, [pc, #148]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800437e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004380:	4a2b      	ldr	r2, [pc, #172]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004382:	4013      	ands	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	4b22      	ldr	r3, [pc, #136]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800438c:	430a      	orrs	r2, r1
 800438e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2208      	movs	r2, #8
 8004396:	4013      	ands	r3, r2
 8004398:	d009      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800439a:	4b1e      	ldr	r3, [pc, #120]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800439c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439e:	4a25      	ldr	r2, [pc, #148]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	0019      	movs	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043aa:	430a      	orrs	r2, r1
 80043ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	2380      	movs	r3, #128	@ 0x80
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ba:	4b16      	ldr	r3, [pc, #88]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043be:	4a17      	ldr	r2, [pc, #92]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	0019      	movs	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043ca:	430a      	orrs	r2, r1
 80043cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2240      	movs	r2, #64	@ 0x40
 80043d4:	4013      	ands	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043dc:	4a16      	ldr	r2, [pc, #88]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80043de:	4013      	ands	r3, r2
 80043e0:	0019      	movs	r1, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043e8:	430a      	orrs	r2, r1
 80043ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2280      	movs	r2, #128	@ 0x80
 80043f2:	4013      	ands	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80043f6:	4b07      	ldr	r3, [pc, #28]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fa:	4a10      	ldr	r2, [pc, #64]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	0019      	movs	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	4b03      	ldr	r3, [pc, #12]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004406:	430a      	orrs	r2, r1
 8004408:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b006      	add	sp, #24
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
 800441c:	fffcffff 	.word	0xfffcffff
 8004420:	fff7ffff 	.word	0xfff7ffff
 8004424:	00001388 	.word	0x00001388
 8004428:	ffcfffff 	.word	0xffcfffff
 800442c:	efffffff 	.word	0xefffffff
 8004430:	fffff3ff 	.word	0xfffff3ff
 8004434:	ffffcfff 	.word	0xffffcfff
 8004438:	fbffffff 	.word	0xfbffffff
 800443c:	fff3ffff 	.word	0xfff3ffff

08004440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e032      	b.n	80044b8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2239      	movs	r2, #57	@ 0x39
 8004456:	5c9b      	ldrb	r3, [r3, r2]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d107      	bne.n	800446e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2238      	movs	r2, #56	@ 0x38
 8004462:	2100      	movs	r1, #0
 8004464:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0018      	movs	r0, r3
 800446a:	f7fc ff93 	bl	8001394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2239      	movs	r2, #57	@ 0x39
 8004472:	2102      	movs	r1, #2
 8004474:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	0019      	movs	r1, r3
 8004480:	0010      	movs	r0, r2
 8004482:	f000 fd71 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	223e      	movs	r2, #62	@ 0x3e
 800448a:	2101      	movs	r1, #1
 800448c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	223a      	movs	r2, #58	@ 0x3a
 8004492:	2101      	movs	r1, #1
 8004494:	5499      	strb	r1, [r3, r2]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	223b      	movs	r2, #59	@ 0x3b
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	223c      	movs	r2, #60	@ 0x3c
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	223d      	movs	r2, #61	@ 0x3d
 80044aa:	2101      	movs	r1, #1
 80044ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2239      	movs	r2, #57	@ 0x39
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b002      	add	sp, #8
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2239      	movs	r2, #57	@ 0x39
 80044cc:	5c9b      	ldrb	r3, [r3, r2]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d001      	beq.n	80044d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e033      	b.n	8004540 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2239      	movs	r2, #57	@ 0x39
 80044dc:	2102      	movs	r1, #2
 80044de:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2380      	movs	r3, #128	@ 0x80
 80044e6:	05db      	lsls	r3, r3, #23
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d00e      	beq.n	800450a <HAL_TIM_Base_Start+0x4a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a15      	ldr	r2, [pc, #84]	@ (8004548 <HAL_TIM_Base_Start+0x88>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d009      	beq.n	800450a <HAL_TIM_Base_Start+0x4a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a14      	ldr	r2, [pc, #80]	@ (800454c <HAL_TIM_Base_Start+0x8c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_TIM_Base_Start+0x4a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a12      	ldr	r2, [pc, #72]	@ (8004550 <HAL_TIM_Base_Start+0x90>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d111      	bne.n	800452e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2207      	movs	r2, #7
 8004512:	4013      	ands	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b06      	cmp	r3, #6
 800451a:	d010      	beq.n	800453e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2101      	movs	r1, #1
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452c:	e007      	b.n	800453e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	0018      	movs	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	b004      	add	sp, #16
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40000400 	.word	0x40000400
 800454c:	40010800 	.word	0x40010800
 8004550:	40011400 	.word	0x40011400

08004554 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	4a0a      	ldr	r2, [pc, #40]	@ (800458c <HAL_TIM_Base_Stop+0x38>)
 8004564:	4013      	ands	r3, r2
 8004566:	d107      	bne.n	8004578 <HAL_TIM_Base_Stop+0x24>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2101      	movs	r1, #1
 8004574:	438a      	bics	r2, r1
 8004576:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2239      	movs	r2, #57	@ 0x39
 800457c:	2101      	movs	r1, #1
 800457e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b002      	add	sp, #8
 8004588:	bd80      	pop	{r7, pc}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	00001111 	.word	0x00001111

08004590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2239      	movs	r2, #57	@ 0x39
 800459c:	5c9b      	ldrb	r3, [r3, r2]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d001      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e03b      	b.n	8004620 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2239      	movs	r2, #57	@ 0x39
 80045ac:	2102      	movs	r1, #2
 80045ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2101      	movs	r1, #1
 80045bc:	430a      	orrs	r2, r1
 80045be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	2380      	movs	r3, #128	@ 0x80
 80045c6:	05db      	lsls	r3, r3, #23
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d00e      	beq.n	80045ea <HAL_TIM_Base_Start_IT+0x5a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a15      	ldr	r2, [pc, #84]	@ (8004628 <HAL_TIM_Base_Start_IT+0x98>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_TIM_Base_Start_IT+0x5a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a14      	ldr	r2, [pc, #80]	@ (800462c <HAL_TIM_Base_Start_IT+0x9c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_TIM_Base_Start_IT+0x5a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a12      	ldr	r2, [pc, #72]	@ (8004630 <HAL_TIM_Base_Start_IT+0xa0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d111      	bne.n	800460e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2207      	movs	r2, #7
 80045f2:	4013      	ands	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b06      	cmp	r3, #6
 80045fa:	d010      	beq.n	800461e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2101      	movs	r1, #1
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460c:	e007      	b.n	800461e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2101      	movs	r1, #1
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b004      	add	sp, #16
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40000400 	.word	0x40000400
 800462c:	40010800 	.word	0x40010800
 8004630:	40011400 	.word	0x40011400

08004634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e032      	b.n	80046ac <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2239      	movs	r2, #57	@ 0x39
 800464a:	5c9b      	ldrb	r3, [r3, r2]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2238      	movs	r2, #56	@ 0x38
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	0018      	movs	r0, r3
 800465e:	f000 f829 	bl	80046b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2239      	movs	r2, #57	@ 0x39
 8004666:	2102      	movs	r1, #2
 8004668:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3304      	adds	r3, #4
 8004672:	0019      	movs	r1, r3
 8004674:	0010      	movs	r0, r2
 8004676:	f000 fc77 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	223e      	movs	r2, #62	@ 0x3e
 800467e:	2101      	movs	r1, #1
 8004680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	223a      	movs	r2, #58	@ 0x3a
 8004686:	2101      	movs	r1, #1
 8004688:	5499      	strb	r1, [r3, r2]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	223b      	movs	r2, #59	@ 0x3b
 800468e:	2101      	movs	r1, #1
 8004690:	5499      	strb	r1, [r3, r2]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	223c      	movs	r2, #60	@ 0x3c
 8004696:	2101      	movs	r1, #1
 8004698:	5499      	strb	r1, [r3, r2]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	223d      	movs	r2, #61	@ 0x3d
 800469e:	2101      	movs	r1, #1
 80046a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2239      	movs	r2, #57	@ 0x39
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	0018      	movs	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b002      	add	sp, #8
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046bc:	46c0      	nop			@ (mov r8, r8)
 80046be:	46bd      	mov	sp, r7
 80046c0:	b002      	add	sp, #8
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d108      	bne.n	80046e6 <HAL_TIM_PWM_Start+0x22>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	223a      	movs	r2, #58	@ 0x3a
 80046d8:	5c9b      	ldrb	r3, [r3, r2]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	1e5a      	subs	r2, r3, #1
 80046e0:	4193      	sbcs	r3, r2
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	e01f      	b.n	8004726 <HAL_TIM_PWM_Start+0x62>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d108      	bne.n	80046fe <HAL_TIM_PWM_Start+0x3a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	223b      	movs	r2, #59	@ 0x3b
 80046f0:	5c9b      	ldrb	r3, [r3, r2]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	1e5a      	subs	r2, r3, #1
 80046f8:	4193      	sbcs	r3, r2
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	e013      	b.n	8004726 <HAL_TIM_PWM_Start+0x62>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d108      	bne.n	8004716 <HAL_TIM_PWM_Start+0x52>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	223c      	movs	r2, #60	@ 0x3c
 8004708:	5c9b      	ldrb	r3, [r3, r2]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	1e5a      	subs	r2, r3, #1
 8004710:	4193      	sbcs	r3, r2
 8004712:	b2db      	uxtb	r3, r3
 8004714:	e007      	b.n	8004726 <HAL_TIM_PWM_Start+0x62>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	223d      	movs	r2, #61	@ 0x3d
 800471a:	5c9b      	ldrb	r3, [r3, r2]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	1e5a      	subs	r2, r3, #1
 8004722:	4193      	sbcs	r3, r2
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e052      	b.n	80047d4 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d104      	bne.n	800473e <HAL_TIM_PWM_Start+0x7a>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	223a      	movs	r2, #58	@ 0x3a
 8004738:	2102      	movs	r1, #2
 800473a:	5499      	strb	r1, [r3, r2]
 800473c:	e013      	b.n	8004766 <HAL_TIM_PWM_Start+0xa2>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b04      	cmp	r3, #4
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Start+0x8a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	223b      	movs	r2, #59	@ 0x3b
 8004748:	2102      	movs	r1, #2
 800474a:	5499      	strb	r1, [r3, r2]
 800474c:	e00b      	b.n	8004766 <HAL_TIM_PWM_Start+0xa2>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0x9a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	223c      	movs	r2, #60	@ 0x3c
 8004758:	2102      	movs	r1, #2
 800475a:	5499      	strb	r1, [r3, r2]
 800475c:	e003      	b.n	8004766 <HAL_TIM_PWM_Start+0xa2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	223d      	movs	r2, #61	@ 0x3d
 8004762:	2102      	movs	r1, #2
 8004764:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6839      	ldr	r1, [r7, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	0018      	movs	r0, r3
 8004770:	f000 fdf6 	bl	8005360 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2380      	movs	r3, #128	@ 0x80
 800477a:	05db      	lsls	r3, r3, #23
 800477c:	429a      	cmp	r2, r3
 800477e:	d00e      	beq.n	800479e <HAL_TIM_PWM_Start+0xda>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a15      	ldr	r2, [pc, #84]	@ (80047dc <HAL_TIM_PWM_Start+0x118>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_TIM_PWM_Start+0xda>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a14      	ldr	r2, [pc, #80]	@ (80047e0 <HAL_TIM_PWM_Start+0x11c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <HAL_TIM_PWM_Start+0xda>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a12      	ldr	r2, [pc, #72]	@ (80047e4 <HAL_TIM_PWM_Start+0x120>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d111      	bne.n	80047c2 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2207      	movs	r2, #7
 80047a6:	4013      	ands	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b06      	cmp	r3, #6
 80047ae:	d010      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2101      	movs	r1, #1
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c0:	e007      	b.n	80047d2 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2101      	movs	r1, #1
 80047ce:	430a      	orrs	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b004      	add	sp, #16
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40010800 	.word	0x40010800
 80047e4:	40011400 	.word	0x40011400

080047e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e088      	b.n	800490e <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2239      	movs	r2, #57	@ 0x39
 8004800:	5c9b      	ldrb	r3, [r3, r2]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2238      	movs	r2, #56	@ 0x38
 800480c:	2100      	movs	r1, #0
 800480e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	0018      	movs	r0, r3
 8004814:	f7fc fd66 	bl	80012e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2239      	movs	r2, #57	@ 0x39
 800481c:	2102      	movs	r1, #2
 800481e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	493b      	ldr	r1, [pc, #236]	@ (8004918 <HAL_TIM_Encoder_Init+0x130>)
 800482c:	400a      	ands	r2, r1
 800482e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3304      	adds	r3, #4
 8004838:	0019      	movs	r1, r3
 800483a:	0010      	movs	r0, r2
 800483c:	f000 fb94 	bl	8004f68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4a2d      	ldr	r2, [pc, #180]	@ (800491c <HAL_TIM_Encoder_Init+0x134>)
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	4313      	orrs	r3, r2
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4a28      	ldr	r2, [pc, #160]	@ (8004920 <HAL_TIM_Encoder_Init+0x138>)
 8004880:	4013      	ands	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4a27      	ldr	r2, [pc, #156]	@ (8004924 <HAL_TIM_Encoder_Init+0x13c>)
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	4313      	orrs	r3, r2
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	011a      	lsls	r2, r3, #4
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	031b      	lsls	r3, r3, #12
 80048aa:	4313      	orrs	r3, r2
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2222      	movs	r2, #34	@ 0x22
 80048b6:	4393      	bics	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2288      	movs	r2, #136	@ 0x88
 80048be:	4393      	bics	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	4313      	orrs	r3, r2
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	223e      	movs	r2, #62	@ 0x3e
 80048f0:	2101      	movs	r1, #1
 80048f2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	223a      	movs	r2, #58	@ 0x3a
 80048f8:	2101      	movs	r1, #1
 80048fa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	223b      	movs	r2, #59	@ 0x3b
 8004900:	2101      	movs	r1, #1
 8004902:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2239      	movs	r2, #57	@ 0x39
 8004908:	2101      	movs	r1, #1
 800490a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	0018      	movs	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	b006      	add	sp, #24
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	ffffbff8 	.word	0xffffbff8
 800491c:	fffffcfc 	.word	0xfffffcfc
 8004920:	fffff3f3 	.word	0xfffff3f3
 8004924:	ffff0f0f 	.word	0xffff0f0f

08004928 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004932:	200f      	movs	r0, #15
 8004934:	183b      	adds	r3, r7, r0
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	213a      	movs	r1, #58	@ 0x3a
 800493a:	5c52      	ldrb	r2, [r2, r1]
 800493c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800493e:	230e      	movs	r3, #14
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	213b      	movs	r1, #59	@ 0x3b
 8004946:	5c52      	ldrb	r2, [r2, r1]
 8004948:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <HAL_TIM_Encoder_Start+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004950:	183b      	adds	r3, r7, r0
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d001      	beq.n	800495c <HAL_TIM_Encoder_Start+0x34>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e056      	b.n	8004a0a <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	223a      	movs	r2, #58	@ 0x3a
 8004960:	2102      	movs	r1, #2
 8004962:	5499      	strb	r1, [r3, r2]
 8004964:	e022      	b.n	80049ac <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b04      	cmp	r3, #4
 800496a:	d10b      	bne.n	8004984 <HAL_TIM_Encoder_Start+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800496c:	230e      	movs	r3, #14
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d001      	beq.n	800497a <HAL_TIM_Encoder_Start+0x52>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e047      	b.n	8004a0a <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	223b      	movs	r2, #59	@ 0x3b
 800497e:	2102      	movs	r1, #2
 8004980:	5499      	strb	r1, [r3, r2]
 8004982:	e013      	b.n	80049ac <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004984:	230f      	movs	r3, #15
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d104      	bne.n	8004998 <HAL_TIM_Encoder_Start+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800498e:	230e      	movs	r3, #14
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d001      	beq.n	800499c <HAL_TIM_Encoder_Start+0x74>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e036      	b.n	8004a0a <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	223a      	movs	r2, #58	@ 0x3a
 80049a0:	2102      	movs	r1, #2
 80049a2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	223b      	movs	r2, #59	@ 0x3b
 80049a8:	2102      	movs	r1, #2
 80049aa:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_Encoder_Start+0x92>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d008      	beq.n	80049ca <HAL_TIM_Encoder_Start+0xa2>
 80049b8:	e00f      	b.n	80049da <HAL_TIM_Encoder_Start+0xb2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2201      	movs	r2, #1
 80049c0:	2100      	movs	r1, #0
 80049c2:	0018      	movs	r0, r3
 80049c4:	f000 fccc 	bl	8005360 <TIM_CCxChannelCmd>
      break;
 80049c8:	e016      	b.n	80049f8 <HAL_TIM_Encoder_Start+0xd0>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2201      	movs	r2, #1
 80049d0:	2104      	movs	r1, #4
 80049d2:	0018      	movs	r0, r3
 80049d4:	f000 fcc4 	bl	8005360 <TIM_CCxChannelCmd>
      break;
 80049d8:	e00e      	b.n	80049f8 <HAL_TIM_Encoder_Start+0xd0>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2201      	movs	r2, #1
 80049e0:	2100      	movs	r1, #0
 80049e2:	0018      	movs	r0, r3
 80049e4:	f000 fcbc 	bl	8005360 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2201      	movs	r2, #1
 80049ee:	2104      	movs	r1, #4
 80049f0:	0018      	movs	r0, r3
 80049f2:	f000 fcb5 	bl	8005360 <TIM_CCxChannelCmd>
      break;
 80049f6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2101      	movs	r1, #1
 8004a04:	430a      	orrs	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b004      	add	sp, #16
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2202      	movs	r2, #2
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d124      	bne.n	8004a72 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d11d      	bne.n	8004a72 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	4252      	negs	r2, r2
 8004a3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 fa6f 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004a5a:	e007      	b.n	8004a6c <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f000 fa62 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	0018      	movs	r0, r3
 8004a68:	f000 fa6e 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d125      	bne.n	8004acc <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2204      	movs	r2, #4
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d11e      	bne.n	8004acc <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2205      	movs	r2, #5
 8004a94:	4252      	negs	r2, r2
 8004a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	23c0      	movs	r3, #192	@ 0xc0
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 fa42 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e007      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 fa35 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 fa41 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d124      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d11d      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2209      	movs	r2, #9
 8004aee:	4252      	negs	r2, r2
 8004af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2204      	movs	r2, #4
 8004af6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	2203      	movs	r2, #3
 8004b00:	4013      	ands	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	0018      	movs	r0, r3
 8004b08:	f000 fa16 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e007      	b.n	8004b1e <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0018      	movs	r0, r3
 8004b12:	f000 fa09 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f000 fa15 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d125      	bne.n	8004b7e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2210      	movs	r2, #16
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d11e      	bne.n	8004b7e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2211      	movs	r2, #17
 8004b46:	4252      	negs	r2, r2
 8004b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69da      	ldr	r2, [r3, #28]
 8004b56:	23c0      	movs	r3, #192	@ 0xc0
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 f9e9 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004b66:	e007      	b.n	8004b78 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 f9dc 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	0018      	movs	r0, r3
 8004b74:	f000 f9e8 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2201      	movs	r2, #1
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d10f      	bne.n	8004bac <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d108      	bne.n	8004bac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	4252      	negs	r2, r2
 8004ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 f9b6 	bl	8004f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2240      	movs	r2, #64	@ 0x40
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b40      	cmp	r3, #64	@ 0x40
 8004bb8:	d10f      	bne.n	8004bda <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2240      	movs	r2, #64	@ 0x40
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b40      	cmp	r3, #64	@ 0x40
 8004bc6:	d108      	bne.n	8004bda <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2241      	movs	r2, #65	@ 0x41
 8004bce:	4252      	negs	r2, r2
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 f9bf 	bl	8004f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b002      	add	sp, #8
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf0:	2317      	movs	r3, #23
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2238      	movs	r2, #56	@ 0x38
 8004bfc:	5c9b      	ldrb	r3, [r3, r2]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0ad      	b.n	8004d62 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2238      	movs	r2, #56	@ 0x38
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	d100      	bne.n	8004c16 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004c14:	e076      	b.n	8004d04 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b0c      	cmp	r3, #12
 8004c1a:	d900      	bls.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004c1c:	e095      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x166>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d04e      	beq.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d900      	bls.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0x48>
 8004c2a:	e08e      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x166>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_PWM_ConfigChannel+0x56>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d021      	beq.n	8004c7c <HAL_TIM_PWM_ConfigChannel+0x98>
 8004c38:	e087      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 f9ee 	bl	8005024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2108      	movs	r1, #8
 8004c54:	430a      	orrs	r2, r1
 8004c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2104      	movs	r1, #4
 8004c64:	438a      	bics	r2, r1
 8004c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6999      	ldr	r1, [r3, #24]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	619a      	str	r2, [r3, #24]
      break;
 8004c7a:	e06b      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	0011      	movs	r1, r2
 8004c84:	0018      	movs	r0, r3
 8004c86:	f000 fa09 	bl	800509c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699a      	ldr	r2, [r3, #24]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2180      	movs	r1, #128	@ 0x80
 8004c96:	0109      	lsls	r1, r1, #4
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4931      	ldr	r1, [pc, #196]	@ (8004d6c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004ca8:	400a      	ands	r2, r1
 8004caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6999      	ldr	r1, [r3, #24]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	021a      	lsls	r2, r3, #8
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	619a      	str	r2, [r3, #24]
      break;
 8004cc0:	e048      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	0011      	movs	r1, r2
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 fa28 	bl	8005120 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69da      	ldr	r2, [r3, #28]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2108      	movs	r1, #8
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69da      	ldr	r2, [r3, #28]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2104      	movs	r1, #4
 8004cec:	438a      	bics	r2, r1
 8004cee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69d9      	ldr	r1, [r3, #28]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	61da      	str	r2, [r3, #28]
      break;
 8004d02:	e027      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f000 fa47 	bl	80051a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2180      	movs	r1, #128	@ 0x80
 8004d1e:	0109      	lsls	r1, r1, #4
 8004d20:	430a      	orrs	r2, r1
 8004d22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	490f      	ldr	r1, [pc, #60]	@ (8004d6c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004d30:	400a      	ands	r2, r1
 8004d32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69d9      	ldr	r1, [r3, #28]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	61da      	str	r2, [r3, #28]
      break;
 8004d48:	e004      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004d4a:	2317      	movs	r3, #23
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
      break;
 8004d52:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2238      	movs	r2, #56	@ 0x38
 8004d58:	2100      	movs	r1, #0
 8004d5a:	5499      	strb	r1, [r3, r2]

  return status;
 8004d5c:	2317      	movs	r3, #23
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	781b      	ldrb	r3, [r3, #0]
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b006      	add	sp, #24
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	fffffbff 	.word	0xfffffbff

08004d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7a:	230f      	movs	r3, #15
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2238      	movs	r2, #56	@ 0x38
 8004d86:	5c9b      	ldrb	r3, [r3, r2]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_ConfigClockSource+0x20>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e0bc      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x19a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2238      	movs	r2, #56	@ 0x38
 8004d94:	2101      	movs	r1, #1
 8004d96:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2239      	movs	r2, #57	@ 0x39
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2277      	movs	r2, #119	@ 0x77
 8004dac:	4393      	bics	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4a58      	ldr	r2, [pc, #352]	@ (8004f14 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2280      	movs	r2, #128	@ 0x80
 8004dc6:	0192      	lsls	r2, r2, #6
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d040      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0xde>
 8004dcc:	2280      	movs	r2, #128	@ 0x80
 8004dce:	0192      	lsls	r2, r2, #6
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d900      	bls.n	8004dd6 <HAL_TIM_ConfigClockSource+0x66>
 8004dd4:	e088      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x178>
 8004dd6:	2280      	movs	r2, #128	@ 0x80
 8004dd8:	0152      	lsls	r2, r2, #5
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d100      	bne.n	8004de0 <HAL_TIM_ConfigClockSource+0x70>
 8004dde:	e088      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x182>
 8004de0:	2280      	movs	r2, #128	@ 0x80
 8004de2:	0152      	lsls	r2, r2, #5
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d900      	bls.n	8004dea <HAL_TIM_ConfigClockSource+0x7a>
 8004de8:	e07e      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x178>
 8004dea:	2b70      	cmp	r3, #112	@ 0x70
 8004dec:	d018      	beq.n	8004e20 <HAL_TIM_ConfigClockSource+0xb0>
 8004dee:	d900      	bls.n	8004df2 <HAL_TIM_ConfigClockSource+0x82>
 8004df0:	e07a      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x178>
 8004df2:	2b60      	cmp	r3, #96	@ 0x60
 8004df4:	d04f      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x126>
 8004df6:	d900      	bls.n	8004dfa <HAL_TIM_ConfigClockSource+0x8a>
 8004df8:	e076      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x178>
 8004dfa:	2b50      	cmp	r3, #80	@ 0x50
 8004dfc:	d03b      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x106>
 8004dfe:	d900      	bls.n	8004e02 <HAL_TIM_ConfigClockSource+0x92>
 8004e00:	e072      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x178>
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	d057      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x146>
 8004e06:	d900      	bls.n	8004e0a <HAL_TIM_ConfigClockSource+0x9a>
 8004e08:	e06e      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x178>
 8004e0a:	2b30      	cmp	r3, #48	@ 0x30
 8004e0c:	d063      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x166>
 8004e0e:	d86b      	bhi.n	8004ee8 <HAL_TIM_ConfigClockSource+0x178>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d060      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x166>
 8004e14:	d868      	bhi.n	8004ee8 <HAL_TIM_ConfigClockSource+0x178>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d05d      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x166>
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d05b      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x166>
 8004e1e:	e063      	b.n	8004ee8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e30:	f000 fa76 	bl	8005320 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2277      	movs	r2, #119	@ 0x77
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	609a      	str	r2, [r3, #8]
      break;
 8004e4c:	e052      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e5e:	f000 fa5f 	bl	8005320 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2180      	movs	r1, #128	@ 0x80
 8004e6e:	01c9      	lsls	r1, r1, #7
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
      break;
 8004e74:	e03e      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e82:	001a      	movs	r2, r3
 8004e84:	f000 f9d2 	bl	800522c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2150      	movs	r1, #80	@ 0x50
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f000 fa2c 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 8004e94:	e02e      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	f000 f9f0 	bl	8005288 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2160      	movs	r1, #96	@ 0x60
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 fa1c 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e01e      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec2:	001a      	movs	r2, r3
 8004ec4:	f000 f9b2 	bl	800522c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2140      	movs	r1, #64	@ 0x40
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 fa0c 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e00e      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	0019      	movs	r1, r3
 8004ee0:	0010      	movs	r0, r2
 8004ee2:	f000 fa03 	bl	80052ec <TIM_ITRx_SetConfig>
      break;
 8004ee6:	e005      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004ee8:	230f      	movs	r3, #15
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]
      break;
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004ef2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2239      	movs	r2, #57	@ 0x39
 8004ef8:	2101      	movs	r1, #1
 8004efa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2238      	movs	r2, #56	@ 0x38
 8004f00:	2100      	movs	r1, #0
 8004f02:	5499      	strb	r1, [r3, r2]

  return status;
 8004f04:	230f      	movs	r3, #15
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	781b      	ldrb	r3, [r3, #0]
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b004      	add	sp, #16
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			@ (mov r8, r8)
 8004f14:	ffff00ff 	.word	0xffff00ff

08004f18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f20:	46c0      	nop			@ (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f30:	46c0      	nop			@ (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b002      	add	sp, #8
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f40:	46c0      	nop			@ (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b002      	add	sp, #8
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f50:	46c0      	nop			@ (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b002      	add	sp, #8
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f60:	46c0      	nop			@ (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b002      	add	sp, #8
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	2380      	movs	r3, #128	@ 0x80
 8004f7c:	05db      	lsls	r3, r3, #23
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d00b      	beq.n	8004f9a <TIM_Base_SetConfig+0x32>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a23      	ldr	r2, [pc, #140]	@ (8005014 <TIM_Base_SetConfig+0xac>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <TIM_Base_SetConfig+0x32>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a22      	ldr	r2, [pc, #136]	@ (8005018 <TIM_Base_SetConfig+0xb0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_Base_SetConfig+0x32>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a21      	ldr	r2, [pc, #132]	@ (800501c <TIM_Base_SetConfig+0xb4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d108      	bne.n	8004fac <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2270      	movs	r2, #112	@ 0x70
 8004f9e:	4393      	bics	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	2380      	movs	r3, #128	@ 0x80
 8004fb0:	05db      	lsls	r3, r3, #23
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d00b      	beq.n	8004fce <TIM_Base_SetConfig+0x66>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a16      	ldr	r2, [pc, #88]	@ (8005014 <TIM_Base_SetConfig+0xac>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <TIM_Base_SetConfig+0x66>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a15      	ldr	r2, [pc, #84]	@ (8005018 <TIM_Base_SetConfig+0xb0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <TIM_Base_SetConfig+0x66>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a14      	ldr	r2, [pc, #80]	@ (800501c <TIM_Base_SetConfig+0xb4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d108      	bne.n	8004fe0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a13      	ldr	r2, [pc, #76]	@ (8005020 <TIM_Base_SetConfig+0xb8>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2280      	movs	r2, #128	@ 0x80
 8004fe4:	4393      	bics	r3, r2
 8004fe6:	001a      	movs	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	615a      	str	r2, [r3, #20]
}
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b004      	add	sp, #16
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40000400 	.word	0x40000400
 8005018:	40010800 	.word	0x40010800
 800501c:	40011400 	.word	0x40011400
 8005020:	fffffcff 	.word	0xfffffcff

08005024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	2201      	movs	r2, #1
 8005034:	4393      	bics	r3, r2
 8005036:	001a      	movs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2270      	movs	r2, #112	@ 0x70
 8005052:	4393      	bics	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2203      	movs	r2, #3
 800505a:	4393      	bics	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2202      	movs	r2, #2
 800506c:	4393      	bics	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	46c0      	nop			@ (mov r8, r8)
 8005096:	46bd      	mov	sp, r7
 8005098:	b006      	add	sp, #24
 800509a:	bd80      	pop	{r7, pc}

0800509c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	2210      	movs	r2, #16
 80050ac:	4393      	bics	r3, r2
 80050ae:	001a      	movs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a13      	ldr	r2, [pc, #76]	@ (8005118 <TIM_OC2_SetConfig+0x7c>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4a12      	ldr	r2, [pc, #72]	@ (800511c <TIM_OC2_SetConfig+0x80>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2220      	movs	r2, #32
 80050e6:	4393      	bics	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	621a      	str	r2, [r3, #32]
}
 8005110:	46c0      	nop			@ (mov r8, r8)
 8005112:	46bd      	mov	sp, r7
 8005114:	b006      	add	sp, #24
 8005116:	bd80      	pop	{r7, pc}
 8005118:	ffff8fff 	.word	0xffff8fff
 800511c:	fffffcff 	.word	0xfffffcff

08005120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4a1a      	ldr	r2, [pc, #104]	@ (8005198 <TIM_OC3_SetConfig+0x78>)
 8005130:	401a      	ands	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2270      	movs	r2, #112	@ 0x70
 800514c:	4393      	bics	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2203      	movs	r2, #3
 8005154:	4393      	bics	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	4a0d      	ldr	r2, [pc, #52]	@ (800519c <TIM_OC3_SetConfig+0x7c>)
 8005166:	4013      	ands	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	021b      	lsls	r3, r3, #8
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	621a      	str	r2, [r3, #32]
}
 8005190:	46c0      	nop			@ (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	b006      	add	sp, #24
 8005196:	bd80      	pop	{r7, pc}
 8005198:	fffffeff 	.word	0xfffffeff
 800519c:	fffffdff 	.word	0xfffffdff

080051a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	4a1b      	ldr	r2, [pc, #108]	@ (800521c <TIM_OC4_SetConfig+0x7c>)
 80051b0:	401a      	ands	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a15      	ldr	r2, [pc, #84]	@ (8005220 <TIM_OC4_SetConfig+0x80>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a14      	ldr	r2, [pc, #80]	@ (8005224 <TIM_OC4_SetConfig+0x84>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4a10      	ldr	r2, [pc, #64]	@ (8005228 <TIM_OC4_SetConfig+0x88>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	031b      	lsls	r3, r3, #12
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	46c0      	nop			@ (mov r8, r8)
 8005214:	46bd      	mov	sp, r7
 8005216:	b006      	add	sp, #24
 8005218:	bd80      	pop	{r7, pc}
 800521a:	46c0      	nop			@ (mov r8, r8)
 800521c:	ffffefff 	.word	0xffffefff
 8005220:	ffff8fff 	.word	0xffff8fff
 8005224:	fffffcff 	.word	0xfffffcff
 8005228:	ffffdfff 	.word	0xffffdfff

0800522c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	2201      	movs	r2, #1
 8005244:	4393      	bics	r3, r2
 8005246:	001a      	movs	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	22f0      	movs	r2, #240	@ 0xf0
 8005256:	4393      	bics	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	220a      	movs	r2, #10
 8005268:	4393      	bics	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	46c0      	nop			@ (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b006      	add	sp, #24
 8005286:	bd80      	pop	{r7, pc}

08005288 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	2210      	movs	r2, #16
 800529a:	4393      	bics	r3, r2
 800529c:	001a      	movs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4a0d      	ldr	r2, [pc, #52]	@ (80052e8 <TIM_TI2_ConfigInputStage+0x60>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	031b      	lsls	r3, r3, #12
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	22a0      	movs	r2, #160	@ 0xa0
 80052c4:	4393      	bics	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	46c0      	nop			@ (mov r8, r8)
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b006      	add	sp, #24
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	46c0      	nop			@ (mov r8, r8)
 80052e8:	ffff0fff 	.word	0xffff0fff

080052ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2270      	movs	r2, #112	@ 0x70
 8005300:	4393      	bics	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	2207      	movs	r2, #7
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	609a      	str	r2, [r3, #8]
}
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	46bd      	mov	sp, r7
 800531a:	b004      	add	sp, #16
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	4a09      	ldr	r2, [pc, #36]	@ (800535c <TIM_ETR_SetConfig+0x3c>)
 8005338:	4013      	ands	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	021a      	lsls	r2, r3, #8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	431a      	orrs	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4313      	orrs	r3, r2
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	609a      	str	r2, [r3, #8]
}
 8005354:	46c0      	nop			@ (mov r8, r8)
 8005356:	46bd      	mov	sp, r7
 8005358:	b006      	add	sp, #24
 800535a:	bd80      	pop	{r7, pc}
 800535c:	ffff00ff 	.word	0xffff00ff

08005360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	221f      	movs	r2, #31
 8005370:	4013      	ands	r3, r2
 8005372:	2201      	movs	r2, #1
 8005374:	409a      	lsls	r2, r3
 8005376:	0013      	movs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	43d2      	mvns	r2, r2
 8005382:	401a      	ands	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1a      	ldr	r2, [r3, #32]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	211f      	movs	r1, #31
 8005390:	400b      	ands	r3, r1
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4099      	lsls	r1, r3
 8005396:	000b      	movs	r3, r1
 8005398:	431a      	orrs	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	46c0      	nop			@ (mov r8, r8)
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b006      	add	sp, #24
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2238      	movs	r2, #56	@ 0x38
 80053b6:	5c9b      	ldrb	r3, [r3, r2]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053bc:	2302      	movs	r3, #2
 80053be:	e047      	b.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2238      	movs	r2, #56	@ 0x38
 80053c4:	2101      	movs	r1, #1
 80053c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2239      	movs	r2, #57	@ 0x39
 80053cc:	2102      	movs	r1, #2
 80053ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2270      	movs	r2, #112	@ 0x70
 80053e4:	4393      	bics	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	2380      	movs	r3, #128	@ 0x80
 8005400:	05db      	lsls	r3, r3, #23
 8005402:	429a      	cmp	r2, r3
 8005404:	d00e      	beq.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a13      	ldr	r2, [pc, #76]	@ (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a11      	ldr	r2, [pc, #68]	@ (800545c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a10      	ldr	r2, [pc, #64]	@ (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10c      	bne.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2280      	movs	r2, #128	@ 0x80
 8005428:	4393      	bics	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	4313      	orrs	r3, r2
 8005434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2239      	movs	r2, #57	@ 0x39
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2238      	movs	r2, #56	@ 0x38
 800544a:	2100      	movs	r1, #0
 800544c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	0018      	movs	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	b004      	add	sp, #16
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40000400 	.word	0x40000400
 800545c:	40010800 	.word	0x40010800
 8005460:	40011400 	.word	0x40011400

08005464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e044      	b.n	8005500 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d107      	bne.n	800548e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2278      	movs	r2, #120	@ 0x78
 8005482:	2100      	movs	r1, #0
 8005484:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	0018      	movs	r0, r3
 800548a:	f7fc f82d 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2224      	movs	r2, #36	@ 0x24
 8005492:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2101      	movs	r1, #1
 80054a0:	438a      	bics	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	0018      	movs	r0, r3
 80054a8:	f000 fbce 	bl	8005c48 <UART_SetConfig>
 80054ac:	0003      	movs	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e024      	b.n	8005500 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	0018      	movs	r0, r3
 80054c2:	f000 fe5f 	bl	8006184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	490d      	ldr	r1, [pc, #52]	@ (8005508 <HAL_UART_Init+0xa4>)
 80054d2:	400a      	ands	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	212a      	movs	r1, #42	@ 0x2a
 80054e2:	438a      	bics	r2, r1
 80054e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2101      	movs	r1, #1
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	0018      	movs	r0, r3
 80054fa:	f000 fef7 	bl	80062ec <UART_CheckIdleState>
 80054fe:	0003      	movs	r3, r0
}
 8005500:	0018      	movs	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	b002      	add	sp, #8
 8005506:	bd80      	pop	{r7, pc}
 8005508:	ffffb7ff 	.word	0xffffb7ff

0800550c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	@ 0x28
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	1dbb      	adds	r3, r7, #6
 800551a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005520:	2b20      	cmp	r3, #32
 8005522:	d000      	beq.n	8005526 <HAL_UART_Transmit+0x1a>
 8005524:	e08c      	b.n	8005640 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_UART_Transmit+0x28>
 800552c:	1dbb      	adds	r3, r7, #6
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e084      	b.n	8005642 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	2380      	movs	r3, #128	@ 0x80
 800553e:	015b      	lsls	r3, r3, #5
 8005540:	429a      	cmp	r2, r3
 8005542:	d109      	bne.n	8005558 <HAL_UART_Transmit+0x4c>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d105      	bne.n	8005558 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2201      	movs	r2, #1
 8005550:	4013      	ands	r3, r2
 8005552:	d001      	beq.n	8005558 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e074      	b.n	8005642 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2284      	movs	r2, #132	@ 0x84
 800555c:	2100      	movs	r1, #0
 800555e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2221      	movs	r2, #33	@ 0x21
 8005564:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005566:	f7fc f89b 	bl	80016a0 <HAL_GetTick>
 800556a:	0003      	movs	r3, r0
 800556c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1dba      	adds	r2, r7, #6
 8005572:	2150      	movs	r1, #80	@ 0x50
 8005574:	8812      	ldrh	r2, [r2, #0]
 8005576:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	1dba      	adds	r2, r7, #6
 800557c:	2152      	movs	r1, #82	@ 0x52
 800557e:	8812      	ldrh	r2, [r2, #0]
 8005580:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	2380      	movs	r3, #128	@ 0x80
 8005588:	015b      	lsls	r3, r3, #5
 800558a:	429a      	cmp	r2, r3
 800558c:	d108      	bne.n	80055a0 <HAL_UART_Transmit+0x94>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e003      	b.n	80055a8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055a8:	e02f      	b.n	800560a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	0013      	movs	r3, r2
 80055b4:	2200      	movs	r2, #0
 80055b6:	2180      	movs	r1, #128	@ 0x80
 80055b8:	f000 ff40 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 80055bc:	1e03      	subs	r3, r0, #0
 80055be:	d004      	beq.n	80055ca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e03b      	b.n	8005642 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	001a      	movs	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	05d2      	lsls	r2, r2, #23
 80055dc:	0dd2      	lsrs	r2, r2, #23
 80055de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	3302      	adds	r3, #2
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	e007      	b.n	80055f8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	3301      	adds	r3, #1
 80055f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2252      	movs	r2, #82	@ 0x52
 80055fc:	5a9b      	ldrh	r3, [r3, r2]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b299      	uxth	r1, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2252      	movs	r2, #82	@ 0x52
 8005608:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2252      	movs	r2, #82	@ 0x52
 800560e:	5a9b      	ldrh	r3, [r3, r2]
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1c9      	bne.n	80055aa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	0013      	movs	r3, r2
 8005620:	2200      	movs	r2, #0
 8005622:	2140      	movs	r1, #64	@ 0x40
 8005624:	f000 ff0a 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d004      	beq.n	8005636 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e005      	b.n	8005642 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2220      	movs	r2, #32
 800563a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	0018      	movs	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	b008      	add	sp, #32
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800564c:	b590      	push	{r4, r7, lr}
 800564e:	b0ab      	sub	sp, #172	@ 0xac
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	22a4      	movs	r2, #164	@ 0xa4
 800565c:	18b9      	adds	r1, r7, r2
 800565e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	20a0      	movs	r0, #160	@ 0xa0
 8005668:	1839      	adds	r1, r7, r0
 800566a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	219c      	movs	r1, #156	@ 0x9c
 8005674:	1879      	adds	r1, r7, r1
 8005676:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005678:	0011      	movs	r1, r2
 800567a:	18bb      	adds	r3, r7, r2
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a99      	ldr	r2, [pc, #612]	@ (80058e4 <HAL_UART_IRQHandler+0x298>)
 8005680:	4013      	ands	r3, r2
 8005682:	2298      	movs	r2, #152	@ 0x98
 8005684:	18bc      	adds	r4, r7, r2
 8005686:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005688:	18bb      	adds	r3, r7, r2
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d114      	bne.n	80056ba <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005690:	187b      	adds	r3, r7, r1
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2220      	movs	r2, #32
 8005696:	4013      	ands	r3, r2
 8005698:	d00f      	beq.n	80056ba <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800569a:	183b      	adds	r3, r7, r0
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2220      	movs	r2, #32
 80056a0:	4013      	ands	r3, r2
 80056a2:	d00a      	beq.n	80056ba <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d100      	bne.n	80056ae <HAL_UART_IRQHandler+0x62>
 80056ac:	e2a0      	b.n	8005bf0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	0010      	movs	r0, r2
 80056b6:	4798      	blx	r3
      }
      return;
 80056b8:	e29a      	b.n	8005bf0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056ba:	2398      	movs	r3, #152	@ 0x98
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d100      	bne.n	80056c6 <HAL_UART_IRQHandler+0x7a>
 80056c4:	e114      	b.n	80058f0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056c6:	239c      	movs	r3, #156	@ 0x9c
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2201      	movs	r2, #1
 80056ce:	4013      	ands	r3, r2
 80056d0:	d106      	bne.n	80056e0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056d2:	23a0      	movs	r3, #160	@ 0xa0
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a83      	ldr	r2, [pc, #524]	@ (80058e8 <HAL_UART_IRQHandler+0x29c>)
 80056da:	4013      	ands	r3, r2
 80056dc:	d100      	bne.n	80056e0 <HAL_UART_IRQHandler+0x94>
 80056de:	e107      	b.n	80058f0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056e0:	23a4      	movs	r3, #164	@ 0xa4
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2201      	movs	r2, #1
 80056e8:	4013      	ands	r3, r2
 80056ea:	d012      	beq.n	8005712 <HAL_UART_IRQHandler+0xc6>
 80056ec:	23a0      	movs	r3, #160	@ 0xa0
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	2380      	movs	r3, #128	@ 0x80
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4013      	ands	r3, r2
 80056f8:	d00b      	beq.n	8005712 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2201      	movs	r2, #1
 8005700:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2284      	movs	r2, #132	@ 0x84
 8005706:	589b      	ldr	r3, [r3, r2]
 8005708:	2201      	movs	r2, #1
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2184      	movs	r1, #132	@ 0x84
 8005710:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005712:	23a4      	movs	r3, #164	@ 0xa4
 8005714:	18fb      	adds	r3, r7, r3
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2202      	movs	r2, #2
 800571a:	4013      	ands	r3, r2
 800571c:	d011      	beq.n	8005742 <HAL_UART_IRQHandler+0xf6>
 800571e:	239c      	movs	r3, #156	@ 0x9c
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2201      	movs	r2, #1
 8005726:	4013      	ands	r3, r2
 8005728:	d00b      	beq.n	8005742 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2202      	movs	r2, #2
 8005730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2284      	movs	r2, #132	@ 0x84
 8005736:	589b      	ldr	r3, [r3, r2]
 8005738:	2204      	movs	r2, #4
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2184      	movs	r1, #132	@ 0x84
 8005740:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005742:	23a4      	movs	r3, #164	@ 0xa4
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2204      	movs	r2, #4
 800574a:	4013      	ands	r3, r2
 800574c:	d011      	beq.n	8005772 <HAL_UART_IRQHandler+0x126>
 800574e:	239c      	movs	r3, #156	@ 0x9c
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	4013      	ands	r3, r2
 8005758:	d00b      	beq.n	8005772 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2204      	movs	r2, #4
 8005760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2284      	movs	r2, #132	@ 0x84
 8005766:	589b      	ldr	r3, [r3, r2]
 8005768:	2202      	movs	r2, #2
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2184      	movs	r1, #132	@ 0x84
 8005770:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005772:	23a4      	movs	r3, #164	@ 0xa4
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2208      	movs	r2, #8
 800577a:	4013      	ands	r3, r2
 800577c:	d017      	beq.n	80057ae <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800577e:	23a0      	movs	r3, #160	@ 0xa0
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2220      	movs	r2, #32
 8005786:	4013      	ands	r3, r2
 8005788:	d105      	bne.n	8005796 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800578a:	239c      	movs	r3, #156	@ 0x9c
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2201      	movs	r2, #1
 8005792:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005794:	d00b      	beq.n	80057ae <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2208      	movs	r2, #8
 800579c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2284      	movs	r2, #132	@ 0x84
 80057a2:	589b      	ldr	r3, [r3, r2]
 80057a4:	2208      	movs	r2, #8
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2184      	movs	r1, #132	@ 0x84
 80057ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057ae:	23a4      	movs	r3, #164	@ 0xa4
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	2380      	movs	r3, #128	@ 0x80
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	4013      	ands	r3, r2
 80057ba:	d013      	beq.n	80057e4 <HAL_UART_IRQHandler+0x198>
 80057bc:	23a0      	movs	r3, #160	@ 0xa0
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	2380      	movs	r3, #128	@ 0x80
 80057c4:	04db      	lsls	r3, r3, #19
 80057c6:	4013      	ands	r3, r2
 80057c8:	d00c      	beq.n	80057e4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2280      	movs	r2, #128	@ 0x80
 80057d0:	0112      	lsls	r2, r2, #4
 80057d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2284      	movs	r2, #132	@ 0x84
 80057d8:	589b      	ldr	r3, [r3, r2]
 80057da:	2220      	movs	r2, #32
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2184      	movs	r1, #132	@ 0x84
 80057e2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2284      	movs	r2, #132	@ 0x84
 80057e8:	589b      	ldr	r3, [r3, r2]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d100      	bne.n	80057f0 <HAL_UART_IRQHandler+0x1a4>
 80057ee:	e201      	b.n	8005bf4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057f0:	23a4      	movs	r3, #164	@ 0xa4
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2220      	movs	r2, #32
 80057f8:	4013      	ands	r3, r2
 80057fa:	d00e      	beq.n	800581a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057fc:	23a0      	movs	r3, #160	@ 0xa0
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2220      	movs	r2, #32
 8005804:	4013      	ands	r3, r2
 8005806:	d008      	beq.n	800581a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	0010      	movs	r0, r2
 8005818:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2284      	movs	r2, #132	@ 0x84
 800581e:	589b      	ldr	r3, [r3, r2]
 8005820:	2194      	movs	r1, #148	@ 0x94
 8005822:	187a      	adds	r2, r7, r1
 8005824:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2240      	movs	r2, #64	@ 0x40
 800582e:	4013      	ands	r3, r2
 8005830:	2b40      	cmp	r3, #64	@ 0x40
 8005832:	d004      	beq.n	800583e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005834:	187b      	adds	r3, r7, r1
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2228      	movs	r2, #40	@ 0x28
 800583a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800583c:	d047      	beq.n	80058ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	0018      	movs	r0, r3
 8005842:	f000 fe65 	bl	8006510 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2240      	movs	r2, #64	@ 0x40
 800584e:	4013      	ands	r3, r2
 8005850:	2b40      	cmp	r3, #64	@ 0x40
 8005852:	d137      	bne.n	80058c4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005854:	f3ef 8310 	mrs	r3, PRIMASK
 8005858:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800585a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585c:	2090      	movs	r0, #144	@ 0x90
 800585e:	183a      	adds	r2, r7, r0
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	2301      	movs	r3, #1
 8005864:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005866:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005868:	f383 8810 	msr	PRIMASK, r3
}
 800586c:	46c0      	nop			@ (mov r8, r8)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2140      	movs	r1, #64	@ 0x40
 800587a:	438a      	bics	r2, r1
 800587c:	609a      	str	r2, [r3, #8]
 800587e:	183b      	adds	r3, r7, r0
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005884:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005886:	f383 8810 	msr	PRIMASK, r3
}
 800588a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005890:	2b00      	cmp	r3, #0
 8005892:	d012      	beq.n	80058ba <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005898:	4a14      	ldr	r2, [pc, #80]	@ (80058ec <HAL_UART_IRQHandler+0x2a0>)
 800589a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a0:	0018      	movs	r0, r3
 80058a2:	f7fc f849 	bl	8001938 <HAL_DMA_Abort_IT>
 80058a6:	1e03      	subs	r3, r0, #0
 80058a8:	d01a      	beq.n	80058e0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b4:	0018      	movs	r0, r3
 80058b6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	e012      	b.n	80058e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	0018      	movs	r0, r3
 80058be:	f000 f9af 	bl	8005c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c2:	e00d      	b.n	80058e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 f9aa 	bl	8005c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	e008      	b.n	80058e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	0018      	movs	r0, r3
 80058d2:	f000 f9a5 	bl	8005c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2284      	movs	r2, #132	@ 0x84
 80058da:	2100      	movs	r1, #0
 80058dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80058de:	e189      	b.n	8005bf4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	46c0      	nop			@ (mov r8, r8)
    return;
 80058e2:	e187      	b.n	8005bf4 <HAL_UART_IRQHandler+0x5a8>
 80058e4:	0000080f 	.word	0x0000080f
 80058e8:	04000120 	.word	0x04000120
 80058ec:	080065d9 	.word	0x080065d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d000      	beq.n	80058fa <HAL_UART_IRQHandler+0x2ae>
 80058f8:	e13b      	b.n	8005b72 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058fa:	23a4      	movs	r3, #164	@ 0xa4
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2210      	movs	r2, #16
 8005902:	4013      	ands	r3, r2
 8005904:	d100      	bne.n	8005908 <HAL_UART_IRQHandler+0x2bc>
 8005906:	e134      	b.n	8005b72 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005908:	23a0      	movs	r3, #160	@ 0xa0
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2210      	movs	r2, #16
 8005910:	4013      	ands	r3, r2
 8005912:	d100      	bne.n	8005916 <HAL_UART_IRQHandler+0x2ca>
 8005914:	e12d      	b.n	8005b72 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2210      	movs	r2, #16
 800591c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2240      	movs	r2, #64	@ 0x40
 8005926:	4013      	ands	r3, r2
 8005928:	2b40      	cmp	r3, #64	@ 0x40
 800592a:	d000      	beq.n	800592e <HAL_UART_IRQHandler+0x2e2>
 800592c:	e0a1      	b.n	8005a72 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	217e      	movs	r1, #126	@ 0x7e
 8005938:	187b      	adds	r3, r7, r1
 800593a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800593c:	187b      	adds	r3, r7, r1
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d100      	bne.n	8005946 <HAL_UART_IRQHandler+0x2fa>
 8005944:	e158      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2258      	movs	r2, #88	@ 0x58
 800594a:	5a9b      	ldrh	r3, [r3, r2]
 800594c:	187a      	adds	r2, r7, r1
 800594e:	8812      	ldrh	r2, [r2, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d300      	bcc.n	8005956 <HAL_UART_IRQHandler+0x30a>
 8005954:	e150      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	187a      	adds	r2, r7, r1
 800595a:	215a      	movs	r1, #90	@ 0x5a
 800595c:	8812      	ldrh	r2, [r2, #0]
 800595e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2220      	movs	r2, #32
 800596a:	4013      	ands	r3, r2
 800596c:	d16f      	bne.n	8005a4e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596e:	f3ef 8310 	mrs	r3, PRIMASK
 8005972:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005976:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005978:	2301      	movs	r3, #1
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597e:	f383 8810 	msr	PRIMASK, r3
}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	499e      	ldr	r1, [pc, #632]	@ (8005c08 <HAL_UART_IRQHandler+0x5bc>)
 8005990:	400a      	ands	r2, r1
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005996:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	f383 8810 	msr	PRIMASK, r3
}
 800599e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a0:	f3ef 8310 	mrs	r3, PRIMASK
 80059a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80059a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80059aa:	2301      	movs	r3, #1
 80059ac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b0:	f383 8810 	msr	PRIMASK, r3
}
 80059b4:	46c0      	nop			@ (mov r8, r8)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2101      	movs	r1, #1
 80059c2:	438a      	bics	r2, r1
 80059c4:	609a      	str	r2, [r3, #8]
 80059c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059c8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059cc:	f383 8810 	msr	PRIMASK, r3
}
 80059d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d2:	f3ef 8310 	mrs	r3, PRIMASK
 80059d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80059d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059da:	673b      	str	r3, [r7, #112]	@ 0x70
 80059dc:	2301      	movs	r3, #1
 80059de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059e2:	f383 8810 	msr	PRIMASK, r3
}
 80059e6:	46c0      	nop			@ (mov r8, r8)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2140      	movs	r1, #64	@ 0x40
 80059f4:	438a      	bics	r2, r1
 80059f6:	609a      	str	r2, [r3, #8]
 80059f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059fa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059fe:	f383 8810 	msr	PRIMASK, r3
}
 8005a02:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2280      	movs	r2, #128	@ 0x80
 8005a08:	2120      	movs	r1, #32
 8005a0a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a12:	f3ef 8310 	mrs	r3, PRIMASK
 8005a16:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a22:	f383 8810 	msr	PRIMASK, r3
}
 8005a26:	46c0      	nop			@ (mov r8, r8)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2110      	movs	r1, #16
 8005a34:	438a      	bics	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a3e:	f383 8810 	msr	PRIMASK, r3
}
 8005a42:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f7fb ff35 	bl	80018b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2258      	movs	r2, #88	@ 0x58
 8005a58:	5a9a      	ldrh	r2, [r3, r2]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	215a      	movs	r1, #90	@ 0x5a
 8005a5e:	5a5b      	ldrh	r3, [r3, r1]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	0011      	movs	r1, r2
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f000 f8e0 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a70:	e0c2      	b.n	8005bf8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2258      	movs	r2, #88	@ 0x58
 8005a76:	5a99      	ldrh	r1, [r3, r2]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	225a      	movs	r2, #90	@ 0x5a
 8005a7c:	5a9b      	ldrh	r3, [r3, r2]
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	208e      	movs	r0, #142	@ 0x8e
 8005a82:	183b      	adds	r3, r7, r0
 8005a84:	1a8a      	subs	r2, r1, r2
 8005a86:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	225a      	movs	r2, #90	@ 0x5a
 8005a8c:	5a9b      	ldrh	r3, [r3, r2]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d100      	bne.n	8005a96 <HAL_UART_IRQHandler+0x44a>
 8005a94:	e0b2      	b.n	8005bfc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005a96:	183b      	adds	r3, r7, r0
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d100      	bne.n	8005aa0 <HAL_UART_IRQHandler+0x454>
 8005a9e:	e0ad      	b.n	8005bfc <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa8:	2488      	movs	r4, #136	@ 0x88
 8005aaa:	193a      	adds	r2, r7, r4
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	2301      	movs	r3, #1
 8005ab0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f383 8810 	msr	PRIMASK, r3
}
 8005ab8:	46c0      	nop			@ (mov r8, r8)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4951      	ldr	r1, [pc, #324]	@ (8005c0c <HAL_UART_IRQHandler+0x5c0>)
 8005ac6:	400a      	ands	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	193b      	adds	r3, r7, r4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f383 8810 	msr	PRIMASK, r3
}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8005adc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ade:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae0:	2484      	movs	r4, #132	@ 0x84
 8005ae2:	193a      	adds	r2, r7, r4
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f383 8810 	msr	PRIMASK, r3
}
 8005af0:	46c0      	nop			@ (mov r8, r8)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2101      	movs	r1, #1
 8005afe:	438a      	bics	r2, r1
 8005b00:	609a      	str	r2, [r3, #8]
 8005b02:	193b      	adds	r3, r7, r4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	f383 8810 	msr	PRIMASK, r3
}
 8005b0e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2280      	movs	r2, #128	@ 0x80
 8005b14:	2120      	movs	r1, #32
 8005b16:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b24:	f3ef 8310 	mrs	r3, PRIMASK
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2c:	2480      	movs	r4, #128	@ 0x80
 8005b2e:	193a      	adds	r2, r7, r4
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	2301      	movs	r3, #1
 8005b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b38:	f383 8810 	msr	PRIMASK, r3
}
 8005b3c:	46c0      	nop			@ (mov r8, r8)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2110      	movs	r1, #16
 8005b4a:	438a      	bics	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	193b      	adds	r3, r7, r4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b56:	f383 8810 	msr	PRIMASK, r3
}
 8005b5a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b62:	183b      	adds	r3, r7, r0
 8005b64:	881a      	ldrh	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	0011      	movs	r1, r2
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f000 f860 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b70:	e044      	b.n	8005bfc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b72:	23a4      	movs	r3, #164	@ 0xa4
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	035b      	lsls	r3, r3, #13
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d010      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x556>
 8005b80:	239c      	movs	r3, #156	@ 0x9c
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	2380      	movs	r3, #128	@ 0x80
 8005b88:	03db      	lsls	r3, r3, #15
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2280      	movs	r2, #128	@ 0x80
 8005b94:	0352      	lsls	r2, r2, #13
 8005b96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f000 fd5e 	bl	800665c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ba0:	e02f      	b.n	8005c02 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ba2:	23a4      	movs	r3, #164	@ 0xa4
 8005ba4:	18fb      	adds	r3, r7, r3
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2280      	movs	r2, #128	@ 0x80
 8005baa:	4013      	ands	r3, r2
 8005bac:	d00f      	beq.n	8005bce <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bae:	23a0      	movs	r3, #160	@ 0xa0
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2280      	movs	r2, #128	@ 0x80
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01e      	beq.n	8005c00 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	0010      	movs	r0, r2
 8005bca:	4798      	blx	r3
    }
    return;
 8005bcc:	e018      	b.n	8005c00 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bce:	23a4      	movs	r3, #164	@ 0xa4
 8005bd0:	18fb      	adds	r3, r7, r3
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2240      	movs	r2, #64	@ 0x40
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <HAL_UART_IRQHandler+0x5b6>
 8005bda:	23a0      	movs	r3, #160	@ 0xa0
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2240      	movs	r2, #64	@ 0x40
 8005be2:	4013      	ands	r3, r2
 8005be4:	d00d      	beq.n	8005c02 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	0018      	movs	r0, r3
 8005bea:	f000 fd0c 	bl	8006606 <UART_EndTransmit_IT>
    return;
 8005bee:	e008      	b.n	8005c02 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005bf0:	46c0      	nop			@ (mov r8, r8)
 8005bf2:	e006      	b.n	8005c02 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005bf4:	46c0      	nop			@ (mov r8, r8)
 8005bf6:	e004      	b.n	8005c02 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005bf8:	46c0      	nop			@ (mov r8, r8)
 8005bfa:	e002      	b.n	8005c02 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005bfc:	46c0      	nop			@ (mov r8, r8)
 8005bfe:	e000      	b.n	8005c02 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005c00:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b02b      	add	sp, #172	@ 0xac
 8005c06:	bd90      	pop	{r4, r7, pc}
 8005c08:	fffffeff 	.word	0xfffffeff
 8005c0c:	fffffedf 	.word	0xfffffedf

08005c10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c18:	46c0      	nop			@ (mov r8, r8)
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b002      	add	sp, #8
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c28:	46c0      	nop			@ (mov r8, r8)
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	b002      	add	sp, #8
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	000a      	movs	r2, r1
 8005c3a:	1cbb      	adds	r3, r7, #2
 8005c3c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c3e:	46c0      	nop			@ (mov r8, r8)
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b002      	add	sp, #8
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c48:	b5b0      	push	{r4, r5, r7, lr}
 8005c4a:	b08e      	sub	sp, #56	@ 0x38
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c50:	231a      	movs	r3, #26
 8005c52:	2218      	movs	r2, #24
 8005c54:	189b      	adds	r3, r3, r2
 8005c56:	19db      	adds	r3, r3, r7
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4ac3      	ldr	r2, [pc, #780]	@ (8005f88 <UART_SetConfig+0x340>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	0019      	movs	r1, r3
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c86:	430a      	orrs	r2, r1
 8005c88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4abe      	ldr	r2, [pc, #760]	@ (8005f8c <UART_SetConfig+0x344>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	0019      	movs	r1, r3
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4ab8      	ldr	r2, [pc, #736]	@ (8005f90 <UART_SetConfig+0x348>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4ab4      	ldr	r2, [pc, #720]	@ (8005f94 <UART_SetConfig+0x34c>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4ab0      	ldr	r2, [pc, #704]	@ (8005f98 <UART_SetConfig+0x350>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d131      	bne.n	8005d40 <UART_SetConfig+0xf8>
 8005cdc:	4baf      	ldr	r3, [pc, #700]	@ (8005f9c <UART_SetConfig+0x354>)
 8005cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce0:	2203      	movs	r2, #3
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d01d      	beq.n	8005d24 <UART_SetConfig+0xdc>
 8005ce8:	d823      	bhi.n	8005d32 <UART_SetConfig+0xea>
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d00c      	beq.n	8005d08 <UART_SetConfig+0xc0>
 8005cee:	d820      	bhi.n	8005d32 <UART_SetConfig+0xea>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <UART_SetConfig+0xb2>
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d00e      	beq.n	8005d16 <UART_SetConfig+0xce>
 8005cf8:	e01b      	b.n	8005d32 <UART_SetConfig+0xea>
 8005cfa:	231b      	movs	r3, #27
 8005cfc:	2218      	movs	r2, #24
 8005cfe:	189b      	adds	r3, r3, r2
 8005d00:	19db      	adds	r3, r3, r7
 8005d02:	2201      	movs	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	e0b4      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005d08:	231b      	movs	r3, #27
 8005d0a:	2218      	movs	r2, #24
 8005d0c:	189b      	adds	r3, r3, r2
 8005d0e:	19db      	adds	r3, r3, r7
 8005d10:	2202      	movs	r2, #2
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	e0ad      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005d16:	231b      	movs	r3, #27
 8005d18:	2218      	movs	r2, #24
 8005d1a:	189b      	adds	r3, r3, r2
 8005d1c:	19db      	adds	r3, r3, r7
 8005d1e:	2204      	movs	r2, #4
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e0a6      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005d24:	231b      	movs	r3, #27
 8005d26:	2218      	movs	r2, #24
 8005d28:	189b      	adds	r3, r3, r2
 8005d2a:	19db      	adds	r3, r3, r7
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	e09f      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005d32:	231b      	movs	r3, #27
 8005d34:	2218      	movs	r2, #24
 8005d36:	189b      	adds	r3, r3, r2
 8005d38:	19db      	adds	r3, r3, r7
 8005d3a:	2210      	movs	r2, #16
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	e098      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a96      	ldr	r2, [pc, #600]	@ (8005fa0 <UART_SetConfig+0x358>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d131      	bne.n	8005dae <UART_SetConfig+0x166>
 8005d4a:	4b94      	ldr	r3, [pc, #592]	@ (8005f9c <UART_SetConfig+0x354>)
 8005d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d4e:	220c      	movs	r2, #12
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b0c      	cmp	r3, #12
 8005d54:	d01d      	beq.n	8005d92 <UART_SetConfig+0x14a>
 8005d56:	d823      	bhi.n	8005da0 <UART_SetConfig+0x158>
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d00c      	beq.n	8005d76 <UART_SetConfig+0x12e>
 8005d5c:	d820      	bhi.n	8005da0 <UART_SetConfig+0x158>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <UART_SetConfig+0x120>
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d00e      	beq.n	8005d84 <UART_SetConfig+0x13c>
 8005d66:	e01b      	b.n	8005da0 <UART_SetConfig+0x158>
 8005d68:	231b      	movs	r3, #27
 8005d6a:	2218      	movs	r2, #24
 8005d6c:	189b      	adds	r3, r3, r2
 8005d6e:	19db      	adds	r3, r3, r7
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e07d      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005d76:	231b      	movs	r3, #27
 8005d78:	2218      	movs	r2, #24
 8005d7a:	189b      	adds	r3, r3, r2
 8005d7c:	19db      	adds	r3, r3, r7
 8005d7e:	2202      	movs	r2, #2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	e076      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005d84:	231b      	movs	r3, #27
 8005d86:	2218      	movs	r2, #24
 8005d88:	189b      	adds	r3, r3, r2
 8005d8a:	19db      	adds	r3, r3, r7
 8005d8c:	2204      	movs	r2, #4
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e06f      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005d92:	231b      	movs	r3, #27
 8005d94:	2218      	movs	r2, #24
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	19db      	adds	r3, r3, r7
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e068      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005da0:	231b      	movs	r3, #27
 8005da2:	2218      	movs	r2, #24
 8005da4:	189b      	adds	r3, r3, r2
 8005da6:	19db      	adds	r3, r3, r7
 8005da8:	2210      	movs	r2, #16
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e061      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a7c      	ldr	r2, [pc, #496]	@ (8005fa4 <UART_SetConfig+0x35c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d106      	bne.n	8005dc6 <UART_SetConfig+0x17e>
 8005db8:	231b      	movs	r3, #27
 8005dba:	2218      	movs	r2, #24
 8005dbc:	189b      	adds	r3, r3, r2
 8005dbe:	19db      	adds	r3, r3, r7
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	e055      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a77      	ldr	r2, [pc, #476]	@ (8005fa8 <UART_SetConfig+0x360>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d106      	bne.n	8005dde <UART_SetConfig+0x196>
 8005dd0:	231b      	movs	r3, #27
 8005dd2:	2218      	movs	r2, #24
 8005dd4:	189b      	adds	r3, r3, r2
 8005dd6:	19db      	adds	r3, r3, r7
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	e049      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6b      	ldr	r2, [pc, #428]	@ (8005f90 <UART_SetConfig+0x348>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d13e      	bne.n	8005e66 <UART_SetConfig+0x21e>
 8005de8:	4b6c      	ldr	r3, [pc, #432]	@ (8005f9c <UART_SetConfig+0x354>)
 8005dea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005dec:	23c0      	movs	r3, #192	@ 0xc0
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	4013      	ands	r3, r2
 8005df2:	22c0      	movs	r2, #192	@ 0xc0
 8005df4:	0112      	lsls	r2, r2, #4
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d027      	beq.n	8005e4a <UART_SetConfig+0x202>
 8005dfa:	22c0      	movs	r2, #192	@ 0xc0
 8005dfc:	0112      	lsls	r2, r2, #4
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d82a      	bhi.n	8005e58 <UART_SetConfig+0x210>
 8005e02:	2280      	movs	r2, #128	@ 0x80
 8005e04:	0112      	lsls	r2, r2, #4
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d011      	beq.n	8005e2e <UART_SetConfig+0x1e6>
 8005e0a:	2280      	movs	r2, #128	@ 0x80
 8005e0c:	0112      	lsls	r2, r2, #4
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d822      	bhi.n	8005e58 <UART_SetConfig+0x210>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <UART_SetConfig+0x1d8>
 8005e16:	2280      	movs	r2, #128	@ 0x80
 8005e18:	00d2      	lsls	r2, r2, #3
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00e      	beq.n	8005e3c <UART_SetConfig+0x1f4>
 8005e1e:	e01b      	b.n	8005e58 <UART_SetConfig+0x210>
 8005e20:	231b      	movs	r3, #27
 8005e22:	2218      	movs	r2, #24
 8005e24:	189b      	adds	r3, r3, r2
 8005e26:	19db      	adds	r3, r3, r7
 8005e28:	2200      	movs	r2, #0
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	e021      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005e2e:	231b      	movs	r3, #27
 8005e30:	2218      	movs	r2, #24
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	19db      	adds	r3, r3, r7
 8005e36:	2202      	movs	r2, #2
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	e01a      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005e3c:	231b      	movs	r3, #27
 8005e3e:	2218      	movs	r2, #24
 8005e40:	189b      	adds	r3, r3, r2
 8005e42:	19db      	adds	r3, r3, r7
 8005e44:	2204      	movs	r2, #4
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	e013      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005e4a:	231b      	movs	r3, #27
 8005e4c:	2218      	movs	r2, #24
 8005e4e:	189b      	adds	r3, r3, r2
 8005e50:	19db      	adds	r3, r3, r7
 8005e52:	2208      	movs	r2, #8
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	e00c      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005e58:	231b      	movs	r3, #27
 8005e5a:	2218      	movs	r2, #24
 8005e5c:	189b      	adds	r3, r3, r2
 8005e5e:	19db      	adds	r3, r3, r7
 8005e60:	2210      	movs	r2, #16
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e005      	b.n	8005e72 <UART_SetConfig+0x22a>
 8005e66:	231b      	movs	r3, #27
 8005e68:	2218      	movs	r2, #24
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	19db      	adds	r3, r3, r7
 8005e6e:	2210      	movs	r2, #16
 8005e70:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a46      	ldr	r2, [pc, #280]	@ (8005f90 <UART_SetConfig+0x348>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d000      	beq.n	8005e7e <UART_SetConfig+0x236>
 8005e7c:	e09a      	b.n	8005fb4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e7e:	231b      	movs	r3, #27
 8005e80:	2218      	movs	r2, #24
 8005e82:	189b      	adds	r3, r3, r2
 8005e84:	19db      	adds	r3, r3, r7
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d01d      	beq.n	8005ec8 <UART_SetConfig+0x280>
 8005e8c:	dc20      	bgt.n	8005ed0 <UART_SetConfig+0x288>
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d015      	beq.n	8005ebe <UART_SetConfig+0x276>
 8005e92:	dc1d      	bgt.n	8005ed0 <UART_SetConfig+0x288>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <UART_SetConfig+0x256>
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d005      	beq.n	8005ea8 <UART_SetConfig+0x260>
 8005e9c:	e018      	b.n	8005ed0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e9e:	f7fe f905 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8005ea2:	0003      	movs	r3, r0
 8005ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ea6:	e01c      	b.n	8005ee2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8005f9c <UART_SetConfig+0x354>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2210      	movs	r2, #16
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d002      	beq.n	8005eb8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fac <UART_SetConfig+0x364>)
 8005eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005eb6:	e014      	b.n	8005ee2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8005fb0 <UART_SetConfig+0x368>)
 8005eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ebc:	e011      	b.n	8005ee2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ebe:	f7fe f845 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ec6:	e00c      	b.n	8005ee2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ece:	e008      	b.n	8005ee2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005ed4:	231a      	movs	r3, #26
 8005ed6:	2218      	movs	r2, #24
 8005ed8:	189b      	adds	r3, r3, r2
 8005eda:	19db      	adds	r3, r3, r7
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
        break;
 8005ee0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d100      	bne.n	8005eea <UART_SetConfig+0x2a2>
 8005ee8:	e133      	b.n	8006152 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	0013      	movs	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	189b      	adds	r3, r3, r2
 8005ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d305      	bcc.n	8005f06 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d906      	bls.n	8005f14 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005f06:	231a      	movs	r3, #26
 8005f08:	2218      	movs	r2, #24
 8005f0a:	189b      	adds	r3, r3, r2
 8005f0c:	19db      	adds	r3, r3, r7
 8005f0e:	2201      	movs	r2, #1
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e11e      	b.n	8006152 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	6939      	ldr	r1, [r7, #16]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	000b      	movs	r3, r1
 8005f22:	0e1b      	lsrs	r3, r3, #24
 8005f24:	0010      	movs	r0, r2
 8005f26:	0205      	lsls	r5, r0, #8
 8005f28:	431d      	orrs	r5, r3
 8005f2a:	000b      	movs	r3, r1
 8005f2c:	021c      	lsls	r4, r3, #8
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	085b      	lsrs	r3, r3, #1
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	68b8      	ldr	r0, [r7, #8]
 8005f3c:	68f9      	ldr	r1, [r7, #12]
 8005f3e:	1900      	adds	r0, r0, r4
 8005f40:	4169      	adcs	r1, r5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	607b      	str	r3, [r7, #4]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f7fa fa5a 	bl	8000408 <__aeabi_uldivmod>
 8005f54:	0002      	movs	r2, r0
 8005f56:	000b      	movs	r3, r1
 8005f58:	0013      	movs	r3, r2
 8005f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f5e:	23c0      	movs	r3, #192	@ 0xc0
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d309      	bcc.n	8005f7a <UART_SetConfig+0x332>
 8005f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f68:	2380      	movs	r3, #128	@ 0x80
 8005f6a:	035b      	lsls	r3, r3, #13
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d204      	bcs.n	8005f7a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f76:	60da      	str	r2, [r3, #12]
 8005f78:	e0eb      	b.n	8006152 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005f7a:	231a      	movs	r3, #26
 8005f7c:	2218      	movs	r2, #24
 8005f7e:	189b      	adds	r3, r3, r2
 8005f80:	19db      	adds	r3, r3, r7
 8005f82:	2201      	movs	r2, #1
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	e0e4      	b.n	8006152 <UART_SetConfig+0x50a>
 8005f88:	efff69f3 	.word	0xefff69f3
 8005f8c:	ffffcfff 	.word	0xffffcfff
 8005f90:	40004800 	.word	0x40004800
 8005f94:	fffff4ff 	.word	0xfffff4ff
 8005f98:	40013800 	.word	0x40013800
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40004400 	.word	0x40004400
 8005fa4:	40004c00 	.word	0x40004c00
 8005fa8:	40005000 	.word	0x40005000
 8005fac:	003d0900 	.word	0x003d0900
 8005fb0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	2380      	movs	r3, #128	@ 0x80
 8005fba:	021b      	lsls	r3, r3, #8
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d000      	beq.n	8005fc2 <UART_SetConfig+0x37a>
 8005fc0:	e070      	b.n	80060a4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8005fc2:	231b      	movs	r3, #27
 8005fc4:	2218      	movs	r2, #24
 8005fc6:	189b      	adds	r3, r3, r2
 8005fc8:	19db      	adds	r3, r3, r7
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d822      	bhi.n	8006016 <UART_SetConfig+0x3ce>
 8005fd0:	009a      	lsls	r2, r3, #2
 8005fd2:	4b67      	ldr	r3, [pc, #412]	@ (8006170 <UART_SetConfig+0x528>)
 8005fd4:	18d3      	adds	r3, r2, r3
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fda:	f7fe f867 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8005fde:	0003      	movs	r3, r0
 8005fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005fe2:	e021      	b.n	8006028 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe4:	f7fe f878 	bl	80040d8 <HAL_RCC_GetPCLK2Freq>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005fec:	e01c      	b.n	8006028 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fee:	4b61      	ldr	r3, [pc, #388]	@ (8006174 <UART_SetConfig+0x52c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2210      	movs	r2, #16
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	d002      	beq.n	8005ffe <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005ff8:	4b5f      	ldr	r3, [pc, #380]	@ (8006178 <UART_SetConfig+0x530>)
 8005ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ffc:	e014      	b.n	8006028 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800617c <UART_SetConfig+0x534>)
 8006000:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006002:	e011      	b.n	8006028 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006004:	f7fd ffa2 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8006008:	0003      	movs	r3, r0
 800600a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800600c:	e00c      	b.n	8006028 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600e:	2380      	movs	r3, #128	@ 0x80
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006014:	e008      	b.n	8006028 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800601a:	231a      	movs	r3, #26
 800601c:	2218      	movs	r2, #24
 800601e:	189b      	adds	r3, r3, r2
 8006020:	19db      	adds	r3, r3, r7
 8006022:	2201      	movs	r2, #1
 8006024:	701a      	strb	r2, [r3, #0]
        break;
 8006026:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d100      	bne.n	8006030 <UART_SetConfig+0x3e8>
 800602e:	e090      	b.n	8006152 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006032:	005a      	lsls	r2, r3, #1
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	18d2      	adds	r2, r2, r3
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	0019      	movs	r1, r3
 8006042:	0010      	movs	r0, r2
 8006044:	f7fa f86a 	bl	800011c <__udivsi3>
 8006048:	0003      	movs	r3, r0
 800604a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	2b0f      	cmp	r3, #15
 8006050:	d921      	bls.n	8006096 <UART_SetConfig+0x44e>
 8006052:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006054:	2380      	movs	r3, #128	@ 0x80
 8006056:	025b      	lsls	r3, r3, #9
 8006058:	429a      	cmp	r2, r3
 800605a:	d21c      	bcs.n	8006096 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	b29a      	uxth	r2, r3
 8006060:	200e      	movs	r0, #14
 8006062:	2418      	movs	r4, #24
 8006064:	1903      	adds	r3, r0, r4
 8006066:	19db      	adds	r3, r3, r7
 8006068:	210f      	movs	r1, #15
 800606a:	438a      	bics	r2, r1
 800606c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	085b      	lsrs	r3, r3, #1
 8006072:	b29b      	uxth	r3, r3
 8006074:	2207      	movs	r2, #7
 8006076:	4013      	ands	r3, r2
 8006078:	b299      	uxth	r1, r3
 800607a:	1903      	adds	r3, r0, r4
 800607c:	19db      	adds	r3, r3, r7
 800607e:	1902      	adds	r2, r0, r4
 8006080:	19d2      	adds	r2, r2, r7
 8006082:	8812      	ldrh	r2, [r2, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	1902      	adds	r2, r0, r4
 800608e:	19d2      	adds	r2, r2, r7
 8006090:	8812      	ldrh	r2, [r2, #0]
 8006092:	60da      	str	r2, [r3, #12]
 8006094:	e05d      	b.n	8006152 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006096:	231a      	movs	r3, #26
 8006098:	2218      	movs	r2, #24
 800609a:	189b      	adds	r3, r3, r2
 800609c:	19db      	adds	r3, r3, r7
 800609e:	2201      	movs	r2, #1
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e056      	b.n	8006152 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060a4:	231b      	movs	r3, #27
 80060a6:	2218      	movs	r2, #24
 80060a8:	189b      	adds	r3, r3, r2
 80060aa:	19db      	adds	r3, r3, r7
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d822      	bhi.n	80060f8 <UART_SetConfig+0x4b0>
 80060b2:	009a      	lsls	r2, r3, #2
 80060b4:	4b32      	ldr	r3, [pc, #200]	@ (8006180 <UART_SetConfig+0x538>)
 80060b6:	18d3      	adds	r3, r2, r3
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7fd fff6 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 80060c0:	0003      	movs	r3, r0
 80060c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80060c4:	e021      	b.n	800610a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c6:	f7fe f807 	bl	80040d8 <HAL_RCC_GetPCLK2Freq>
 80060ca:	0003      	movs	r3, r0
 80060cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80060ce:	e01c      	b.n	800610a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060d0:	4b28      	ldr	r3, [pc, #160]	@ (8006174 <UART_SetConfig+0x52c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2210      	movs	r2, #16
 80060d6:	4013      	ands	r3, r2
 80060d8:	d002      	beq.n	80060e0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80060da:	4b27      	ldr	r3, [pc, #156]	@ (8006178 <UART_SetConfig+0x530>)
 80060dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060de:	e014      	b.n	800610a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80060e0:	4b26      	ldr	r3, [pc, #152]	@ (800617c <UART_SetConfig+0x534>)
 80060e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80060e4:	e011      	b.n	800610a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e6:	f7fd ff31 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 80060ea:	0003      	movs	r3, r0
 80060ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80060ee:	e00c      	b.n	800610a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f0:	2380      	movs	r3, #128	@ 0x80
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80060f6:	e008      	b.n	800610a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80060fc:	231a      	movs	r3, #26
 80060fe:	2218      	movs	r2, #24
 8006100:	189b      	adds	r3, r3, r2
 8006102:	19db      	adds	r3, r3, r7
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
        break;
 8006108:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800610a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	085a      	lsrs	r2, r3, #1
 8006116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006118:	18d2      	adds	r2, r2, r3
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	0019      	movs	r1, r3
 8006120:	0010      	movs	r0, r2
 8006122:	f7f9 fffb 	bl	800011c <__udivsi3>
 8006126:	0003      	movs	r3, r0
 8006128:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800612a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612c:	2b0f      	cmp	r3, #15
 800612e:	d90a      	bls.n	8006146 <UART_SetConfig+0x4fe>
 8006130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006132:	2380      	movs	r3, #128	@ 0x80
 8006134:	025b      	lsls	r3, r3, #9
 8006136:	429a      	cmp	r2, r3
 8006138:	d205      	bcs.n	8006146 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613c:	b29a      	uxth	r2, r3
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60da      	str	r2, [r3, #12]
 8006144:	e005      	b.n	8006152 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006146:	231a      	movs	r3, #26
 8006148:	2218      	movs	r2, #24
 800614a:	189b      	adds	r3, r3, r2
 800614c:	19db      	adds	r3, r3, r7
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2200      	movs	r2, #0
 8006156:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2200      	movs	r2, #0
 800615c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800615e:	231a      	movs	r3, #26
 8006160:	2218      	movs	r2, #24
 8006162:	189b      	adds	r3, r3, r2
 8006164:	19db      	adds	r3, r3, r7
 8006166:	781b      	ldrb	r3, [r3, #0]
}
 8006168:	0018      	movs	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	b00e      	add	sp, #56	@ 0x38
 800616e:	bdb0      	pop	{r4, r5, r7, pc}
 8006170:	0800758c 	.word	0x0800758c
 8006174:	40021000 	.word	0x40021000
 8006178:	003d0900 	.word	0x003d0900
 800617c:	00f42400 	.word	0x00f42400
 8006180:	080075b0 	.word	0x080075b0

08006184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	2201      	movs	r2, #1
 8006192:	4013      	ands	r3, r2
 8006194:	d00b      	beq.n	80061ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4a4a      	ldr	r2, [pc, #296]	@ (80062c8 <UART_AdvFeatureConfig+0x144>)
 800619e:	4013      	ands	r3, r2
 80061a0:	0019      	movs	r1, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	2202      	movs	r2, #2
 80061b4:	4013      	ands	r3, r2
 80061b6:	d00b      	beq.n	80061d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	4a43      	ldr	r2, [pc, #268]	@ (80062cc <UART_AdvFeatureConfig+0x148>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	0019      	movs	r1, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	2204      	movs	r2, #4
 80061d6:	4013      	ands	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	4a3b      	ldr	r2, [pc, #236]	@ (80062d0 <UART_AdvFeatureConfig+0x14c>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	0019      	movs	r1, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	2208      	movs	r2, #8
 80061f8:	4013      	ands	r3, r2
 80061fa:	d00b      	beq.n	8006214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4a34      	ldr	r2, [pc, #208]	@ (80062d4 <UART_AdvFeatureConfig+0x150>)
 8006204:	4013      	ands	r3, r2
 8006206:	0019      	movs	r1, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	2210      	movs	r2, #16
 800621a:	4013      	ands	r3, r2
 800621c:	d00b      	beq.n	8006236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	4a2c      	ldr	r2, [pc, #176]	@ (80062d8 <UART_AdvFeatureConfig+0x154>)
 8006226:	4013      	ands	r3, r2
 8006228:	0019      	movs	r1, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	2220      	movs	r2, #32
 800623c:	4013      	ands	r3, r2
 800623e:	d00b      	beq.n	8006258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	4a25      	ldr	r2, [pc, #148]	@ (80062dc <UART_AdvFeatureConfig+0x158>)
 8006248:	4013      	ands	r3, r2
 800624a:	0019      	movs	r1, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	2240      	movs	r2, #64	@ 0x40
 800625e:	4013      	ands	r3, r2
 8006260:	d01d      	beq.n	800629e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4a1d      	ldr	r2, [pc, #116]	@ (80062e0 <UART_AdvFeatureConfig+0x15c>)
 800626a:	4013      	ands	r3, r2
 800626c:	0019      	movs	r1, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800627e:	2380      	movs	r3, #128	@ 0x80
 8006280:	035b      	lsls	r3, r3, #13
 8006282:	429a      	cmp	r2, r3
 8006284:	d10b      	bne.n	800629e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4a15      	ldr	r2, [pc, #84]	@ (80062e4 <UART_AdvFeatureConfig+0x160>)
 800628e:	4013      	ands	r3, r2
 8006290:	0019      	movs	r1, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	2280      	movs	r2, #128	@ 0x80
 80062a4:	4013      	ands	r3, r2
 80062a6:	d00b      	beq.n	80062c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	4a0e      	ldr	r2, [pc, #56]	@ (80062e8 <UART_AdvFeatureConfig+0x164>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	0019      	movs	r1, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	605a      	str	r2, [r3, #4]
  }
}
 80062c0:	46c0      	nop			@ (mov r8, r8)
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b002      	add	sp, #8
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	fffdffff 	.word	0xfffdffff
 80062cc:	fffeffff 	.word	0xfffeffff
 80062d0:	fffbffff 	.word	0xfffbffff
 80062d4:	ffff7fff 	.word	0xffff7fff
 80062d8:	ffffefff 	.word	0xffffefff
 80062dc:	ffffdfff 	.word	0xffffdfff
 80062e0:	ffefffff 	.word	0xffefffff
 80062e4:	ff9fffff 	.word	0xff9fffff
 80062e8:	fff7ffff 	.word	0xfff7ffff

080062ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b092      	sub	sp, #72	@ 0x48
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2284      	movs	r2, #132	@ 0x84
 80062f8:	2100      	movs	r1, #0
 80062fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062fc:	f7fb f9d0 	bl	80016a0 <HAL_GetTick>
 8006300:	0003      	movs	r3, r0
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2208      	movs	r2, #8
 800630c:	4013      	ands	r3, r2
 800630e:	2b08      	cmp	r3, #8
 8006310:	d12c      	bne.n	800636c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006314:	2280      	movs	r2, #128	@ 0x80
 8006316:	0391      	lsls	r1, r2, #14
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4a46      	ldr	r2, [pc, #280]	@ (8006434 <UART_CheckIdleState+0x148>)
 800631c:	9200      	str	r2, [sp, #0]
 800631e:	2200      	movs	r2, #0
 8006320:	f000 f88c 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 8006324:	1e03      	subs	r3, r0, #0
 8006326:	d021      	beq.n	800636c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006328:	f3ef 8310 	mrs	r3, PRIMASK
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006330:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006332:	2301      	movs	r3, #1
 8006334:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	f383 8810 	msr	PRIMASK, r3
}
 800633c:	46c0      	nop			@ (mov r8, r8)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2180      	movs	r1, #128	@ 0x80
 800634a:	438a      	bics	r2, r1
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006354:	f383 8810 	msr	PRIMASK, r3
}
 8006358:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2278      	movs	r2, #120	@ 0x78
 8006364:	2100      	movs	r1, #0
 8006366:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e05f      	b.n	800642c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2204      	movs	r2, #4
 8006374:	4013      	ands	r3, r2
 8006376:	2b04      	cmp	r3, #4
 8006378:	d146      	bne.n	8006408 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800637a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800637c:	2280      	movs	r2, #128	@ 0x80
 800637e:	03d1      	lsls	r1, r2, #15
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4a2c      	ldr	r2, [pc, #176]	@ (8006434 <UART_CheckIdleState+0x148>)
 8006384:	9200      	str	r2, [sp, #0]
 8006386:	2200      	movs	r2, #0
 8006388:	f000 f858 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 800638c:	1e03      	subs	r3, r0, #0
 800638e:	d03b      	beq.n	8006408 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006390:	f3ef 8310 	mrs	r3, PRIMASK
 8006394:	60fb      	str	r3, [r7, #12]
  return(result);
 8006396:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006398:	637b      	str	r3, [r7, #52]	@ 0x34
 800639a:	2301      	movs	r3, #1
 800639c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f383 8810 	msr	PRIMASK, r3
}
 80063a4:	46c0      	nop			@ (mov r8, r8)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4921      	ldr	r1, [pc, #132]	@ (8006438 <UART_CheckIdleState+0x14c>)
 80063b2:	400a      	ands	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f383 8810 	msr	PRIMASK, r3
}
 80063c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c2:	f3ef 8310 	mrs	r3, PRIMASK
 80063c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80063c8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80063cc:	2301      	movs	r3, #1
 80063ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f383 8810 	msr	PRIMASK, r3
}
 80063d6:	46c0      	nop			@ (mov r8, r8)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2101      	movs	r1, #1
 80063e4:	438a      	bics	r2, r1
 80063e6:	609a      	str	r2, [r3, #8]
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	f383 8810 	msr	PRIMASK, r3
}
 80063f2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2280      	movs	r2, #128	@ 0x80
 80063f8:	2120      	movs	r1, #32
 80063fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2278      	movs	r2, #120	@ 0x78
 8006400:	2100      	movs	r1, #0
 8006402:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e011      	b.n	800642c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2280      	movs	r2, #128	@ 0x80
 8006412:	2120      	movs	r1, #32
 8006414:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2278      	movs	r2, #120	@ 0x78
 8006426:	2100      	movs	r1, #0
 8006428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	0018      	movs	r0, r3
 800642e:	46bd      	mov	sp, r7
 8006430:	b010      	add	sp, #64	@ 0x40
 8006432:	bd80      	pop	{r7, pc}
 8006434:	01ffffff 	.word	0x01ffffff
 8006438:	fffffedf 	.word	0xfffffedf

0800643c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	1dfb      	adds	r3, r7, #7
 800644a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644c:	e04b      	b.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	3301      	adds	r3, #1
 8006452:	d048      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006454:	f7fb f924 	bl	80016a0 <HAL_GetTick>
 8006458:	0002      	movs	r2, r0
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e04b      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2204      	movs	r2, #4
 8006476:	4013      	ands	r3, r2
 8006478:	d035      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	2208      	movs	r2, #8
 8006482:	4013      	ands	r3, r2
 8006484:	2b08      	cmp	r3, #8
 8006486:	d111      	bne.n	80064ac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2208      	movs	r2, #8
 800648e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	0018      	movs	r0, r3
 8006494:	f000 f83c 	bl	8006510 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2284      	movs	r2, #132	@ 0x84
 800649c:	2108      	movs	r1, #8
 800649e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2278      	movs	r2, #120	@ 0x78
 80064a4:	2100      	movs	r1, #0
 80064a6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e02c      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69da      	ldr	r2, [r3, #28]
 80064b2:	2380      	movs	r3, #128	@ 0x80
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	401a      	ands	r2, r3
 80064b8:	2380      	movs	r3, #128	@ 0x80
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	429a      	cmp	r2, r3
 80064be:	d112      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2280      	movs	r2, #128	@ 0x80
 80064c6:	0112      	lsls	r2, r2, #4
 80064c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	0018      	movs	r0, r3
 80064ce:	f000 f81f 	bl	8006510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2284      	movs	r2, #132	@ 0x84
 80064d6:	2120      	movs	r1, #32
 80064d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2278      	movs	r2, #120	@ 0x78
 80064de:	2100      	movs	r1, #0
 80064e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e00f      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	4013      	ands	r3, r2
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	425a      	negs	r2, r3
 80064f6:	4153      	adcs	r3, r2
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	001a      	movs	r2, r3
 80064fc:	1dfb      	adds	r3, r7, #7
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d0a4      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	0018      	movs	r0, r3
 8006508:	46bd      	mov	sp, r7
 800650a:	b004      	add	sp, #16
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08e      	sub	sp, #56	@ 0x38
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006518:	f3ef 8310 	mrs	r3, PRIMASK
 800651c:	617b      	str	r3, [r7, #20]
  return(result);
 800651e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006520:	637b      	str	r3, [r7, #52]	@ 0x34
 8006522:	2301      	movs	r3, #1
 8006524:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	f383 8810 	msr	PRIMASK, r3
}
 800652c:	46c0      	nop			@ (mov r8, r8)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4926      	ldr	r1, [pc, #152]	@ (80065d4 <UART_EndRxTransfer+0xc4>)
 800653a:	400a      	ands	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006540:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654a:	f3ef 8310 	mrs	r3, PRIMASK
 800654e:	623b      	str	r3, [r7, #32]
  return(result);
 8006550:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	633b      	str	r3, [r7, #48]	@ 0x30
 8006554:	2301      	movs	r3, #1
 8006556:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	f383 8810 	msr	PRIMASK, r3
}
 800655e:	46c0      	nop			@ (mov r8, r8)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2101      	movs	r1, #1
 800656c:	438a      	bics	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006572:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006580:	2b01      	cmp	r3, #1
 8006582:	d118      	bne.n	80065b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006584:	f3ef 8310 	mrs	r3, PRIMASK
 8006588:	60bb      	str	r3, [r7, #8]
  return(result);
 800658a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800658e:	2301      	movs	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f383 8810 	msr	PRIMASK, r3
}
 8006598:	46c0      	nop			@ (mov r8, r8)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2110      	movs	r1, #16
 80065a6:	438a      	bics	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f383 8810 	msr	PRIMASK, r3
}
 80065b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2280      	movs	r2, #128	@ 0x80
 80065ba:	2120      	movs	r1, #32
 80065bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065ca:	46c0      	nop			@ (mov r8, r8)
 80065cc:	46bd      	mov	sp, r7
 80065ce:	b00e      	add	sp, #56	@ 0x38
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	46c0      	nop			@ (mov r8, r8)
 80065d4:	fffffedf 	.word	0xfffffedf

080065d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	225a      	movs	r2, #90	@ 0x5a
 80065ea:	2100      	movs	r1, #0
 80065ec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2252      	movs	r2, #82	@ 0x52
 80065f2:	2100      	movs	r1, #0
 80065f4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f7ff fb11 	bl	8005c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065fe:	46c0      	nop			@ (mov r8, r8)
 8006600:	46bd      	mov	sp, r7
 8006602:	b004      	add	sp, #16
 8006604:	bd80      	pop	{r7, pc}

08006606 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b086      	sub	sp, #24
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800660e:	f3ef 8310 	mrs	r3, PRIMASK
 8006612:	60bb      	str	r3, [r7, #8]
  return(result);
 8006614:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	2301      	movs	r3, #1
 800661a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f383 8810 	msr	PRIMASK, r3
}
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2140      	movs	r1, #64	@ 0x40
 8006630:	438a      	bics	r2, r1
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f383 8810 	msr	PRIMASK, r3
}
 800663e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	0018      	movs	r0, r3
 8006650:	f7ff fade 	bl	8005c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006654:	46c0      	nop			@ (mov r8, r8)
 8006656:	46bd      	mov	sp, r7
 8006658:	b006      	add	sp, #24
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006664:	46c0      	nop			@ (mov r8, r8)
 8006666:	46bd      	mov	sp, r7
 8006668:	b002      	add	sp, #8
 800666a:	bd80      	pop	{r7, pc}

0800666c <std>:
 800666c:	2300      	movs	r3, #0
 800666e:	b510      	push	{r4, lr}
 8006670:	0004      	movs	r4, r0
 8006672:	6003      	str	r3, [r0, #0]
 8006674:	6043      	str	r3, [r0, #4]
 8006676:	6083      	str	r3, [r0, #8]
 8006678:	8181      	strh	r1, [r0, #12]
 800667a:	6643      	str	r3, [r0, #100]	@ 0x64
 800667c:	81c2      	strh	r2, [r0, #14]
 800667e:	6103      	str	r3, [r0, #16]
 8006680:	6143      	str	r3, [r0, #20]
 8006682:	6183      	str	r3, [r0, #24]
 8006684:	0019      	movs	r1, r3
 8006686:	2208      	movs	r2, #8
 8006688:	305c      	adds	r0, #92	@ 0x5c
 800668a:	f000 f8c3 	bl	8006814 <memset>
 800668e:	4b0b      	ldr	r3, [pc, #44]	@ (80066bc <std+0x50>)
 8006690:	6224      	str	r4, [r4, #32]
 8006692:	6263      	str	r3, [r4, #36]	@ 0x24
 8006694:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <std+0x54>)
 8006696:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006698:	4b0a      	ldr	r3, [pc, #40]	@ (80066c4 <std+0x58>)
 800669a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800669c:	4b0a      	ldr	r3, [pc, #40]	@ (80066c8 <std+0x5c>)
 800669e:	6323      	str	r3, [r4, #48]	@ 0x30
 80066a0:	4b0a      	ldr	r3, [pc, #40]	@ (80066cc <std+0x60>)
 80066a2:	429c      	cmp	r4, r3
 80066a4:	d005      	beq.n	80066b2 <std+0x46>
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <std+0x64>)
 80066a8:	429c      	cmp	r4, r3
 80066aa:	d002      	beq.n	80066b2 <std+0x46>
 80066ac:	4b09      	ldr	r3, [pc, #36]	@ (80066d4 <std+0x68>)
 80066ae:	429c      	cmp	r4, r3
 80066b0:	d103      	bne.n	80066ba <std+0x4e>
 80066b2:	0020      	movs	r0, r4
 80066b4:	3058      	adds	r0, #88	@ 0x58
 80066b6:	f000 f8df 	bl	8006878 <__retarget_lock_init_recursive>
 80066ba:	bd10      	pop	{r4, pc}
 80066bc:	080070c9 	.word	0x080070c9
 80066c0:	080070f1 	.word	0x080070f1
 80066c4:	08007129 	.word	0x08007129
 80066c8:	08007155 	.word	0x08007155
 80066cc:	20000278 	.word	0x20000278
 80066d0:	200002e0 	.word	0x200002e0
 80066d4:	20000348 	.word	0x20000348

080066d8 <stdio_exit_handler>:
 80066d8:	b510      	push	{r4, lr}
 80066da:	4a03      	ldr	r2, [pc, #12]	@ (80066e8 <stdio_exit_handler+0x10>)
 80066dc:	4903      	ldr	r1, [pc, #12]	@ (80066ec <stdio_exit_handler+0x14>)
 80066de:	4804      	ldr	r0, [pc, #16]	@ (80066f0 <stdio_exit_handler+0x18>)
 80066e0:	f000 f86c 	bl	80067bc <_fwalk_sglue>
 80066e4:	bd10      	pop	{r4, pc}
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	2000000c 	.word	0x2000000c
 80066ec:	08007051 	.word	0x08007051
 80066f0:	2000001c 	.word	0x2000001c

080066f4 <cleanup_stdio>:
 80066f4:	6841      	ldr	r1, [r0, #4]
 80066f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006724 <cleanup_stdio+0x30>)
 80066f8:	b510      	push	{r4, lr}
 80066fa:	0004      	movs	r4, r0
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d001      	beq.n	8006704 <cleanup_stdio+0x10>
 8006700:	f000 fca6 	bl	8007050 <_fflush_r>
 8006704:	68a1      	ldr	r1, [r4, #8]
 8006706:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <cleanup_stdio+0x34>)
 8006708:	4299      	cmp	r1, r3
 800670a:	d002      	beq.n	8006712 <cleanup_stdio+0x1e>
 800670c:	0020      	movs	r0, r4
 800670e:	f000 fc9f 	bl	8007050 <_fflush_r>
 8006712:	68e1      	ldr	r1, [r4, #12]
 8006714:	4b05      	ldr	r3, [pc, #20]	@ (800672c <cleanup_stdio+0x38>)
 8006716:	4299      	cmp	r1, r3
 8006718:	d002      	beq.n	8006720 <cleanup_stdio+0x2c>
 800671a:	0020      	movs	r0, r4
 800671c:	f000 fc98 	bl	8007050 <_fflush_r>
 8006720:	bd10      	pop	{r4, pc}
 8006722:	46c0      	nop			@ (mov r8, r8)
 8006724:	20000278 	.word	0x20000278
 8006728:	200002e0 	.word	0x200002e0
 800672c:	20000348 	.word	0x20000348

08006730 <global_stdio_init.part.0>:
 8006730:	b510      	push	{r4, lr}
 8006732:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <global_stdio_init.part.0+0x28>)
 8006734:	4a09      	ldr	r2, [pc, #36]	@ (800675c <global_stdio_init.part.0+0x2c>)
 8006736:	2104      	movs	r1, #4
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	4809      	ldr	r0, [pc, #36]	@ (8006760 <global_stdio_init.part.0+0x30>)
 800673c:	2200      	movs	r2, #0
 800673e:	f7ff ff95 	bl	800666c <std>
 8006742:	2201      	movs	r2, #1
 8006744:	2109      	movs	r1, #9
 8006746:	4807      	ldr	r0, [pc, #28]	@ (8006764 <global_stdio_init.part.0+0x34>)
 8006748:	f7ff ff90 	bl	800666c <std>
 800674c:	2202      	movs	r2, #2
 800674e:	2112      	movs	r1, #18
 8006750:	4805      	ldr	r0, [pc, #20]	@ (8006768 <global_stdio_init.part.0+0x38>)
 8006752:	f7ff ff8b 	bl	800666c <std>
 8006756:	bd10      	pop	{r4, pc}
 8006758:	200003b0 	.word	0x200003b0
 800675c:	080066d9 	.word	0x080066d9
 8006760:	20000278 	.word	0x20000278
 8006764:	200002e0 	.word	0x200002e0
 8006768:	20000348 	.word	0x20000348

0800676c <__sfp_lock_acquire>:
 800676c:	b510      	push	{r4, lr}
 800676e:	4802      	ldr	r0, [pc, #8]	@ (8006778 <__sfp_lock_acquire+0xc>)
 8006770:	f000 f883 	bl	800687a <__retarget_lock_acquire_recursive>
 8006774:	bd10      	pop	{r4, pc}
 8006776:	46c0      	nop			@ (mov r8, r8)
 8006778:	200003b5 	.word	0x200003b5

0800677c <__sfp_lock_release>:
 800677c:	b510      	push	{r4, lr}
 800677e:	4802      	ldr	r0, [pc, #8]	@ (8006788 <__sfp_lock_release+0xc>)
 8006780:	f000 f87c 	bl	800687c <__retarget_lock_release_recursive>
 8006784:	bd10      	pop	{r4, pc}
 8006786:	46c0      	nop			@ (mov r8, r8)
 8006788:	200003b5 	.word	0x200003b5

0800678c <__sinit>:
 800678c:	b510      	push	{r4, lr}
 800678e:	0004      	movs	r4, r0
 8006790:	f7ff ffec 	bl	800676c <__sfp_lock_acquire>
 8006794:	6a23      	ldr	r3, [r4, #32]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <__sinit+0x14>
 800679a:	f7ff ffef 	bl	800677c <__sfp_lock_release>
 800679e:	bd10      	pop	{r4, pc}
 80067a0:	4b04      	ldr	r3, [pc, #16]	@ (80067b4 <__sinit+0x28>)
 80067a2:	6223      	str	r3, [r4, #32]
 80067a4:	4b04      	ldr	r3, [pc, #16]	@ (80067b8 <__sinit+0x2c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1f6      	bne.n	800679a <__sinit+0xe>
 80067ac:	f7ff ffc0 	bl	8006730 <global_stdio_init.part.0>
 80067b0:	e7f3      	b.n	800679a <__sinit+0xe>
 80067b2:	46c0      	nop			@ (mov r8, r8)
 80067b4:	080066f5 	.word	0x080066f5
 80067b8:	200003b0 	.word	0x200003b0

080067bc <_fwalk_sglue>:
 80067bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067be:	0014      	movs	r4, r2
 80067c0:	2600      	movs	r6, #0
 80067c2:	9000      	str	r0, [sp, #0]
 80067c4:	9101      	str	r1, [sp, #4]
 80067c6:	68a5      	ldr	r5, [r4, #8]
 80067c8:	6867      	ldr	r7, [r4, #4]
 80067ca:	3f01      	subs	r7, #1
 80067cc:	d504      	bpl.n	80067d8 <_fwalk_sglue+0x1c>
 80067ce:	6824      	ldr	r4, [r4, #0]
 80067d0:	2c00      	cmp	r4, #0
 80067d2:	d1f8      	bne.n	80067c6 <_fwalk_sglue+0xa>
 80067d4:	0030      	movs	r0, r6
 80067d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067d8:	89ab      	ldrh	r3, [r5, #12]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d908      	bls.n	80067f0 <_fwalk_sglue+0x34>
 80067de:	220e      	movs	r2, #14
 80067e0:	5eab      	ldrsh	r3, [r5, r2]
 80067e2:	3301      	adds	r3, #1
 80067e4:	d004      	beq.n	80067f0 <_fwalk_sglue+0x34>
 80067e6:	0029      	movs	r1, r5
 80067e8:	9800      	ldr	r0, [sp, #0]
 80067ea:	9b01      	ldr	r3, [sp, #4]
 80067ec:	4798      	blx	r3
 80067ee:	4306      	orrs	r6, r0
 80067f0:	3568      	adds	r5, #104	@ 0x68
 80067f2:	e7ea      	b.n	80067ca <_fwalk_sglue+0xe>

080067f4 <iprintf>:
 80067f4:	b40f      	push	{r0, r1, r2, r3}
 80067f6:	b507      	push	{r0, r1, r2, lr}
 80067f8:	4905      	ldr	r1, [pc, #20]	@ (8006810 <iprintf+0x1c>)
 80067fa:	ab04      	add	r3, sp, #16
 80067fc:	6808      	ldr	r0, [r1, #0]
 80067fe:	cb04      	ldmia	r3!, {r2}
 8006800:	6881      	ldr	r1, [r0, #8]
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	f000 f862 	bl	80068cc <_vfiprintf_r>
 8006808:	b003      	add	sp, #12
 800680a:	bc08      	pop	{r3}
 800680c:	b004      	add	sp, #16
 800680e:	4718      	bx	r3
 8006810:	20000018 	.word	0x20000018

08006814 <memset>:
 8006814:	0003      	movs	r3, r0
 8006816:	1882      	adds	r2, r0, r2
 8006818:	4293      	cmp	r3, r2
 800681a:	d100      	bne.n	800681e <memset+0xa>
 800681c:	4770      	bx	lr
 800681e:	7019      	strb	r1, [r3, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	e7f9      	b.n	8006818 <memset+0x4>

08006824 <__errno>:
 8006824:	4b01      	ldr	r3, [pc, #4]	@ (800682c <__errno+0x8>)
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	4770      	bx	lr
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	20000018 	.word	0x20000018

08006830 <__libc_init_array>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	2600      	movs	r6, #0
 8006834:	4c0c      	ldr	r4, [pc, #48]	@ (8006868 <__libc_init_array+0x38>)
 8006836:	4d0d      	ldr	r5, [pc, #52]	@ (800686c <__libc_init_array+0x3c>)
 8006838:	1b64      	subs	r4, r4, r5
 800683a:	10a4      	asrs	r4, r4, #2
 800683c:	42a6      	cmp	r6, r4
 800683e:	d109      	bne.n	8006854 <__libc_init_array+0x24>
 8006840:	2600      	movs	r6, #0
 8006842:	f000 fe73 	bl	800752c <_init>
 8006846:	4c0a      	ldr	r4, [pc, #40]	@ (8006870 <__libc_init_array+0x40>)
 8006848:	4d0a      	ldr	r5, [pc, #40]	@ (8006874 <__libc_init_array+0x44>)
 800684a:	1b64      	subs	r4, r4, r5
 800684c:	10a4      	asrs	r4, r4, #2
 800684e:	42a6      	cmp	r6, r4
 8006850:	d105      	bne.n	800685e <__libc_init_array+0x2e>
 8006852:	bd70      	pop	{r4, r5, r6, pc}
 8006854:	00b3      	lsls	r3, r6, #2
 8006856:	58eb      	ldr	r3, [r5, r3]
 8006858:	4798      	blx	r3
 800685a:	3601      	adds	r6, #1
 800685c:	e7ee      	b.n	800683c <__libc_init_array+0xc>
 800685e:	00b3      	lsls	r3, r6, #2
 8006860:	58eb      	ldr	r3, [r5, r3]
 8006862:	4798      	blx	r3
 8006864:	3601      	adds	r6, #1
 8006866:	e7f2      	b.n	800684e <__libc_init_array+0x1e>
 8006868:	08007610 	.word	0x08007610
 800686c:	08007610 	.word	0x08007610
 8006870:	08007614 	.word	0x08007614
 8006874:	08007610 	.word	0x08007610

08006878 <__retarget_lock_init_recursive>:
 8006878:	4770      	bx	lr

0800687a <__retarget_lock_acquire_recursive>:
 800687a:	4770      	bx	lr

0800687c <__retarget_lock_release_recursive>:
 800687c:	4770      	bx	lr

0800687e <__sfputc_r>:
 800687e:	6893      	ldr	r3, [r2, #8]
 8006880:	b510      	push	{r4, lr}
 8006882:	3b01      	subs	r3, #1
 8006884:	6093      	str	r3, [r2, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	da04      	bge.n	8006894 <__sfputc_r+0x16>
 800688a:	6994      	ldr	r4, [r2, #24]
 800688c:	42a3      	cmp	r3, r4
 800688e:	db07      	blt.n	80068a0 <__sfputc_r+0x22>
 8006890:	290a      	cmp	r1, #10
 8006892:	d005      	beq.n	80068a0 <__sfputc_r+0x22>
 8006894:	6813      	ldr	r3, [r2, #0]
 8006896:	1c58      	adds	r0, r3, #1
 8006898:	6010      	str	r0, [r2, #0]
 800689a:	7019      	strb	r1, [r3, #0]
 800689c:	0008      	movs	r0, r1
 800689e:	bd10      	pop	{r4, pc}
 80068a0:	f000 fc5e 	bl	8007160 <__swbuf_r>
 80068a4:	0001      	movs	r1, r0
 80068a6:	e7f9      	b.n	800689c <__sfputc_r+0x1e>

080068a8 <__sfputs_r>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	0006      	movs	r6, r0
 80068ac:	000f      	movs	r7, r1
 80068ae:	0014      	movs	r4, r2
 80068b0:	18d5      	adds	r5, r2, r3
 80068b2:	42ac      	cmp	r4, r5
 80068b4:	d101      	bne.n	80068ba <__sfputs_r+0x12>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e007      	b.n	80068ca <__sfputs_r+0x22>
 80068ba:	7821      	ldrb	r1, [r4, #0]
 80068bc:	003a      	movs	r2, r7
 80068be:	0030      	movs	r0, r6
 80068c0:	f7ff ffdd 	bl	800687e <__sfputc_r>
 80068c4:	3401      	adds	r4, #1
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d1f3      	bne.n	80068b2 <__sfputs_r+0xa>
 80068ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068cc <_vfiprintf_r>:
 80068cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ce:	b0a1      	sub	sp, #132	@ 0x84
 80068d0:	000f      	movs	r7, r1
 80068d2:	0015      	movs	r5, r2
 80068d4:	001e      	movs	r6, r3
 80068d6:	9003      	str	r0, [sp, #12]
 80068d8:	2800      	cmp	r0, #0
 80068da:	d004      	beq.n	80068e6 <_vfiprintf_r+0x1a>
 80068dc:	6a03      	ldr	r3, [r0, #32]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <_vfiprintf_r+0x1a>
 80068e2:	f7ff ff53 	bl	800678c <__sinit>
 80068e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068e8:	07db      	lsls	r3, r3, #31
 80068ea:	d405      	bmi.n	80068f8 <_vfiprintf_r+0x2c>
 80068ec:	89bb      	ldrh	r3, [r7, #12]
 80068ee:	059b      	lsls	r3, r3, #22
 80068f0:	d402      	bmi.n	80068f8 <_vfiprintf_r+0x2c>
 80068f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80068f4:	f7ff ffc1 	bl	800687a <__retarget_lock_acquire_recursive>
 80068f8:	89bb      	ldrh	r3, [r7, #12]
 80068fa:	071b      	lsls	r3, r3, #28
 80068fc:	d502      	bpl.n	8006904 <_vfiprintf_r+0x38>
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d113      	bne.n	800692c <_vfiprintf_r+0x60>
 8006904:	0039      	movs	r1, r7
 8006906:	9803      	ldr	r0, [sp, #12]
 8006908:	f000 fc6c 	bl	80071e4 <__swsetup_r>
 800690c:	2800      	cmp	r0, #0
 800690e:	d00d      	beq.n	800692c <_vfiprintf_r+0x60>
 8006910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006912:	07db      	lsls	r3, r3, #31
 8006914:	d503      	bpl.n	800691e <_vfiprintf_r+0x52>
 8006916:	2001      	movs	r0, #1
 8006918:	4240      	negs	r0, r0
 800691a:	b021      	add	sp, #132	@ 0x84
 800691c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800691e:	89bb      	ldrh	r3, [r7, #12]
 8006920:	059b      	lsls	r3, r3, #22
 8006922:	d4f8      	bmi.n	8006916 <_vfiprintf_r+0x4a>
 8006924:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006926:	f7ff ffa9 	bl	800687c <__retarget_lock_release_recursive>
 800692a:	e7f4      	b.n	8006916 <_vfiprintf_r+0x4a>
 800692c:	2300      	movs	r3, #0
 800692e:	ac08      	add	r4, sp, #32
 8006930:	6163      	str	r3, [r4, #20]
 8006932:	3320      	adds	r3, #32
 8006934:	7663      	strb	r3, [r4, #25]
 8006936:	3310      	adds	r3, #16
 8006938:	76a3      	strb	r3, [r4, #26]
 800693a:	9607      	str	r6, [sp, #28]
 800693c:	002e      	movs	r6, r5
 800693e:	7833      	ldrb	r3, [r6, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <_vfiprintf_r+0x7c>
 8006944:	2b25      	cmp	r3, #37	@ 0x25
 8006946:	d148      	bne.n	80069da <_vfiprintf_r+0x10e>
 8006948:	1b73      	subs	r3, r6, r5
 800694a:	9305      	str	r3, [sp, #20]
 800694c:	42ae      	cmp	r6, r5
 800694e:	d00b      	beq.n	8006968 <_vfiprintf_r+0x9c>
 8006950:	002a      	movs	r2, r5
 8006952:	0039      	movs	r1, r7
 8006954:	9803      	ldr	r0, [sp, #12]
 8006956:	f7ff ffa7 	bl	80068a8 <__sfputs_r>
 800695a:	3001      	adds	r0, #1
 800695c:	d100      	bne.n	8006960 <_vfiprintf_r+0x94>
 800695e:	e0ae      	b.n	8006abe <_vfiprintf_r+0x1f2>
 8006960:	6963      	ldr	r3, [r4, #20]
 8006962:	9a05      	ldr	r2, [sp, #20]
 8006964:	189b      	adds	r3, r3, r2
 8006966:	6163      	str	r3, [r4, #20]
 8006968:	7833      	ldrb	r3, [r6, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d100      	bne.n	8006970 <_vfiprintf_r+0xa4>
 800696e:	e0a6      	b.n	8006abe <_vfiprintf_r+0x1f2>
 8006970:	2201      	movs	r2, #1
 8006972:	2300      	movs	r3, #0
 8006974:	4252      	negs	r2, r2
 8006976:	6062      	str	r2, [r4, #4]
 8006978:	a904      	add	r1, sp, #16
 800697a:	3254      	adds	r2, #84	@ 0x54
 800697c:	1852      	adds	r2, r2, r1
 800697e:	1c75      	adds	r5, r6, #1
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	60e3      	str	r3, [r4, #12]
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	7013      	strb	r3, [r2, #0]
 8006988:	65a3      	str	r3, [r4, #88]	@ 0x58
 800698a:	4b59      	ldr	r3, [pc, #356]	@ (8006af0 <_vfiprintf_r+0x224>)
 800698c:	2205      	movs	r2, #5
 800698e:	0018      	movs	r0, r3
 8006990:	7829      	ldrb	r1, [r5, #0]
 8006992:	9305      	str	r3, [sp, #20]
 8006994:	f000 fd74 	bl	8007480 <memchr>
 8006998:	1c6e      	adds	r6, r5, #1
 800699a:	2800      	cmp	r0, #0
 800699c:	d11f      	bne.n	80069de <_vfiprintf_r+0x112>
 800699e:	6822      	ldr	r2, [r4, #0]
 80069a0:	06d3      	lsls	r3, r2, #27
 80069a2:	d504      	bpl.n	80069ae <_vfiprintf_r+0xe2>
 80069a4:	2353      	movs	r3, #83	@ 0x53
 80069a6:	a904      	add	r1, sp, #16
 80069a8:	185b      	adds	r3, r3, r1
 80069aa:	2120      	movs	r1, #32
 80069ac:	7019      	strb	r1, [r3, #0]
 80069ae:	0713      	lsls	r3, r2, #28
 80069b0:	d504      	bpl.n	80069bc <_vfiprintf_r+0xf0>
 80069b2:	2353      	movs	r3, #83	@ 0x53
 80069b4:	a904      	add	r1, sp, #16
 80069b6:	185b      	adds	r3, r3, r1
 80069b8:	212b      	movs	r1, #43	@ 0x2b
 80069ba:	7019      	strb	r1, [r3, #0]
 80069bc:	782b      	ldrb	r3, [r5, #0]
 80069be:	2b2a      	cmp	r3, #42	@ 0x2a
 80069c0:	d016      	beq.n	80069f0 <_vfiprintf_r+0x124>
 80069c2:	002e      	movs	r6, r5
 80069c4:	2100      	movs	r1, #0
 80069c6:	200a      	movs	r0, #10
 80069c8:	68e3      	ldr	r3, [r4, #12]
 80069ca:	7832      	ldrb	r2, [r6, #0]
 80069cc:	1c75      	adds	r5, r6, #1
 80069ce:	3a30      	subs	r2, #48	@ 0x30
 80069d0:	2a09      	cmp	r2, #9
 80069d2:	d950      	bls.n	8006a76 <_vfiprintf_r+0x1aa>
 80069d4:	2900      	cmp	r1, #0
 80069d6:	d111      	bne.n	80069fc <_vfiprintf_r+0x130>
 80069d8:	e017      	b.n	8006a0a <_vfiprintf_r+0x13e>
 80069da:	3601      	adds	r6, #1
 80069dc:	e7af      	b.n	800693e <_vfiprintf_r+0x72>
 80069de:	9b05      	ldr	r3, [sp, #20]
 80069e0:	6822      	ldr	r2, [r4, #0]
 80069e2:	1ac0      	subs	r0, r0, r3
 80069e4:	2301      	movs	r3, #1
 80069e6:	4083      	lsls	r3, r0
 80069e8:	4313      	orrs	r3, r2
 80069ea:	0035      	movs	r5, r6
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	e7cc      	b.n	800698a <_vfiprintf_r+0xbe>
 80069f0:	9b07      	ldr	r3, [sp, #28]
 80069f2:	1d19      	adds	r1, r3, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	9107      	str	r1, [sp, #28]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	db01      	blt.n	8006a00 <_vfiprintf_r+0x134>
 80069fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069fe:	e004      	b.n	8006a0a <_vfiprintf_r+0x13e>
 8006a00:	425b      	negs	r3, r3
 8006a02:	60e3      	str	r3, [r4, #12]
 8006a04:	2302      	movs	r3, #2
 8006a06:	4313      	orrs	r3, r2
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	7833      	ldrb	r3, [r6, #0]
 8006a0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a0e:	d10c      	bne.n	8006a2a <_vfiprintf_r+0x15e>
 8006a10:	7873      	ldrb	r3, [r6, #1]
 8006a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a14:	d134      	bne.n	8006a80 <_vfiprintf_r+0x1b4>
 8006a16:	9b07      	ldr	r3, [sp, #28]
 8006a18:	3602      	adds	r6, #2
 8006a1a:	1d1a      	adds	r2, r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	9207      	str	r2, [sp, #28]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	da01      	bge.n	8006a28 <_vfiprintf_r+0x15c>
 8006a24:	2301      	movs	r3, #1
 8006a26:	425b      	negs	r3, r3
 8006a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a2a:	4d32      	ldr	r5, [pc, #200]	@ (8006af4 <_vfiprintf_r+0x228>)
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	0028      	movs	r0, r5
 8006a30:	7831      	ldrb	r1, [r6, #0]
 8006a32:	f000 fd25 	bl	8007480 <memchr>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d006      	beq.n	8006a48 <_vfiprintf_r+0x17c>
 8006a3a:	2340      	movs	r3, #64	@ 0x40
 8006a3c:	1b40      	subs	r0, r0, r5
 8006a3e:	4083      	lsls	r3, r0
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	3601      	adds	r6, #1
 8006a44:	4313      	orrs	r3, r2
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	7831      	ldrb	r1, [r6, #0]
 8006a4a:	2206      	movs	r2, #6
 8006a4c:	482a      	ldr	r0, [pc, #168]	@ (8006af8 <_vfiprintf_r+0x22c>)
 8006a4e:	1c75      	adds	r5, r6, #1
 8006a50:	7621      	strb	r1, [r4, #24]
 8006a52:	f000 fd15 	bl	8007480 <memchr>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d040      	beq.n	8006adc <_vfiprintf_r+0x210>
 8006a5a:	4b28      	ldr	r3, [pc, #160]	@ (8006afc <_vfiprintf_r+0x230>)
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d122      	bne.n	8006aa6 <_vfiprintf_r+0x1da>
 8006a60:	2207      	movs	r2, #7
 8006a62:	9b07      	ldr	r3, [sp, #28]
 8006a64:	3307      	adds	r3, #7
 8006a66:	4393      	bics	r3, r2
 8006a68:	3308      	adds	r3, #8
 8006a6a:	9307      	str	r3, [sp, #28]
 8006a6c:	6963      	ldr	r3, [r4, #20]
 8006a6e:	9a04      	ldr	r2, [sp, #16]
 8006a70:	189b      	adds	r3, r3, r2
 8006a72:	6163      	str	r3, [r4, #20]
 8006a74:	e762      	b.n	800693c <_vfiprintf_r+0x70>
 8006a76:	4343      	muls	r3, r0
 8006a78:	002e      	movs	r6, r5
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	189b      	adds	r3, r3, r2
 8006a7e:	e7a4      	b.n	80069ca <_vfiprintf_r+0xfe>
 8006a80:	2300      	movs	r3, #0
 8006a82:	200a      	movs	r0, #10
 8006a84:	0019      	movs	r1, r3
 8006a86:	3601      	adds	r6, #1
 8006a88:	6063      	str	r3, [r4, #4]
 8006a8a:	7832      	ldrb	r2, [r6, #0]
 8006a8c:	1c75      	adds	r5, r6, #1
 8006a8e:	3a30      	subs	r2, #48	@ 0x30
 8006a90:	2a09      	cmp	r2, #9
 8006a92:	d903      	bls.n	8006a9c <_vfiprintf_r+0x1d0>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0c8      	beq.n	8006a2a <_vfiprintf_r+0x15e>
 8006a98:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a9a:	e7c6      	b.n	8006a2a <_vfiprintf_r+0x15e>
 8006a9c:	4341      	muls	r1, r0
 8006a9e:	002e      	movs	r6, r5
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	1889      	adds	r1, r1, r2
 8006aa4:	e7f1      	b.n	8006a8a <_vfiprintf_r+0x1be>
 8006aa6:	aa07      	add	r2, sp, #28
 8006aa8:	9200      	str	r2, [sp, #0]
 8006aaa:	0021      	movs	r1, r4
 8006aac:	003a      	movs	r2, r7
 8006aae:	4b14      	ldr	r3, [pc, #80]	@ (8006b00 <_vfiprintf_r+0x234>)
 8006ab0:	9803      	ldr	r0, [sp, #12]
 8006ab2:	e000      	b.n	8006ab6 <_vfiprintf_r+0x1ea>
 8006ab4:	bf00      	nop
 8006ab6:	9004      	str	r0, [sp, #16]
 8006ab8:	9b04      	ldr	r3, [sp, #16]
 8006aba:	3301      	adds	r3, #1
 8006abc:	d1d6      	bne.n	8006a6c <_vfiprintf_r+0x1a0>
 8006abe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ac0:	07db      	lsls	r3, r3, #31
 8006ac2:	d405      	bmi.n	8006ad0 <_vfiprintf_r+0x204>
 8006ac4:	89bb      	ldrh	r3, [r7, #12]
 8006ac6:	059b      	lsls	r3, r3, #22
 8006ac8:	d402      	bmi.n	8006ad0 <_vfiprintf_r+0x204>
 8006aca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006acc:	f7ff fed6 	bl	800687c <__retarget_lock_release_recursive>
 8006ad0:	89bb      	ldrh	r3, [r7, #12]
 8006ad2:	065b      	lsls	r3, r3, #25
 8006ad4:	d500      	bpl.n	8006ad8 <_vfiprintf_r+0x20c>
 8006ad6:	e71e      	b.n	8006916 <_vfiprintf_r+0x4a>
 8006ad8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006ada:	e71e      	b.n	800691a <_vfiprintf_r+0x4e>
 8006adc:	aa07      	add	r2, sp, #28
 8006ade:	9200      	str	r2, [sp, #0]
 8006ae0:	0021      	movs	r1, r4
 8006ae2:	003a      	movs	r2, r7
 8006ae4:	4b06      	ldr	r3, [pc, #24]	@ (8006b00 <_vfiprintf_r+0x234>)
 8006ae6:	9803      	ldr	r0, [sp, #12]
 8006ae8:	f000 f91e 	bl	8006d28 <_printf_i>
 8006aec:	e7e3      	b.n	8006ab6 <_vfiprintf_r+0x1ea>
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	080075d4 	.word	0x080075d4
 8006af4:	080075da 	.word	0x080075da
 8006af8:	080075de 	.word	0x080075de
 8006afc:	00000000 	.word	0x00000000
 8006b00:	080068a9 	.word	0x080068a9

08006b04 <sbrk_aligned>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	4e0f      	ldr	r6, [pc, #60]	@ (8006b44 <sbrk_aligned+0x40>)
 8006b08:	000d      	movs	r5, r1
 8006b0a:	6831      	ldr	r1, [r6, #0]
 8006b0c:	0004      	movs	r4, r0
 8006b0e:	2900      	cmp	r1, #0
 8006b10:	d102      	bne.n	8006b18 <sbrk_aligned+0x14>
 8006b12:	f000 fc8f 	bl	8007434 <_sbrk_r>
 8006b16:	6030      	str	r0, [r6, #0]
 8006b18:	0029      	movs	r1, r5
 8006b1a:	0020      	movs	r0, r4
 8006b1c:	f000 fc8a 	bl	8007434 <_sbrk_r>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d103      	bne.n	8006b2c <sbrk_aligned+0x28>
 8006b24:	2501      	movs	r5, #1
 8006b26:	426d      	negs	r5, r5
 8006b28:	0028      	movs	r0, r5
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	1cc5      	adds	r5, r0, #3
 8006b30:	439d      	bics	r5, r3
 8006b32:	42a8      	cmp	r0, r5
 8006b34:	d0f8      	beq.n	8006b28 <sbrk_aligned+0x24>
 8006b36:	1a29      	subs	r1, r5, r0
 8006b38:	0020      	movs	r0, r4
 8006b3a:	f000 fc7b 	bl	8007434 <_sbrk_r>
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d1f2      	bne.n	8006b28 <sbrk_aligned+0x24>
 8006b42:	e7ef      	b.n	8006b24 <sbrk_aligned+0x20>
 8006b44:	200003b8 	.word	0x200003b8

08006b48 <_malloc_r>:
 8006b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	1ccb      	adds	r3, r1, #3
 8006b4e:	4393      	bics	r3, r2
 8006b50:	3308      	adds	r3, #8
 8006b52:	0005      	movs	r5, r0
 8006b54:	001f      	movs	r7, r3
 8006b56:	2b0c      	cmp	r3, #12
 8006b58:	d234      	bcs.n	8006bc4 <_malloc_r+0x7c>
 8006b5a:	270c      	movs	r7, #12
 8006b5c:	42b9      	cmp	r1, r7
 8006b5e:	d833      	bhi.n	8006bc8 <_malloc_r+0x80>
 8006b60:	0028      	movs	r0, r5
 8006b62:	f000 faa1 	bl	80070a8 <__malloc_lock>
 8006b66:	4e37      	ldr	r6, [pc, #220]	@ (8006c44 <_malloc_r+0xfc>)
 8006b68:	6833      	ldr	r3, [r6, #0]
 8006b6a:	001c      	movs	r4, r3
 8006b6c:	2c00      	cmp	r4, #0
 8006b6e:	d12f      	bne.n	8006bd0 <_malloc_r+0x88>
 8006b70:	0039      	movs	r1, r7
 8006b72:	0028      	movs	r0, r5
 8006b74:	f7ff ffc6 	bl	8006b04 <sbrk_aligned>
 8006b78:	0004      	movs	r4, r0
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	d15f      	bne.n	8006c3e <_malloc_r+0xf6>
 8006b7e:	6834      	ldr	r4, [r6, #0]
 8006b80:	9400      	str	r4, [sp, #0]
 8006b82:	9b00      	ldr	r3, [sp, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d14a      	bne.n	8006c1e <_malloc_r+0xd6>
 8006b88:	2c00      	cmp	r4, #0
 8006b8a:	d052      	beq.n	8006c32 <_malloc_r+0xea>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	0028      	movs	r0, r5
 8006b90:	18e3      	adds	r3, r4, r3
 8006b92:	9900      	ldr	r1, [sp, #0]
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	f000 fc4d 	bl	8007434 <_sbrk_r>
 8006b9a:	9b01      	ldr	r3, [sp, #4]
 8006b9c:	4283      	cmp	r3, r0
 8006b9e:	d148      	bne.n	8006c32 <_malloc_r+0xea>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	0028      	movs	r0, r5
 8006ba4:	1aff      	subs	r7, r7, r3
 8006ba6:	0039      	movs	r1, r7
 8006ba8:	f7ff ffac 	bl	8006b04 <sbrk_aligned>
 8006bac:	3001      	adds	r0, #1
 8006bae:	d040      	beq.n	8006c32 <_malloc_r+0xea>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	19db      	adds	r3, r3, r7
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	6833      	ldr	r3, [r6, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	d133      	bne.n	8006c26 <_malloc_r+0xde>
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	6033      	str	r3, [r6, #0]
 8006bc2:	e019      	b.n	8006bf8 <_malloc_r+0xb0>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dac9      	bge.n	8006b5c <_malloc_r+0x14>
 8006bc8:	230c      	movs	r3, #12
 8006bca:	602b      	str	r3, [r5, #0]
 8006bcc:	2000      	movs	r0, #0
 8006bce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bd0:	6821      	ldr	r1, [r4, #0]
 8006bd2:	1bc9      	subs	r1, r1, r7
 8006bd4:	d420      	bmi.n	8006c18 <_malloc_r+0xd0>
 8006bd6:	290b      	cmp	r1, #11
 8006bd8:	d90a      	bls.n	8006bf0 <_malloc_r+0xa8>
 8006bda:	19e2      	adds	r2, r4, r7
 8006bdc:	6027      	str	r7, [r4, #0]
 8006bde:	42a3      	cmp	r3, r4
 8006be0:	d104      	bne.n	8006bec <_malloc_r+0xa4>
 8006be2:	6032      	str	r2, [r6, #0]
 8006be4:	6863      	ldr	r3, [r4, #4]
 8006be6:	6011      	str	r1, [r2, #0]
 8006be8:	6053      	str	r3, [r2, #4]
 8006bea:	e005      	b.n	8006bf8 <_malloc_r+0xb0>
 8006bec:	605a      	str	r2, [r3, #4]
 8006bee:	e7f9      	b.n	8006be4 <_malloc_r+0x9c>
 8006bf0:	6862      	ldr	r2, [r4, #4]
 8006bf2:	42a3      	cmp	r3, r4
 8006bf4:	d10e      	bne.n	8006c14 <_malloc_r+0xcc>
 8006bf6:	6032      	str	r2, [r6, #0]
 8006bf8:	0028      	movs	r0, r5
 8006bfa:	f000 fa5d 	bl	80070b8 <__malloc_unlock>
 8006bfe:	0020      	movs	r0, r4
 8006c00:	2207      	movs	r2, #7
 8006c02:	300b      	adds	r0, #11
 8006c04:	1d23      	adds	r3, r4, #4
 8006c06:	4390      	bics	r0, r2
 8006c08:	1ac2      	subs	r2, r0, r3
 8006c0a:	4298      	cmp	r0, r3
 8006c0c:	d0df      	beq.n	8006bce <_malloc_r+0x86>
 8006c0e:	1a1b      	subs	r3, r3, r0
 8006c10:	50a3      	str	r3, [r4, r2]
 8006c12:	e7dc      	b.n	8006bce <_malloc_r+0x86>
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	e7ef      	b.n	8006bf8 <_malloc_r+0xb0>
 8006c18:	0023      	movs	r3, r4
 8006c1a:	6864      	ldr	r4, [r4, #4]
 8006c1c:	e7a6      	b.n	8006b6c <_malloc_r+0x24>
 8006c1e:	9c00      	ldr	r4, [sp, #0]
 8006c20:	6863      	ldr	r3, [r4, #4]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	e7ad      	b.n	8006b82 <_malloc_r+0x3a>
 8006c26:	001a      	movs	r2, r3
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	42a3      	cmp	r3, r4
 8006c2c:	d1fb      	bne.n	8006c26 <_malloc_r+0xde>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e7da      	b.n	8006be8 <_malloc_r+0xa0>
 8006c32:	230c      	movs	r3, #12
 8006c34:	0028      	movs	r0, r5
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f000 fa3e 	bl	80070b8 <__malloc_unlock>
 8006c3c:	e7c6      	b.n	8006bcc <_malloc_r+0x84>
 8006c3e:	6007      	str	r7, [r0, #0]
 8006c40:	e7da      	b.n	8006bf8 <_malloc_r+0xb0>
 8006c42:	46c0      	nop			@ (mov r8, r8)
 8006c44:	200003bc 	.word	0x200003bc

08006c48 <_printf_common>:
 8006c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c4a:	0016      	movs	r6, r2
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	688a      	ldr	r2, [r1, #8]
 8006c50:	690b      	ldr	r3, [r1, #16]
 8006c52:	000c      	movs	r4, r1
 8006c54:	9000      	str	r0, [sp, #0]
 8006c56:	4293      	cmp	r3, r2
 8006c58:	da00      	bge.n	8006c5c <_printf_common+0x14>
 8006c5a:	0013      	movs	r3, r2
 8006c5c:	0022      	movs	r2, r4
 8006c5e:	6033      	str	r3, [r6, #0]
 8006c60:	3243      	adds	r2, #67	@ 0x43
 8006c62:	7812      	ldrb	r2, [r2, #0]
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	d001      	beq.n	8006c6c <_printf_common+0x24>
 8006c68:	3301      	adds	r3, #1
 8006c6a:	6033      	str	r3, [r6, #0]
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	069b      	lsls	r3, r3, #26
 8006c70:	d502      	bpl.n	8006c78 <_printf_common+0x30>
 8006c72:	6833      	ldr	r3, [r6, #0]
 8006c74:	3302      	adds	r3, #2
 8006c76:	6033      	str	r3, [r6, #0]
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	2306      	movs	r3, #6
 8006c7c:	0015      	movs	r5, r2
 8006c7e:	401d      	ands	r5, r3
 8006c80:	421a      	tst	r2, r3
 8006c82:	d027      	beq.n	8006cd4 <_printf_common+0x8c>
 8006c84:	0023      	movs	r3, r4
 8006c86:	3343      	adds	r3, #67	@ 0x43
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	1e5a      	subs	r2, r3, #1
 8006c8c:	4193      	sbcs	r3, r2
 8006c8e:	6822      	ldr	r2, [r4, #0]
 8006c90:	0692      	lsls	r2, r2, #26
 8006c92:	d430      	bmi.n	8006cf6 <_printf_common+0xae>
 8006c94:	0022      	movs	r2, r4
 8006c96:	9901      	ldr	r1, [sp, #4]
 8006c98:	9800      	ldr	r0, [sp, #0]
 8006c9a:	9d08      	ldr	r5, [sp, #32]
 8006c9c:	3243      	adds	r2, #67	@ 0x43
 8006c9e:	47a8      	blx	r5
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d025      	beq.n	8006cf0 <_printf_common+0xa8>
 8006ca4:	2206      	movs	r2, #6
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	2500      	movs	r5, #0
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d105      	bne.n	8006cbc <_printf_common+0x74>
 8006cb0:	6833      	ldr	r3, [r6, #0]
 8006cb2:	68e5      	ldr	r5, [r4, #12]
 8006cb4:	1aed      	subs	r5, r5, r3
 8006cb6:	43eb      	mvns	r3, r5
 8006cb8:	17db      	asrs	r3, r3, #31
 8006cba:	401d      	ands	r5, r3
 8006cbc:	68a3      	ldr	r3, [r4, #8]
 8006cbe:	6922      	ldr	r2, [r4, #16]
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	dd01      	ble.n	8006cc8 <_printf_common+0x80>
 8006cc4:	1a9b      	subs	r3, r3, r2
 8006cc6:	18ed      	adds	r5, r5, r3
 8006cc8:	2600      	movs	r6, #0
 8006cca:	42b5      	cmp	r5, r6
 8006ccc:	d120      	bne.n	8006d10 <_printf_common+0xc8>
 8006cce:	2000      	movs	r0, #0
 8006cd0:	e010      	b.n	8006cf4 <_printf_common+0xac>
 8006cd2:	3501      	adds	r5, #1
 8006cd4:	68e3      	ldr	r3, [r4, #12]
 8006cd6:	6832      	ldr	r2, [r6, #0]
 8006cd8:	1a9b      	subs	r3, r3, r2
 8006cda:	42ab      	cmp	r3, r5
 8006cdc:	ddd2      	ble.n	8006c84 <_printf_common+0x3c>
 8006cde:	0022      	movs	r2, r4
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	9901      	ldr	r1, [sp, #4]
 8006ce4:	9800      	ldr	r0, [sp, #0]
 8006ce6:	9f08      	ldr	r7, [sp, #32]
 8006ce8:	3219      	adds	r2, #25
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	d1f0      	bne.n	8006cd2 <_printf_common+0x8a>
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	4240      	negs	r0, r0
 8006cf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cf6:	2030      	movs	r0, #48	@ 0x30
 8006cf8:	18e1      	adds	r1, r4, r3
 8006cfa:	3143      	adds	r1, #67	@ 0x43
 8006cfc:	7008      	strb	r0, [r1, #0]
 8006cfe:	0021      	movs	r1, r4
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	3145      	adds	r1, #69	@ 0x45
 8006d04:	7809      	ldrb	r1, [r1, #0]
 8006d06:	18a2      	adds	r2, r4, r2
 8006d08:	3243      	adds	r2, #67	@ 0x43
 8006d0a:	3302      	adds	r3, #2
 8006d0c:	7011      	strb	r1, [r2, #0]
 8006d0e:	e7c1      	b.n	8006c94 <_printf_common+0x4c>
 8006d10:	0022      	movs	r2, r4
 8006d12:	2301      	movs	r3, #1
 8006d14:	9901      	ldr	r1, [sp, #4]
 8006d16:	9800      	ldr	r0, [sp, #0]
 8006d18:	9f08      	ldr	r7, [sp, #32]
 8006d1a:	321a      	adds	r2, #26
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d0e6      	beq.n	8006cf0 <_printf_common+0xa8>
 8006d22:	3601      	adds	r6, #1
 8006d24:	e7d1      	b.n	8006cca <_printf_common+0x82>
	...

08006d28 <_printf_i>:
 8006d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d2a:	b08b      	sub	sp, #44	@ 0x2c
 8006d2c:	9206      	str	r2, [sp, #24]
 8006d2e:	000a      	movs	r2, r1
 8006d30:	3243      	adds	r2, #67	@ 0x43
 8006d32:	9307      	str	r3, [sp, #28]
 8006d34:	9005      	str	r0, [sp, #20]
 8006d36:	9203      	str	r2, [sp, #12]
 8006d38:	7e0a      	ldrb	r2, [r1, #24]
 8006d3a:	000c      	movs	r4, r1
 8006d3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d3e:	2a78      	cmp	r2, #120	@ 0x78
 8006d40:	d809      	bhi.n	8006d56 <_printf_i+0x2e>
 8006d42:	2a62      	cmp	r2, #98	@ 0x62
 8006d44:	d80b      	bhi.n	8006d5e <_printf_i+0x36>
 8006d46:	2a00      	cmp	r2, #0
 8006d48:	d100      	bne.n	8006d4c <_printf_i+0x24>
 8006d4a:	e0bc      	b.n	8006ec6 <_printf_i+0x19e>
 8006d4c:	497b      	ldr	r1, [pc, #492]	@ (8006f3c <_printf_i+0x214>)
 8006d4e:	9104      	str	r1, [sp, #16]
 8006d50:	2a58      	cmp	r2, #88	@ 0x58
 8006d52:	d100      	bne.n	8006d56 <_printf_i+0x2e>
 8006d54:	e090      	b.n	8006e78 <_printf_i+0x150>
 8006d56:	0025      	movs	r5, r4
 8006d58:	3542      	adds	r5, #66	@ 0x42
 8006d5a:	702a      	strb	r2, [r5, #0]
 8006d5c:	e022      	b.n	8006da4 <_printf_i+0x7c>
 8006d5e:	0010      	movs	r0, r2
 8006d60:	3863      	subs	r0, #99	@ 0x63
 8006d62:	2815      	cmp	r0, #21
 8006d64:	d8f7      	bhi.n	8006d56 <_printf_i+0x2e>
 8006d66:	f7f9 f9cf 	bl	8000108 <__gnu_thumb1_case_shi>
 8006d6a:	0016      	.short	0x0016
 8006d6c:	fff6001f 	.word	0xfff6001f
 8006d70:	fff6fff6 	.word	0xfff6fff6
 8006d74:	001ffff6 	.word	0x001ffff6
 8006d78:	fff6fff6 	.word	0xfff6fff6
 8006d7c:	fff6fff6 	.word	0xfff6fff6
 8006d80:	003600a1 	.word	0x003600a1
 8006d84:	fff60080 	.word	0xfff60080
 8006d88:	00b2fff6 	.word	0x00b2fff6
 8006d8c:	0036fff6 	.word	0x0036fff6
 8006d90:	fff6fff6 	.word	0xfff6fff6
 8006d94:	0084      	.short	0x0084
 8006d96:	0025      	movs	r5, r4
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	3542      	adds	r5, #66	@ 0x42
 8006d9c:	1d11      	adds	r1, r2, #4
 8006d9e:	6019      	str	r1, [r3, #0]
 8006da0:	6813      	ldr	r3, [r2, #0]
 8006da2:	702b      	strb	r3, [r5, #0]
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0a0      	b.n	8006eea <_printf_i+0x1c2>
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	6809      	ldr	r1, [r1, #0]
 8006dac:	1d02      	adds	r2, r0, #4
 8006dae:	060d      	lsls	r5, r1, #24
 8006db0:	d50b      	bpl.n	8006dca <_printf_i+0xa2>
 8006db2:	6806      	ldr	r6, [r0, #0]
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	da03      	bge.n	8006dc2 <_printf_i+0x9a>
 8006dba:	232d      	movs	r3, #45	@ 0x2d
 8006dbc:	9a03      	ldr	r2, [sp, #12]
 8006dbe:	4276      	negs	r6, r6
 8006dc0:	7013      	strb	r3, [r2, #0]
 8006dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8006f3c <_printf_i+0x214>)
 8006dc4:	270a      	movs	r7, #10
 8006dc6:	9304      	str	r3, [sp, #16]
 8006dc8:	e018      	b.n	8006dfc <_printf_i+0xd4>
 8006dca:	6806      	ldr	r6, [r0, #0]
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	0649      	lsls	r1, r1, #25
 8006dd0:	d5f1      	bpl.n	8006db6 <_printf_i+0x8e>
 8006dd2:	b236      	sxth	r6, r6
 8006dd4:	e7ef      	b.n	8006db6 <_printf_i+0x8e>
 8006dd6:	6808      	ldr	r0, [r1, #0]
 8006dd8:	6819      	ldr	r1, [r3, #0]
 8006dda:	c940      	ldmia	r1!, {r6}
 8006ddc:	0605      	lsls	r5, r0, #24
 8006dde:	d402      	bmi.n	8006de6 <_printf_i+0xbe>
 8006de0:	0640      	lsls	r0, r0, #25
 8006de2:	d500      	bpl.n	8006de6 <_printf_i+0xbe>
 8006de4:	b2b6      	uxth	r6, r6
 8006de6:	6019      	str	r1, [r3, #0]
 8006de8:	4b54      	ldr	r3, [pc, #336]	@ (8006f3c <_printf_i+0x214>)
 8006dea:	270a      	movs	r7, #10
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	2a6f      	cmp	r2, #111	@ 0x6f
 8006df0:	d100      	bne.n	8006df4 <_printf_i+0xcc>
 8006df2:	3f02      	subs	r7, #2
 8006df4:	0023      	movs	r3, r4
 8006df6:	2200      	movs	r2, #0
 8006df8:	3343      	adds	r3, #67	@ 0x43
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	6863      	ldr	r3, [r4, #4]
 8006dfe:	60a3      	str	r3, [r4, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	db03      	blt.n	8006e0c <_printf_i+0xe4>
 8006e04:	2104      	movs	r1, #4
 8006e06:	6822      	ldr	r2, [r4, #0]
 8006e08:	438a      	bics	r2, r1
 8006e0a:	6022      	str	r2, [r4, #0]
 8006e0c:	2e00      	cmp	r6, #0
 8006e0e:	d102      	bne.n	8006e16 <_printf_i+0xee>
 8006e10:	9d03      	ldr	r5, [sp, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00c      	beq.n	8006e30 <_printf_i+0x108>
 8006e16:	9d03      	ldr	r5, [sp, #12]
 8006e18:	0030      	movs	r0, r6
 8006e1a:	0039      	movs	r1, r7
 8006e1c:	f7f9 fa04 	bl	8000228 <__aeabi_uidivmod>
 8006e20:	9b04      	ldr	r3, [sp, #16]
 8006e22:	3d01      	subs	r5, #1
 8006e24:	5c5b      	ldrb	r3, [r3, r1]
 8006e26:	702b      	strb	r3, [r5, #0]
 8006e28:	0033      	movs	r3, r6
 8006e2a:	0006      	movs	r6, r0
 8006e2c:	429f      	cmp	r7, r3
 8006e2e:	d9f3      	bls.n	8006e18 <_printf_i+0xf0>
 8006e30:	2f08      	cmp	r7, #8
 8006e32:	d109      	bne.n	8006e48 <_printf_i+0x120>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	07db      	lsls	r3, r3, #31
 8006e38:	d506      	bpl.n	8006e48 <_printf_i+0x120>
 8006e3a:	6862      	ldr	r2, [r4, #4]
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	dc02      	bgt.n	8006e48 <_printf_i+0x120>
 8006e42:	2330      	movs	r3, #48	@ 0x30
 8006e44:	3d01      	subs	r5, #1
 8006e46:	702b      	strb	r3, [r5, #0]
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	1b5b      	subs	r3, r3, r5
 8006e4c:	6123      	str	r3, [r4, #16]
 8006e4e:	9b07      	ldr	r3, [sp, #28]
 8006e50:	0021      	movs	r1, r4
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	9805      	ldr	r0, [sp, #20]
 8006e56:	9b06      	ldr	r3, [sp, #24]
 8006e58:	aa09      	add	r2, sp, #36	@ 0x24
 8006e5a:	f7ff fef5 	bl	8006c48 <_printf_common>
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d148      	bne.n	8006ef4 <_printf_i+0x1cc>
 8006e62:	2001      	movs	r0, #1
 8006e64:	4240      	negs	r0, r0
 8006e66:	b00b      	add	sp, #44	@ 0x2c
 8006e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	6809      	ldr	r1, [r1, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	6022      	str	r2, [r4, #0]
 8006e72:	2278      	movs	r2, #120	@ 0x78
 8006e74:	4932      	ldr	r1, [pc, #200]	@ (8006f40 <_printf_i+0x218>)
 8006e76:	9104      	str	r1, [sp, #16]
 8006e78:	0021      	movs	r1, r4
 8006e7a:	3145      	adds	r1, #69	@ 0x45
 8006e7c:	700a      	strb	r2, [r1, #0]
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	6822      	ldr	r2, [r4, #0]
 8006e82:	c940      	ldmia	r1!, {r6}
 8006e84:	0610      	lsls	r0, r2, #24
 8006e86:	d402      	bmi.n	8006e8e <_printf_i+0x166>
 8006e88:	0650      	lsls	r0, r2, #25
 8006e8a:	d500      	bpl.n	8006e8e <_printf_i+0x166>
 8006e8c:	b2b6      	uxth	r6, r6
 8006e8e:	6019      	str	r1, [r3, #0]
 8006e90:	07d3      	lsls	r3, r2, #31
 8006e92:	d502      	bpl.n	8006e9a <_printf_i+0x172>
 8006e94:	2320      	movs	r3, #32
 8006e96:	4313      	orrs	r3, r2
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	d001      	beq.n	8006ea2 <_printf_i+0x17a>
 8006e9e:	2710      	movs	r7, #16
 8006ea0:	e7a8      	b.n	8006df4 <_printf_i+0xcc>
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	4393      	bics	r3, r2
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	e7f8      	b.n	8006e9e <_printf_i+0x176>
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	680d      	ldr	r5, [r1, #0]
 8006eb0:	1d10      	adds	r0, r2, #4
 8006eb2:	6949      	ldr	r1, [r1, #20]
 8006eb4:	6018      	str	r0, [r3, #0]
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	062e      	lsls	r6, r5, #24
 8006eba:	d501      	bpl.n	8006ec0 <_printf_i+0x198>
 8006ebc:	6019      	str	r1, [r3, #0]
 8006ebe:	e002      	b.n	8006ec6 <_printf_i+0x19e>
 8006ec0:	066d      	lsls	r5, r5, #25
 8006ec2:	d5fb      	bpl.n	8006ebc <_printf_i+0x194>
 8006ec4:	8019      	strh	r1, [r3, #0]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	9d03      	ldr	r5, [sp, #12]
 8006eca:	6123      	str	r3, [r4, #16]
 8006ecc:	e7bf      	b.n	8006e4e <_printf_i+0x126>
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	1d11      	adds	r1, r2, #4
 8006ed2:	6019      	str	r1, [r3, #0]
 8006ed4:	6815      	ldr	r5, [r2, #0]
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	0028      	movs	r0, r5
 8006eda:	6862      	ldr	r2, [r4, #4]
 8006edc:	f000 fad0 	bl	8007480 <memchr>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d001      	beq.n	8006ee8 <_printf_i+0x1c0>
 8006ee4:	1b40      	subs	r0, r0, r5
 8006ee6:	6060      	str	r0, [r4, #4]
 8006ee8:	6863      	ldr	r3, [r4, #4]
 8006eea:	6123      	str	r3, [r4, #16]
 8006eec:	2300      	movs	r3, #0
 8006eee:	9a03      	ldr	r2, [sp, #12]
 8006ef0:	7013      	strb	r3, [r2, #0]
 8006ef2:	e7ac      	b.n	8006e4e <_printf_i+0x126>
 8006ef4:	002a      	movs	r2, r5
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	9906      	ldr	r1, [sp, #24]
 8006efa:	9805      	ldr	r0, [sp, #20]
 8006efc:	9d07      	ldr	r5, [sp, #28]
 8006efe:	47a8      	blx	r5
 8006f00:	3001      	adds	r0, #1
 8006f02:	d0ae      	beq.n	8006e62 <_printf_i+0x13a>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	079b      	lsls	r3, r3, #30
 8006f08:	d415      	bmi.n	8006f36 <_printf_i+0x20e>
 8006f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0c:	68e0      	ldr	r0, [r4, #12]
 8006f0e:	4298      	cmp	r0, r3
 8006f10:	daa9      	bge.n	8006e66 <_printf_i+0x13e>
 8006f12:	0018      	movs	r0, r3
 8006f14:	e7a7      	b.n	8006e66 <_printf_i+0x13e>
 8006f16:	0022      	movs	r2, r4
 8006f18:	2301      	movs	r3, #1
 8006f1a:	9906      	ldr	r1, [sp, #24]
 8006f1c:	9805      	ldr	r0, [sp, #20]
 8006f1e:	9e07      	ldr	r6, [sp, #28]
 8006f20:	3219      	adds	r2, #25
 8006f22:	47b0      	blx	r6
 8006f24:	3001      	adds	r0, #1
 8006f26:	d09c      	beq.n	8006e62 <_printf_i+0x13a>
 8006f28:	3501      	adds	r5, #1
 8006f2a:	68e3      	ldr	r3, [r4, #12]
 8006f2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	42ab      	cmp	r3, r5
 8006f32:	dcf0      	bgt.n	8006f16 <_printf_i+0x1ee>
 8006f34:	e7e9      	b.n	8006f0a <_printf_i+0x1e2>
 8006f36:	2500      	movs	r5, #0
 8006f38:	e7f7      	b.n	8006f2a <_printf_i+0x202>
 8006f3a:	46c0      	nop			@ (mov r8, r8)
 8006f3c:	080075e5 	.word	0x080075e5
 8006f40:	080075f6 	.word	0x080075f6

08006f44 <__sflush_r>:
 8006f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f46:	220c      	movs	r2, #12
 8006f48:	5e8b      	ldrsh	r3, [r1, r2]
 8006f4a:	0005      	movs	r5, r0
 8006f4c:	000c      	movs	r4, r1
 8006f4e:	071a      	lsls	r2, r3, #28
 8006f50:	d456      	bmi.n	8007000 <__sflush_r+0xbc>
 8006f52:	684a      	ldr	r2, [r1, #4]
 8006f54:	2a00      	cmp	r2, #0
 8006f56:	dc02      	bgt.n	8006f5e <__sflush_r+0x1a>
 8006f58:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006f5a:	2a00      	cmp	r2, #0
 8006f5c:	dd4e      	ble.n	8006ffc <__sflush_r+0xb8>
 8006f5e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006f60:	2f00      	cmp	r7, #0
 8006f62:	d04b      	beq.n	8006ffc <__sflush_r+0xb8>
 8006f64:	2200      	movs	r2, #0
 8006f66:	2080      	movs	r0, #128	@ 0x80
 8006f68:	682e      	ldr	r6, [r5, #0]
 8006f6a:	602a      	str	r2, [r5, #0]
 8006f6c:	001a      	movs	r2, r3
 8006f6e:	0140      	lsls	r0, r0, #5
 8006f70:	6a21      	ldr	r1, [r4, #32]
 8006f72:	4002      	ands	r2, r0
 8006f74:	4203      	tst	r3, r0
 8006f76:	d033      	beq.n	8006fe0 <__sflush_r+0x9c>
 8006f78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	075b      	lsls	r3, r3, #29
 8006f7e:	d506      	bpl.n	8006f8e <__sflush_r+0x4a>
 8006f80:	6863      	ldr	r3, [r4, #4]
 8006f82:	1ad2      	subs	r2, r2, r3
 8006f84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <__sflush_r+0x4a>
 8006f8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f8c:	1ad2      	subs	r2, r2, r3
 8006f8e:	2300      	movs	r3, #0
 8006f90:	0028      	movs	r0, r5
 8006f92:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006f94:	6a21      	ldr	r1, [r4, #32]
 8006f96:	47b8      	blx	r7
 8006f98:	89a2      	ldrh	r2, [r4, #12]
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	d106      	bne.n	8006fac <__sflush_r+0x68>
 8006f9e:	6829      	ldr	r1, [r5, #0]
 8006fa0:	291d      	cmp	r1, #29
 8006fa2:	d846      	bhi.n	8007032 <__sflush_r+0xee>
 8006fa4:	4b29      	ldr	r3, [pc, #164]	@ (800704c <__sflush_r+0x108>)
 8006fa6:	410b      	asrs	r3, r1
 8006fa8:	07db      	lsls	r3, r3, #31
 8006faa:	d442      	bmi.n	8007032 <__sflush_r+0xee>
 8006fac:	2300      	movs	r3, #0
 8006fae:	6063      	str	r3, [r4, #4]
 8006fb0:	6923      	ldr	r3, [r4, #16]
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	04d2      	lsls	r2, r2, #19
 8006fb6:	d505      	bpl.n	8006fc4 <__sflush_r+0x80>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <__sflush_r+0x7e>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d100      	bne.n	8006fc4 <__sflush_r+0x80>
 8006fc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fc6:	602e      	str	r6, [r5, #0]
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	d017      	beq.n	8006ffc <__sflush_r+0xb8>
 8006fcc:	0023      	movs	r3, r4
 8006fce:	3344      	adds	r3, #68	@ 0x44
 8006fd0:	4299      	cmp	r1, r3
 8006fd2:	d002      	beq.n	8006fda <__sflush_r+0x96>
 8006fd4:	0028      	movs	r0, r5
 8006fd6:	f000 fa5f 	bl	8007498 <_free_r>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fde:	e00d      	b.n	8006ffc <__sflush_r+0xb8>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	0028      	movs	r0, r5
 8006fe4:	47b8      	blx	r7
 8006fe6:	0002      	movs	r2, r0
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d1c6      	bne.n	8006f7a <__sflush_r+0x36>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0c3      	beq.n	8006f7a <__sflush_r+0x36>
 8006ff2:	2b1d      	cmp	r3, #29
 8006ff4:	d001      	beq.n	8006ffa <__sflush_r+0xb6>
 8006ff6:	2b16      	cmp	r3, #22
 8006ff8:	d11a      	bne.n	8007030 <__sflush_r+0xec>
 8006ffa:	602e      	str	r6, [r5, #0]
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e01e      	b.n	800703e <__sflush_r+0xfa>
 8007000:	690e      	ldr	r6, [r1, #16]
 8007002:	2e00      	cmp	r6, #0
 8007004:	d0fa      	beq.n	8006ffc <__sflush_r+0xb8>
 8007006:	680f      	ldr	r7, [r1, #0]
 8007008:	600e      	str	r6, [r1, #0]
 800700a:	1bba      	subs	r2, r7, r6
 800700c:	9201      	str	r2, [sp, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	079b      	lsls	r3, r3, #30
 8007012:	d100      	bne.n	8007016 <__sflush_r+0xd2>
 8007014:	694a      	ldr	r2, [r1, #20]
 8007016:	60a2      	str	r2, [r4, #8]
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	ddee      	ble.n	8006ffc <__sflush_r+0xb8>
 800701e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007020:	0032      	movs	r2, r6
 8007022:	001f      	movs	r7, r3
 8007024:	0028      	movs	r0, r5
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	6a21      	ldr	r1, [r4, #32]
 800702a:	47b8      	blx	r7
 800702c:	2800      	cmp	r0, #0
 800702e:	dc07      	bgt.n	8007040 <__sflush_r+0xfc>
 8007030:	89a2      	ldrh	r2, [r4, #12]
 8007032:	2340      	movs	r3, #64	@ 0x40
 8007034:	2001      	movs	r0, #1
 8007036:	4313      	orrs	r3, r2
 8007038:	b21b      	sxth	r3, r3
 800703a:	81a3      	strh	r3, [r4, #12]
 800703c:	4240      	negs	r0, r0
 800703e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007040:	9b01      	ldr	r3, [sp, #4]
 8007042:	1836      	adds	r6, r6, r0
 8007044:	1a1b      	subs	r3, r3, r0
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	e7e6      	b.n	8007018 <__sflush_r+0xd4>
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	dfbffffe 	.word	0xdfbffffe

08007050 <_fflush_r>:
 8007050:	690b      	ldr	r3, [r1, #16]
 8007052:	b570      	push	{r4, r5, r6, lr}
 8007054:	0005      	movs	r5, r0
 8007056:	000c      	movs	r4, r1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <_fflush_r+0x12>
 800705c:	2500      	movs	r5, #0
 800705e:	0028      	movs	r0, r5
 8007060:	bd70      	pop	{r4, r5, r6, pc}
 8007062:	2800      	cmp	r0, #0
 8007064:	d004      	beq.n	8007070 <_fflush_r+0x20>
 8007066:	6a03      	ldr	r3, [r0, #32]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <_fflush_r+0x20>
 800706c:	f7ff fb8e 	bl	800678c <__sinit>
 8007070:	220c      	movs	r2, #12
 8007072:	5ea3      	ldrsh	r3, [r4, r2]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0f1      	beq.n	800705c <_fflush_r+0xc>
 8007078:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800707a:	07d2      	lsls	r2, r2, #31
 800707c:	d404      	bmi.n	8007088 <_fflush_r+0x38>
 800707e:	059b      	lsls	r3, r3, #22
 8007080:	d402      	bmi.n	8007088 <_fflush_r+0x38>
 8007082:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007084:	f7ff fbf9 	bl	800687a <__retarget_lock_acquire_recursive>
 8007088:	0028      	movs	r0, r5
 800708a:	0021      	movs	r1, r4
 800708c:	f7ff ff5a 	bl	8006f44 <__sflush_r>
 8007090:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007092:	0005      	movs	r5, r0
 8007094:	07db      	lsls	r3, r3, #31
 8007096:	d4e2      	bmi.n	800705e <_fflush_r+0xe>
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	059b      	lsls	r3, r3, #22
 800709c:	d4df      	bmi.n	800705e <_fflush_r+0xe>
 800709e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070a0:	f7ff fbec 	bl	800687c <__retarget_lock_release_recursive>
 80070a4:	e7db      	b.n	800705e <_fflush_r+0xe>
	...

080070a8 <__malloc_lock>:
 80070a8:	b510      	push	{r4, lr}
 80070aa:	4802      	ldr	r0, [pc, #8]	@ (80070b4 <__malloc_lock+0xc>)
 80070ac:	f7ff fbe5 	bl	800687a <__retarget_lock_acquire_recursive>
 80070b0:	bd10      	pop	{r4, pc}
 80070b2:	46c0      	nop			@ (mov r8, r8)
 80070b4:	200003b4 	.word	0x200003b4

080070b8 <__malloc_unlock>:
 80070b8:	b510      	push	{r4, lr}
 80070ba:	4802      	ldr	r0, [pc, #8]	@ (80070c4 <__malloc_unlock+0xc>)
 80070bc:	f7ff fbde 	bl	800687c <__retarget_lock_release_recursive>
 80070c0:	bd10      	pop	{r4, pc}
 80070c2:	46c0      	nop			@ (mov r8, r8)
 80070c4:	200003b4 	.word	0x200003b4

080070c8 <__sread>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	000c      	movs	r4, r1
 80070cc:	250e      	movs	r5, #14
 80070ce:	5f49      	ldrsh	r1, [r1, r5]
 80070d0:	f000 f99c 	bl	800740c <_read_r>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	db03      	blt.n	80070e0 <__sread+0x18>
 80070d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80070da:	181b      	adds	r3, r3, r0
 80070dc:	6563      	str	r3, [r4, #84]	@ 0x54
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	4a02      	ldr	r2, [pc, #8]	@ (80070ec <__sread+0x24>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	81a3      	strh	r3, [r4, #12]
 80070e8:	e7f9      	b.n	80070de <__sread+0x16>
 80070ea:	46c0      	nop			@ (mov r8, r8)
 80070ec:	ffffefff 	.word	0xffffefff

080070f0 <__swrite>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	001f      	movs	r7, r3
 80070f4:	898b      	ldrh	r3, [r1, #12]
 80070f6:	0005      	movs	r5, r0
 80070f8:	000c      	movs	r4, r1
 80070fa:	0016      	movs	r6, r2
 80070fc:	05db      	lsls	r3, r3, #23
 80070fe:	d505      	bpl.n	800710c <__swrite+0x1c>
 8007100:	230e      	movs	r3, #14
 8007102:	5ec9      	ldrsh	r1, [r1, r3]
 8007104:	2200      	movs	r2, #0
 8007106:	2302      	movs	r3, #2
 8007108:	f000 f96c 	bl	80073e4 <_lseek_r>
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	4a05      	ldr	r2, [pc, #20]	@ (8007124 <__swrite+0x34>)
 8007110:	0028      	movs	r0, r5
 8007112:	4013      	ands	r3, r2
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	0032      	movs	r2, r6
 8007118:	230e      	movs	r3, #14
 800711a:	5ee1      	ldrsh	r1, [r4, r3]
 800711c:	003b      	movs	r3, r7
 800711e:	f000 f99b 	bl	8007458 <_write_r>
 8007122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007124:	ffffefff 	.word	0xffffefff

08007128 <__sseek>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	000c      	movs	r4, r1
 800712c:	250e      	movs	r5, #14
 800712e:	5f49      	ldrsh	r1, [r1, r5]
 8007130:	f000 f958 	bl	80073e4 <_lseek_r>
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	1c42      	adds	r2, r0, #1
 8007138:	d103      	bne.n	8007142 <__sseek+0x1a>
 800713a:	4a05      	ldr	r2, [pc, #20]	@ (8007150 <__sseek+0x28>)
 800713c:	4013      	ands	r3, r2
 800713e:	81a3      	strh	r3, [r4, #12]
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	2280      	movs	r2, #128	@ 0x80
 8007144:	0152      	lsls	r2, r2, #5
 8007146:	4313      	orrs	r3, r2
 8007148:	81a3      	strh	r3, [r4, #12]
 800714a:	6560      	str	r0, [r4, #84]	@ 0x54
 800714c:	e7f8      	b.n	8007140 <__sseek+0x18>
 800714e:	46c0      	nop			@ (mov r8, r8)
 8007150:	ffffefff 	.word	0xffffefff

08007154 <__sclose>:
 8007154:	b510      	push	{r4, lr}
 8007156:	230e      	movs	r3, #14
 8007158:	5ec9      	ldrsh	r1, [r1, r3]
 800715a:	f000 f90d 	bl	8007378 <_close_r>
 800715e:	bd10      	pop	{r4, pc}

08007160 <__swbuf_r>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	0006      	movs	r6, r0
 8007164:	000d      	movs	r5, r1
 8007166:	0014      	movs	r4, r2
 8007168:	2800      	cmp	r0, #0
 800716a:	d004      	beq.n	8007176 <__swbuf_r+0x16>
 800716c:	6a03      	ldr	r3, [r0, #32]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <__swbuf_r+0x16>
 8007172:	f7ff fb0b 	bl	800678c <__sinit>
 8007176:	69a3      	ldr	r3, [r4, #24]
 8007178:	60a3      	str	r3, [r4, #8]
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	071b      	lsls	r3, r3, #28
 800717e:	d502      	bpl.n	8007186 <__swbuf_r+0x26>
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <__swbuf_r+0x3a>
 8007186:	0021      	movs	r1, r4
 8007188:	0030      	movs	r0, r6
 800718a:	f000 f82b 	bl	80071e4 <__swsetup_r>
 800718e:	2800      	cmp	r0, #0
 8007190:	d003      	beq.n	800719a <__swbuf_r+0x3a>
 8007192:	2501      	movs	r5, #1
 8007194:	426d      	negs	r5, r5
 8007196:	0028      	movs	r0, r5
 8007198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	6820      	ldr	r0, [r4, #0]
 800719e:	b2ef      	uxtb	r7, r5
 80071a0:	1ac0      	subs	r0, r0, r3
 80071a2:	6963      	ldr	r3, [r4, #20]
 80071a4:	b2ed      	uxtb	r5, r5
 80071a6:	4283      	cmp	r3, r0
 80071a8:	dc05      	bgt.n	80071b6 <__swbuf_r+0x56>
 80071aa:	0021      	movs	r1, r4
 80071ac:	0030      	movs	r0, r6
 80071ae:	f7ff ff4f 	bl	8007050 <_fflush_r>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d1ed      	bne.n	8007192 <__swbuf_r+0x32>
 80071b6:	68a3      	ldr	r3, [r4, #8]
 80071b8:	3001      	adds	r0, #1
 80071ba:	3b01      	subs	r3, #1
 80071bc:	60a3      	str	r3, [r4, #8]
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	701f      	strb	r7, [r3, #0]
 80071c6:	6963      	ldr	r3, [r4, #20]
 80071c8:	4283      	cmp	r3, r0
 80071ca:	d004      	beq.n	80071d6 <__swbuf_r+0x76>
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	07db      	lsls	r3, r3, #31
 80071d0:	d5e1      	bpl.n	8007196 <__swbuf_r+0x36>
 80071d2:	2d0a      	cmp	r5, #10
 80071d4:	d1df      	bne.n	8007196 <__swbuf_r+0x36>
 80071d6:	0021      	movs	r1, r4
 80071d8:	0030      	movs	r0, r6
 80071da:	f7ff ff39 	bl	8007050 <_fflush_r>
 80071de:	2800      	cmp	r0, #0
 80071e0:	d0d9      	beq.n	8007196 <__swbuf_r+0x36>
 80071e2:	e7d6      	b.n	8007192 <__swbuf_r+0x32>

080071e4 <__swsetup_r>:
 80071e4:	4b2d      	ldr	r3, [pc, #180]	@ (800729c <__swsetup_r+0xb8>)
 80071e6:	b570      	push	{r4, r5, r6, lr}
 80071e8:	0005      	movs	r5, r0
 80071ea:	6818      	ldr	r0, [r3, #0]
 80071ec:	000c      	movs	r4, r1
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d004      	beq.n	80071fc <__swsetup_r+0x18>
 80071f2:	6a03      	ldr	r3, [r0, #32]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <__swsetup_r+0x18>
 80071f8:	f7ff fac8 	bl	800678c <__sinit>
 80071fc:	230c      	movs	r3, #12
 80071fe:	5ee2      	ldrsh	r2, [r4, r3]
 8007200:	0713      	lsls	r3, r2, #28
 8007202:	d423      	bmi.n	800724c <__swsetup_r+0x68>
 8007204:	06d3      	lsls	r3, r2, #27
 8007206:	d407      	bmi.n	8007218 <__swsetup_r+0x34>
 8007208:	2309      	movs	r3, #9
 800720a:	602b      	str	r3, [r5, #0]
 800720c:	2340      	movs	r3, #64	@ 0x40
 800720e:	2001      	movs	r0, #1
 8007210:	4313      	orrs	r3, r2
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	4240      	negs	r0, r0
 8007216:	e03a      	b.n	800728e <__swsetup_r+0xaa>
 8007218:	0752      	lsls	r2, r2, #29
 800721a:	d513      	bpl.n	8007244 <__swsetup_r+0x60>
 800721c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800721e:	2900      	cmp	r1, #0
 8007220:	d008      	beq.n	8007234 <__swsetup_r+0x50>
 8007222:	0023      	movs	r3, r4
 8007224:	3344      	adds	r3, #68	@ 0x44
 8007226:	4299      	cmp	r1, r3
 8007228:	d002      	beq.n	8007230 <__swsetup_r+0x4c>
 800722a:	0028      	movs	r0, r5
 800722c:	f000 f934 	bl	8007498 <_free_r>
 8007230:	2300      	movs	r3, #0
 8007232:	6363      	str	r3, [r4, #52]	@ 0x34
 8007234:	2224      	movs	r2, #36	@ 0x24
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	4393      	bics	r3, r2
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	2300      	movs	r3, #0
 800723e:	6063      	str	r3, [r4, #4]
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	6023      	str	r3, [r4, #0]
 8007244:	2308      	movs	r3, #8
 8007246:	89a2      	ldrh	r2, [r4, #12]
 8007248:	4313      	orrs	r3, r2
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	6923      	ldr	r3, [r4, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10b      	bne.n	800726a <__swsetup_r+0x86>
 8007252:	21a0      	movs	r1, #160	@ 0xa0
 8007254:	2280      	movs	r2, #128	@ 0x80
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	0089      	lsls	r1, r1, #2
 800725a:	0092      	lsls	r2, r2, #2
 800725c:	400b      	ands	r3, r1
 800725e:	4293      	cmp	r3, r2
 8007260:	d003      	beq.n	800726a <__swsetup_r+0x86>
 8007262:	0021      	movs	r1, r4
 8007264:	0028      	movs	r0, r5
 8007266:	f000 f845 	bl	80072f4 <__smakebuf_r>
 800726a:	230c      	movs	r3, #12
 800726c:	5ee2      	ldrsh	r2, [r4, r3]
 800726e:	2101      	movs	r1, #1
 8007270:	0013      	movs	r3, r2
 8007272:	400b      	ands	r3, r1
 8007274:	420a      	tst	r2, r1
 8007276:	d00b      	beq.n	8007290 <__swsetup_r+0xac>
 8007278:	2300      	movs	r3, #0
 800727a:	60a3      	str	r3, [r4, #8]
 800727c:	6963      	ldr	r3, [r4, #20]
 800727e:	425b      	negs	r3, r3
 8007280:	61a3      	str	r3, [r4, #24]
 8007282:	2000      	movs	r0, #0
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	4283      	cmp	r3, r0
 8007288:	d101      	bne.n	800728e <__swsetup_r+0xaa>
 800728a:	0613      	lsls	r3, r2, #24
 800728c:	d4be      	bmi.n	800720c <__swsetup_r+0x28>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	0791      	lsls	r1, r2, #30
 8007292:	d400      	bmi.n	8007296 <__swsetup_r+0xb2>
 8007294:	6963      	ldr	r3, [r4, #20]
 8007296:	60a3      	str	r3, [r4, #8]
 8007298:	e7f3      	b.n	8007282 <__swsetup_r+0x9e>
 800729a:	46c0      	nop			@ (mov r8, r8)
 800729c:	20000018 	.word	0x20000018

080072a0 <__swhatbuf_r>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	000e      	movs	r6, r1
 80072a4:	001d      	movs	r5, r3
 80072a6:	230e      	movs	r3, #14
 80072a8:	5ec9      	ldrsh	r1, [r1, r3]
 80072aa:	0014      	movs	r4, r2
 80072ac:	b096      	sub	sp, #88	@ 0x58
 80072ae:	2900      	cmp	r1, #0
 80072b0:	da0c      	bge.n	80072cc <__swhatbuf_r+0x2c>
 80072b2:	89b2      	ldrh	r2, [r6, #12]
 80072b4:	2380      	movs	r3, #128	@ 0x80
 80072b6:	0011      	movs	r1, r2
 80072b8:	4019      	ands	r1, r3
 80072ba:	421a      	tst	r2, r3
 80072bc:	d114      	bne.n	80072e8 <__swhatbuf_r+0x48>
 80072be:	2380      	movs	r3, #128	@ 0x80
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	2000      	movs	r0, #0
 80072c4:	6029      	str	r1, [r5, #0]
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	b016      	add	sp, #88	@ 0x58
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	466a      	mov	r2, sp
 80072ce:	f000 f865 	bl	800739c <_fstat_r>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	dbed      	blt.n	80072b2 <__swhatbuf_r+0x12>
 80072d6:	23f0      	movs	r3, #240	@ 0xf0
 80072d8:	9901      	ldr	r1, [sp, #4]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	4019      	ands	r1, r3
 80072de:	4b04      	ldr	r3, [pc, #16]	@ (80072f0 <__swhatbuf_r+0x50>)
 80072e0:	18c9      	adds	r1, r1, r3
 80072e2:	424b      	negs	r3, r1
 80072e4:	4159      	adcs	r1, r3
 80072e6:	e7ea      	b.n	80072be <__swhatbuf_r+0x1e>
 80072e8:	2100      	movs	r1, #0
 80072ea:	2340      	movs	r3, #64	@ 0x40
 80072ec:	e7e9      	b.n	80072c2 <__swhatbuf_r+0x22>
 80072ee:	46c0      	nop			@ (mov r8, r8)
 80072f0:	ffffe000 	.word	0xffffe000

080072f4 <__smakebuf_r>:
 80072f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f6:	2602      	movs	r6, #2
 80072f8:	898b      	ldrh	r3, [r1, #12]
 80072fa:	0005      	movs	r5, r0
 80072fc:	000c      	movs	r4, r1
 80072fe:	b085      	sub	sp, #20
 8007300:	4233      	tst	r3, r6
 8007302:	d007      	beq.n	8007314 <__smakebuf_r+0x20>
 8007304:	0023      	movs	r3, r4
 8007306:	3347      	adds	r3, #71	@ 0x47
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	6123      	str	r3, [r4, #16]
 800730c:	2301      	movs	r3, #1
 800730e:	6163      	str	r3, [r4, #20]
 8007310:	b005      	add	sp, #20
 8007312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007314:	ab03      	add	r3, sp, #12
 8007316:	aa02      	add	r2, sp, #8
 8007318:	f7ff ffc2 	bl	80072a0 <__swhatbuf_r>
 800731c:	9f02      	ldr	r7, [sp, #8]
 800731e:	9001      	str	r0, [sp, #4]
 8007320:	0039      	movs	r1, r7
 8007322:	0028      	movs	r0, r5
 8007324:	f7ff fc10 	bl	8006b48 <_malloc_r>
 8007328:	2800      	cmp	r0, #0
 800732a:	d108      	bne.n	800733e <__smakebuf_r+0x4a>
 800732c:	220c      	movs	r2, #12
 800732e:	5ea3      	ldrsh	r3, [r4, r2]
 8007330:	059a      	lsls	r2, r3, #22
 8007332:	d4ed      	bmi.n	8007310 <__smakebuf_r+0x1c>
 8007334:	2203      	movs	r2, #3
 8007336:	4393      	bics	r3, r2
 8007338:	431e      	orrs	r6, r3
 800733a:	81a6      	strh	r6, [r4, #12]
 800733c:	e7e2      	b.n	8007304 <__smakebuf_r+0x10>
 800733e:	2380      	movs	r3, #128	@ 0x80
 8007340:	89a2      	ldrh	r2, [r4, #12]
 8007342:	6020      	str	r0, [r4, #0]
 8007344:	4313      	orrs	r3, r2
 8007346:	81a3      	strh	r3, [r4, #12]
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	6120      	str	r0, [r4, #16]
 800734c:	6167      	str	r7, [r4, #20]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00c      	beq.n	800736c <__smakebuf_r+0x78>
 8007352:	0028      	movs	r0, r5
 8007354:	230e      	movs	r3, #14
 8007356:	5ee1      	ldrsh	r1, [r4, r3]
 8007358:	f000 f832 	bl	80073c0 <_isatty_r>
 800735c:	2800      	cmp	r0, #0
 800735e:	d005      	beq.n	800736c <__smakebuf_r+0x78>
 8007360:	2303      	movs	r3, #3
 8007362:	89a2      	ldrh	r2, [r4, #12]
 8007364:	439a      	bics	r2, r3
 8007366:	3b02      	subs	r3, #2
 8007368:	4313      	orrs	r3, r2
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	9a01      	ldr	r2, [sp, #4]
 8007370:	4313      	orrs	r3, r2
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	e7cc      	b.n	8007310 <__smakebuf_r+0x1c>
	...

08007378 <_close_r>:
 8007378:	2300      	movs	r3, #0
 800737a:	b570      	push	{r4, r5, r6, lr}
 800737c:	4d06      	ldr	r5, [pc, #24]	@ (8007398 <_close_r+0x20>)
 800737e:	0004      	movs	r4, r0
 8007380:	0008      	movs	r0, r1
 8007382:	602b      	str	r3, [r5, #0]
 8007384:	f7f9 fde3 	bl	8000f4e <_close>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d103      	bne.n	8007394 <_close_r+0x1c>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d000      	beq.n	8007394 <_close_r+0x1c>
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	bd70      	pop	{r4, r5, r6, pc}
 8007396:	46c0      	nop			@ (mov r8, r8)
 8007398:	200003c0 	.word	0x200003c0

0800739c <_fstat_r>:
 800739c:	2300      	movs	r3, #0
 800739e:	b570      	push	{r4, r5, r6, lr}
 80073a0:	4d06      	ldr	r5, [pc, #24]	@ (80073bc <_fstat_r+0x20>)
 80073a2:	0004      	movs	r4, r0
 80073a4:	0008      	movs	r0, r1
 80073a6:	0011      	movs	r1, r2
 80073a8:	602b      	str	r3, [r5, #0]
 80073aa:	f7f9 fdda 	bl	8000f62 <_fstat>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d103      	bne.n	80073ba <_fstat_r+0x1e>
 80073b2:	682b      	ldr	r3, [r5, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d000      	beq.n	80073ba <_fstat_r+0x1e>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	200003c0 	.word	0x200003c0

080073c0 <_isatty_r>:
 80073c0:	2300      	movs	r3, #0
 80073c2:	b570      	push	{r4, r5, r6, lr}
 80073c4:	4d06      	ldr	r5, [pc, #24]	@ (80073e0 <_isatty_r+0x20>)
 80073c6:	0004      	movs	r4, r0
 80073c8:	0008      	movs	r0, r1
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	f7f9 fdd7 	bl	8000f7e <_isatty>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	d103      	bne.n	80073dc <_isatty_r+0x1c>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d000      	beq.n	80073dc <_isatty_r+0x1c>
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	bd70      	pop	{r4, r5, r6, pc}
 80073de:	46c0      	nop			@ (mov r8, r8)
 80073e0:	200003c0 	.word	0x200003c0

080073e4 <_lseek_r>:
 80073e4:	b570      	push	{r4, r5, r6, lr}
 80073e6:	0004      	movs	r4, r0
 80073e8:	0008      	movs	r0, r1
 80073ea:	0011      	movs	r1, r2
 80073ec:	001a      	movs	r2, r3
 80073ee:	2300      	movs	r3, #0
 80073f0:	4d05      	ldr	r5, [pc, #20]	@ (8007408 <_lseek_r+0x24>)
 80073f2:	602b      	str	r3, [r5, #0]
 80073f4:	f7f9 fdcc 	bl	8000f90 <_lseek>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d103      	bne.n	8007404 <_lseek_r+0x20>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d000      	beq.n	8007404 <_lseek_r+0x20>
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	bd70      	pop	{r4, r5, r6, pc}
 8007406:	46c0      	nop			@ (mov r8, r8)
 8007408:	200003c0 	.word	0x200003c0

0800740c <_read_r>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	0004      	movs	r4, r0
 8007410:	0008      	movs	r0, r1
 8007412:	0011      	movs	r1, r2
 8007414:	001a      	movs	r2, r3
 8007416:	2300      	movs	r3, #0
 8007418:	4d05      	ldr	r5, [pc, #20]	@ (8007430 <_read_r+0x24>)
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7f9 fd5e 	bl	8000edc <_read>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d103      	bne.n	800742c <_read_r+0x20>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d000      	beq.n	800742c <_read_r+0x20>
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	200003c0 	.word	0x200003c0

08007434 <_sbrk_r>:
 8007434:	2300      	movs	r3, #0
 8007436:	b570      	push	{r4, r5, r6, lr}
 8007438:	4d06      	ldr	r5, [pc, #24]	@ (8007454 <_sbrk_r+0x20>)
 800743a:	0004      	movs	r4, r0
 800743c:	0008      	movs	r0, r1
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	f7f9 fdb2 	bl	8000fa8 <_sbrk>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d103      	bne.n	8007450 <_sbrk_r+0x1c>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d000      	beq.n	8007450 <_sbrk_r+0x1c>
 800744e:	6023      	str	r3, [r4, #0]
 8007450:	bd70      	pop	{r4, r5, r6, pc}
 8007452:	46c0      	nop			@ (mov r8, r8)
 8007454:	200003c0 	.word	0x200003c0

08007458 <_write_r>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	0004      	movs	r4, r0
 800745c:	0008      	movs	r0, r1
 800745e:	0011      	movs	r1, r2
 8007460:	001a      	movs	r2, r3
 8007462:	2300      	movs	r3, #0
 8007464:	4d05      	ldr	r5, [pc, #20]	@ (800747c <_write_r+0x24>)
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7f9 fd55 	bl	8000f16 <_write>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d103      	bne.n	8007478 <_write_r+0x20>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d000      	beq.n	8007478 <_write_r+0x20>
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	bd70      	pop	{r4, r5, r6, pc}
 800747a:	46c0      	nop			@ (mov r8, r8)
 800747c:	200003c0 	.word	0x200003c0

08007480 <memchr>:
 8007480:	b2c9      	uxtb	r1, r1
 8007482:	1882      	adds	r2, r0, r2
 8007484:	4290      	cmp	r0, r2
 8007486:	d101      	bne.n	800748c <memchr+0xc>
 8007488:	2000      	movs	r0, #0
 800748a:	4770      	bx	lr
 800748c:	7803      	ldrb	r3, [r0, #0]
 800748e:	428b      	cmp	r3, r1
 8007490:	d0fb      	beq.n	800748a <memchr+0xa>
 8007492:	3001      	adds	r0, #1
 8007494:	e7f6      	b.n	8007484 <memchr+0x4>
	...

08007498 <_free_r>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	0005      	movs	r5, r0
 800749c:	1e0c      	subs	r4, r1, #0
 800749e:	d010      	beq.n	80074c2 <_free_r+0x2a>
 80074a0:	3c04      	subs	r4, #4
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da00      	bge.n	80074aa <_free_r+0x12>
 80074a8:	18e4      	adds	r4, r4, r3
 80074aa:	0028      	movs	r0, r5
 80074ac:	f7ff fdfc 	bl	80070a8 <__malloc_lock>
 80074b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007528 <_free_r+0x90>)
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d105      	bne.n	80074c4 <_free_r+0x2c>
 80074b8:	6063      	str	r3, [r4, #4]
 80074ba:	6014      	str	r4, [r2, #0]
 80074bc:	0028      	movs	r0, r5
 80074be:	f7ff fdfb 	bl	80070b8 <__malloc_unlock>
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	d908      	bls.n	80074da <_free_r+0x42>
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	1821      	adds	r1, r4, r0
 80074cc:	428b      	cmp	r3, r1
 80074ce:	d1f3      	bne.n	80074b8 <_free_r+0x20>
 80074d0:	6819      	ldr	r1, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	1809      	adds	r1, r1, r0
 80074d6:	6021      	str	r1, [r4, #0]
 80074d8:	e7ee      	b.n	80074b8 <_free_r+0x20>
 80074da:	001a      	movs	r2, r3
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <_free_r+0x4e>
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	d9f9      	bls.n	80074da <_free_r+0x42>
 80074e6:	6811      	ldr	r1, [r2, #0]
 80074e8:	1850      	adds	r0, r2, r1
 80074ea:	42a0      	cmp	r0, r4
 80074ec:	d10b      	bne.n	8007506 <_free_r+0x6e>
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	1809      	adds	r1, r1, r0
 80074f2:	1850      	adds	r0, r2, r1
 80074f4:	6011      	str	r1, [r2, #0]
 80074f6:	4283      	cmp	r3, r0
 80074f8:	d1e0      	bne.n	80074bc <_free_r+0x24>
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	1841      	adds	r1, r0, r1
 8007500:	6011      	str	r1, [r2, #0]
 8007502:	6053      	str	r3, [r2, #4]
 8007504:	e7da      	b.n	80074bc <_free_r+0x24>
 8007506:	42a0      	cmp	r0, r4
 8007508:	d902      	bls.n	8007510 <_free_r+0x78>
 800750a:	230c      	movs	r3, #12
 800750c:	602b      	str	r3, [r5, #0]
 800750e:	e7d5      	b.n	80074bc <_free_r+0x24>
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	1821      	adds	r1, r4, r0
 8007514:	428b      	cmp	r3, r1
 8007516:	d103      	bne.n	8007520 <_free_r+0x88>
 8007518:	6819      	ldr	r1, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	1809      	adds	r1, r1, r0
 800751e:	6021      	str	r1, [r4, #0]
 8007520:	6063      	str	r3, [r4, #4]
 8007522:	6054      	str	r4, [r2, #4]
 8007524:	e7ca      	b.n	80074bc <_free_r+0x24>
 8007526:	46c0      	nop			@ (mov r8, r8)
 8007528:	200003bc 	.word	0x200003bc

0800752c <_init>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	46c0      	nop			@ (mov r8, r8)
 8007530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007532:	bc08      	pop	{r3}
 8007534:	469e      	mov	lr, r3
 8007536:	4770      	bx	lr

08007538 <_fini>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	46c0      	nop			@ (mov r8, r8)
 800753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753e:	bc08      	pop	{r3}
 8007540:	469e      	mov	lr, r3
 8007542:	4770      	bx	lr
