
BTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b00  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003bc0  08003bc0  00004bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c2c  08003c2c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c34  08003c34  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c34  08003c34  00004c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c38  08003c38  00004c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08003c48  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003c48  00005138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7a5  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e57  00000000  00000000  000117d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00013630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a6  00000000  00000000  00014160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015397  00000000  00000000  00014a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db34  00000000  00000000  00029d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000846e4  00000000  00000000  000378d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbfb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a0  00000000  00000000  000bbff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000be798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ba8 	.word	0x08003ba8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003ba8 	.word	0x08003ba8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1824      	adds	r4, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	42a3      	cmp	r3, r4
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c23      	lsrs	r3, r4, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0424      	lsls	r4, r4, #16
 8000482:	1960      	adds	r0, r4, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	@ (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b08b      	sub	sp, #44	@ 0x2c
 8000680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	2414      	movs	r4, #20
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	2314      	movs	r3, #20
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f003 fa5f 	bl	8003b50 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b55      	ldr	r3, [pc, #340]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 8000694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000696:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 8000698:	2104      	movs	r1, #4
 800069a:	430a      	orrs	r2, r1
 800069c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800069e:	4b52      	ldr	r3, [pc, #328]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 80006a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a2:	2204      	movs	r2, #4
 80006a4:	4013      	ands	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	4b4f      	ldr	r3, [pc, #316]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 80006ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006ae:	4b4e      	ldr	r3, [pc, #312]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 80006b0:	2180      	movs	r1, #128	@ 0x80
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006b6:	4b4c      	ldr	r3, [pc, #304]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ba:	2280      	movs	r2, #128	@ 0x80
 80006bc:	4013      	ands	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 80006c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006c6:	4b48      	ldr	r3, [pc, #288]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ce:	4b46      	ldr	r3, [pc, #280]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	4b43      	ldr	r3, [pc, #268]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 80006dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006de:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 80006e0:	2102      	movs	r1, #2
 80006e2:	430a      	orrs	r2, r1
 80006e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006e6:	4b40      	ldr	r3, [pc, #256]	@ (80007e8 <MX_GPIO_Init+0x16c>)
 80006e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ea:	2202      	movs	r2, #2
 80006ec:	4013      	ands	r3, r2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CapteurUs1Trig_Pin|cd3_Pin, GPIO_PIN_RESET);
 80006f2:	2382      	movs	r3, #130	@ 0x82
 80006f4:	0159      	lsls	r1, r3, #5
 80006f6:	23a0      	movs	r3, #160	@ 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2200      	movs	r2, #0
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fe74 	bl	80013ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CapteurUs2Trig_GPIO_Port, CapteurUs2Trig_Pin, GPIO_PIN_RESET);
 8000702:	2380      	movs	r3, #128	@ 0x80
 8000704:	015b      	lsls	r3, r3, #5
 8000706:	4839      	ldr	r0, [pc, #228]	@ (80007ec <MX_GPIO_Init+0x170>)
 8000708:	2200      	movs	r2, #0
 800070a:	0019      	movs	r1, r3
 800070c:	f000 fe6d 	bl	80013ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	0192      	lsls	r2, r2, #6
 8000716:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2284      	movs	r2, #132	@ 0x84
 800071c:	0392      	lsls	r2, r2, #14
 800071e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000726:	193b      	adds	r3, r7, r4
 8000728:	4a31      	ldr	r2, [pc, #196]	@ (80007f0 <MX_GPIO_Init+0x174>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f000 fcc1 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CapteurUs1Echo_Pin|cd2_Pin;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2282      	movs	r2, #130	@ 0x82
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	22c4      	movs	r2, #196	@ 0xc4
 800073e:	0392      	lsls	r2, r2, #14
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	193a      	adds	r2, r7, r4
 800074a:	23a0      	movs	r3, #160	@ 0xa0
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fcaf 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CapteurUs1Trig_Pin|cd3_Pin;
 8000756:	0021      	movs	r1, r4
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2282      	movs	r2, #130	@ 0x82
 800075c:	0152      	lsls	r2, r2, #5
 800075e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	000c      	movs	r4, r1
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2201      	movs	r2, #1
 8000766:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	193a      	adds	r2, r7, r4
 8000776:	23a0      	movs	r3, #160	@ 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fc99 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CapteurUs2Echo_Pin;
 8000782:	0021      	movs	r1, r4
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2280      	movs	r2, #128	@ 0x80
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	000c      	movs	r4, r1
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CapteurUs2Echo_GPIO_Port, &GPIO_InitStruct);
 800079a:	193b      	adds	r3, r7, r4
 800079c:	4a13      	ldr	r2, [pc, #76]	@ (80007ec <MX_GPIO_Init+0x170>)
 800079e:	0019      	movs	r1, r3
 80007a0:	0010      	movs	r0, r2
 80007a2:	f000 fc87 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CapteurUs2Trig_Pin;
 80007a6:	0021      	movs	r1, r4
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	0152      	lsls	r2, r2, #5
 80007ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2201      	movs	r2, #1
 80007b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CapteurUs2Trig_GPIO_Port, &GPIO_InitStruct);
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	4a09      	ldr	r2, [pc, #36]	@ (80007ec <MX_GPIO_Init+0x170>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f000 fc73 	bl	80010b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2007      	movs	r0, #7
 80007d4:	f000 fc3c 	bl	8001050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007d8:	2007      	movs	r0, #7
 80007da:	f000 fc4e 	bl	800107a <HAL_NVIC_EnableIRQ>

}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b00b      	add	sp, #44	@ 0x2c
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	40021000 	.word	0x40021000
 80007ec:	50000400 	.word	0x50000400
 80007f0:	50000800 	.word	0x50000800

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fb0e 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f814 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f7ff ff3c 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000804:	f000 fa6a 	bl	8000cdc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000808:	f000 f91e 	bl	8000a48 <MX_TIM2_Init>
  MX_TIM3_Init();
 800080c:	f000 f972 	bl	8000af4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <main+0x30>)
 8000812:	2100      	movs	r1, #0
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fea7 	bl	8002568 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GenerePWM(50);
 800081a:	2032      	movs	r0, #50	@ 0x32
 800081c:	f000 f8a2 	bl	8000964 <GenerePWM>
  while (1)
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	e7fd      	b.n	8000820 <main+0x2c>
 8000824:	2000006c 	.word	0x2000006c

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b09f      	sub	sp, #124	@ 0x7c
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	2440      	movs	r4, #64	@ 0x40
 8000830:	193b      	adds	r3, r7, r4
 8000832:	0018      	movs	r0, r3
 8000834:	2338      	movs	r3, #56	@ 0x38
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f003 f989 	bl	8003b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083e:	232c      	movs	r3, #44	@ 0x2c
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	0018      	movs	r0, r3
 8000844:	2314      	movs	r3, #20
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f003 f981 	bl	8003b50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	0018      	movs	r0, r3
 8000852:	2328      	movs	r3, #40	@ 0x28
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f003 f97a 	bl	8003b50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <SystemClock_Config+0xc8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a24      	ldr	r2, [pc, #144]	@ (80008f4 <SystemClock_Config+0xcc>)
 8000862:	401a      	ands	r2, r3
 8000864:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <SystemClock_Config+0xc8>)
 8000866:	2180      	movs	r1, #128	@ 0x80
 8000868:	0109      	lsls	r1, r1, #4
 800086a:	430a      	orrs	r2, r1
 800086c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086e:	0021      	movs	r1, r4
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2202      	movs	r2, #2
 8000874:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2201      	movs	r2, #1
 800087a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2210      	movs	r2, #16
 8000880:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	187b      	adds	r3, r7, r1
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fde6 	bl	800145c <HAL_RCC_OscConfig>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000894:	f000 f880 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	212c      	movs	r1, #44	@ 0x2c
 800089a:	187b      	adds	r3, r7, r1
 800089c:	220f      	movs	r2, #15
 800089e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2201      	movs	r2, #1
 80008a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	22e0      	movs	r2, #224	@ 0xe0
 80008b0:	00d2      	lsls	r2, r2, #3
 80008b2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2100      	movs	r1, #0
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 f9a0 	bl	8001c04 <HAL_RCC_ClockConfig>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008c8:	f000 f866 	bl	8000998 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2202      	movs	r2, #2
 80008d0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fbb6 	bl	800204c <HAL_RCCEx_PeriphCLKConfig>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008e4:	f000 f858 	bl	8000998 <Error_Handler>
  }
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b01f      	add	sp, #124	@ 0x7c
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	40007000 	.word	0x40007000
 80008f4:	ffffe7ff 	.word	0xffffe7ff

080008f8 <HAL_GPIO_EXTI_Callback>:
	//Sortie Etat Bas
	HAL_GPIO_WritePin(CapteurUs1Trig_GPIO_Port, CapteurUs1Trig_Pin, GPIO_PIN_RESET);
}

//Callback lors d'interruptions sur EXTI 4:15
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	0002      	movs	r2, r0
 8000900:	1dbb      	adds	r3, r7, #6
 8000902:	801a      	strh	r2, [r3, #0]
    // Vérifie quel pin a déclenché l'interruption
    if (GPIO_Pin == CapteurUs1Echo_Pin) {
 8000904:	1dbb      	adds	r3, r7, #6
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	2b20      	cmp	r3, #32
 800090a:	d123      	bne.n	8000954 <HAL_GPIO_EXTI_Callback+0x5c>

    	//Verif rising
        if (HAL_GPIO_ReadPin(CapteurUs1Trig_GPIO_Port, CapteurUs1Echo_Pin) == GPIO_PIN_SET){
 800090c:	23a0      	movs	r3, #160	@ 0xa0
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	2120      	movs	r1, #32
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fd4c 	bl	80013b0 <HAL_GPIO_ReadPin>
 8000918:	0003      	movs	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d104      	bne.n	8000928 <HAL_GPIO_EXTI_Callback+0x30>
        	//Lancer le timer
        	HAL_TIM_Base_Start(&htim2);
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <HAL_GPIO_EXTI_Callback+0x64>)
 8000920:	0018      	movs	r0, r3
 8000922:	f001 fd71 	bl	8002408 <HAL_TIM_Base_Start>
        	g_int_distCapteurUs1 = TIM2->CNT;
        	TIM2->CNT = 0;

        }
    }
}
 8000926:	e015      	b.n	8000954 <HAL_GPIO_EXTI_Callback+0x5c>
        else if (HAL_GPIO_ReadPin(CapteurUs1Trig_GPIO_Port, CapteurUs1Echo_Pin) == GPIO_PIN_RESET){
 8000928:	23a0      	movs	r3, #160	@ 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	2120      	movs	r1, #32
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fd3e 	bl	80013b0 <HAL_GPIO_ReadPin>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d10d      	bne.n	8000954 <HAL_GPIO_EXTI_Callback+0x5c>
        	HAL_TIM_Base_Stop(&htim2);
 8000938:	4b08      	ldr	r3, [pc, #32]	@ (800095c <HAL_GPIO_EXTI_Callback+0x64>)
 800093a:	0018      	movs	r0, r3
 800093c:	f001 fdae 	bl	800249c <HAL_TIM_Base_Stop>
        	g_int_distCapteurUs1 = TIM2->CNT;
 8000940:	2380      	movs	r3, #128	@ 0x80
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000946:	001a      	movs	r2, r3
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x68>)
 800094a:	601a      	str	r2, [r3, #0]
        	TIM2->CNT = 0;
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b002      	add	sp, #8
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000002c 	.word	0x2000002c
 8000960:	20000028 	.word	0x20000028

08000964 <GenerePWM>:

//Genere le signal PWM a 25kHz pour le moteur via TIM3
void GenerePWM(int x_int_alpha){
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	//Conversion de alpha en temps d'etat haut
	int l_int_tempsHaut = (x_int_alpha/100)*40;	//le 40 est en us car periode du timer (tick) est ici de 1us
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2164      	movs	r1, #100	@ 0x64
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff fc53 	bl	800021c <__divsi3>
 8000976:	0003      	movs	r3, r0
 8000978:	001a      	movs	r2, r3
 800097a:	0013      	movs	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	189b      	adds	r3, r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, l_int_tempsHaut);
 8000984:	4b03      	ldr	r3, [pc, #12]	@ (8000994 <GenerePWM+0x30>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b004      	add	sp, #16
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000006c 	.word	0x2000006c

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	e7fd      	b.n	80009a0 <Error_Handler+0x8>

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a8:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <HAL_MspInit+0x24>)
 80009aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_MspInit+0x24>)
 80009ae:	2101      	movs	r1, #1
 80009b0:	430a      	orrs	r2, r1
 80009b2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b4:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <HAL_MspInit+0x24>)
 80009b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <HAL_MspInit+0x24>)
 80009ba:	2180      	movs	r1, #128	@ 0x80
 80009bc:	0549      	lsls	r1, r1, #21
 80009be:	430a      	orrs	r2, r1
 80009c0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	e7fd      	b.n	80009d0 <NMI_Handler+0x4>

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	e7fd      	b.n	80009d8 <HardFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 fa64 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CapteurUs1Echo_Pin);
 8000a02:	2020      	movs	r0, #32
 8000a04:	f000 fd0e 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(cd2_Pin);
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 fd09 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a12:	2380      	movs	r3, #128	@ 0x80
 8000a14:	019b      	lsls	r3, r3, #6
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fd04 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */


  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <TIM2_IRQHandler+0x14>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 fe2e 	bl	800268c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	2000002c 	.word	0x2000002c

08000a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	2308      	movs	r3, #8
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	0018      	movs	r0, r3
 8000a54:	2310      	movs	r3, #16
 8000a56:	001a      	movs	r2, r3
 8000a58:	2100      	movs	r1, #0
 8000a5a:	f003 f879 	bl	8003b50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5e:	003b      	movs	r3, r7
 8000a60:	0018      	movs	r0, r3
 8000a62:	2308      	movs	r3, #8
 8000a64:	001a      	movs	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	f003 f872 	bl	8003b50 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <MX_TIM2_Init+0xa4>)
 8000a6e:	2280      	movs	r2, #128	@ 0x80
 8000a70:	05d2      	lsls	r2, r2, #23
 8000a72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_TIM2_Init+0xa4>)
 8000a76:	2280      	movs	r2, #128	@ 0x80
 8000a78:	00d2      	lsls	r2, r2, #3
 8000a7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <MX_TIM2_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_TIM2_Init+0xa4>)
 8000a84:	4a1a      	ldr	r2, [pc, #104]	@ (8000af0 <MX_TIM2_Init+0xa8>)
 8000a86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <MX_TIM2_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_TIM2_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_TIM2_Init+0xa4>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 fc76 	bl	8002388 <HAL_TIM_Base_Init>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000aa0:	f7ff ff7a 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2280      	movs	r2, #128	@ 0x80
 8000aaa:	0152      	lsls	r2, r2, #5
 8000aac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aae:	187a      	adds	r2, r7, r1
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_TIM2_Init+0xa4>)
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 ff97 	bl	80029e8 <HAL_TIM_ConfigClockSource>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000abe:	f7ff ff6b 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ace:	003a      	movs	r2, r7
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_TIM2_Init+0xa4>)
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f002 faa3 	bl	8003020 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ade:	f7ff ff5b 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b006      	add	sp, #24
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	2000002c 	.word	0x2000002c
 8000af0:	0000ffff 	.word	0x0000ffff

08000af4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	2318      	movs	r3, #24
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	0018      	movs	r0, r3
 8000b00:	2310      	movs	r3, #16
 8000b02:	001a      	movs	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	f003 f823 	bl	8003b50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	0018      	movs	r0, r3
 8000b10:	2308      	movs	r3, #8
 8000b12:	001a      	movs	r2, r3
 8000b14:	2100      	movs	r1, #0
 8000b16:	f003 f81b 	bl	8003b50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	2310      	movs	r3, #16
 8000b20:	001a      	movs	r2, r3
 8000b22:	2100      	movs	r1, #0
 8000b24:	f003 f814 	bl	8003b50 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b28:	4b34      	ldr	r3, [pc, #208]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000b2a:	4a35      	ldr	r2, [pc, #212]	@ (8000c00 <MX_TIM3_Init+0x10c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b2e:	4b33      	ldr	r3, [pc, #204]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b34:	4b31      	ldr	r3, [pc, #196]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b3a:	4b30      	ldr	r3, [pc, #192]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000b3c:	4a31      	ldr	r2, [pc, #196]	@ (8000c04 <MX_TIM3_Init+0x110>)
 8000b3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b40:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b2d      	ldr	r3, [pc, #180]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 fc1a 	bl	8002388 <HAL_TIM_Base_Init>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b58:	f7ff ff1e 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5c:	2118      	movs	r1, #24
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	0152      	lsls	r2, r2, #5
 8000b64:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b66:	187a      	adds	r2, r7, r1
 8000b68:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f001 ff3b 	bl	80029e8 <HAL_TIM_ConfigClockSource>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b76:	f7ff ff0f 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f001 fcab 	bl	80024d8 <HAL_TIM_PWM_Init>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b86:	f7ff ff07 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b98:	187a      	adds	r2, r7, r1
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f002 fa3e 	bl	8003020 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000ba8:	f7ff fef6 	bl	8000998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	003b      	movs	r3, r7
 8000bae:	2260      	movs	r2, #96	@ 0x60
 8000bb0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bb2:	003b      	movs	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb8:	003b      	movs	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc4:	0039      	movs	r1, r7
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 fe46 	bl	800285c <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000bd4:	f7ff fee0 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000bda:	2104      	movs	r1, #4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 fa7d 	bl	80030dc <HAL_TIMEx_RemapConfig>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8000be6:	f7ff fed7 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bea:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <MX_TIM3_Init+0x108>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 f837 	bl	8000c60 <HAL_TIM_MspPostInit>

}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b00a      	add	sp, #40	@ 0x28
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	2000006c 	.word	0x2000006c
 8000c00:	40000400 	.word	0x40000400
 8000c04:	0000ffff 	.word	0x0000ffff

08000c08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	2380      	movs	r3, #128	@ 0x80
 8000c16:	05db      	lsls	r3, r3, #23
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d10e      	bne.n	8000c3a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_TIM_Base_MspInit+0x50>)
 8000c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c20:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <HAL_TIM_Base_MspInit+0x50>)
 8000c22:	2101      	movs	r1, #1
 8000c24:	430a      	orrs	r2, r1
 8000c26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	200f      	movs	r0, #15
 8000c2e:	f000 fa0f 	bl	8001050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c32:	200f      	movs	r0, #15
 8000c34:	f000 fa21 	bl	800107a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c38:	e00a      	b.n	8000c50 <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM3)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_TIM_Base_MspInit+0x54>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d105      	bne.n	8000c50 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c44:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <HAL_TIM_Base_MspInit+0x50>)
 8000c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <HAL_TIM_Base_MspInit+0x50>)
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40000400 	.word	0x40000400

08000c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	240c      	movs	r4, #12
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	2314      	movs	r3, #20
 8000c70:	001a      	movs	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	f002 ff6c 	bl	8003b50 <memset>
  if(timHandle->Instance==TIM3)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <HAL_TIM_MspPostInit+0x70>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d121      	bne.n	8000cc6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <HAL_TIM_MspPostInit+0x74>)
 8000c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <HAL_TIM_MspPostInit+0x74>)
 8000c88:	2104      	movs	r1, #4
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <HAL_TIM_MspPostInit+0x74>)
 8000c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c92:	2204      	movs	r2, #4
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c9a:	0021      	movs	r1, r4
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2240      	movs	r2, #64	@ 0x40
 8000ca0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_TIM_MspPostInit+0x78>)
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	0010      	movs	r0, r2
 8000cc2:	f000 f9f7 	bl	80010b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b009      	add	sp, #36	@ 0x24
 8000ccc:	bd90      	pop	{r4, r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	40000400 	.word	0x40000400
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	50000800 	.word	0x50000800

08000cdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000ce2:	4a15      	ldr	r2, [pc, #84]	@ (8000d38 <MX_USART2_UART_Init+0x5c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000ce8:	2296      	movs	r2, #150	@ 0x96
 8000cea:	0192      	lsls	r2, r2, #6
 8000cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1e:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d20:	0018      	movs	r0, r3
 8000d22:	f002 f9f9 	bl	8003118 <HAL_UART_Init>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f7ff fe35 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200000ac 	.word	0x200000ac
 8000d38:	40004400 	.word	0x40004400

08000d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	240c      	movs	r4, #12
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f002 fefe 	bl	8003b50 <memset>
  if(uartHandle->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a18      	ldr	r2, [pc, #96]	@ (8000dbc <HAL_UART_MspInit+0x80>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d129      	bne.n	8000db2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <HAL_UART_MspInit+0x84>)
 8000d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <HAL_UART_MspInit+0x84>)
 8000d64:	2180      	movs	r1, #128	@ 0x80
 8000d66:	0289      	lsls	r1, r1, #10
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_UART_MspInit+0x84>)
 8000d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d70:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <HAL_UART_MspInit+0x84>)
 8000d72:	2101      	movs	r1, #1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_UART_MspInit+0x84>)
 8000d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d84:	0021      	movs	r1, r4
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	220c      	movs	r2, #12
 8000d8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2202      	movs	r2, #2
 8000d90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2204      	movs	r2, #4
 8000da2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	187a      	adds	r2, r7, r1
 8000da6:	23a0      	movs	r3, #160	@ 0xa0
 8000da8:	05db      	lsls	r3, r3, #23
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 f981 	bl	80010b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b009      	add	sp, #36	@ 0x24
 8000db8:	bd90      	pop	{r4, r7, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc8:	f7ff fe38 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000df2:	f002 feb5 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fcfd 	bl	80007f4 <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
   ldr   r0, =_estack
 8000dfc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e08:	08003c3c 	.word	0x08003c3c
  ldr r2, =_sbss
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e10:	20000138 	.word	0x20000138

08000e14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_COMP_IRQHandler>
	...

08000e18 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <HAL_Init+0x3c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <HAL_Init+0x3c>)
 8000e2a:	2140      	movs	r1, #64	@ 0x40
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e30:	2000      	movs	r0, #0
 8000e32:	f000 f811 	bl	8000e58 <HAL_InitTick>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e001      	b.n	8000e46 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e42:	f7ff fdaf 	bl	80009a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_InitTick+0x5c>)
 8000e62:	681c      	ldr	r4, [r3, #0]
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_InitTick+0x60>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	0019      	movs	r1, r3
 8000e6a:	23fa      	movs	r3, #250	@ 0xfa
 8000e6c:	0098      	lsls	r0, r3, #2
 8000e6e:	f7ff f94b 	bl	8000108 <__udivsi3>
 8000e72:	0003      	movs	r3, r0
 8000e74:	0019      	movs	r1, r3
 8000e76:	0020      	movs	r0, r4
 8000e78:	f7ff f946 	bl	8000108 <__udivsi3>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 f90b 	bl	800109a <HAL_SYSTICK_Config>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e00f      	b.n	8000eac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d80b      	bhi.n	8000eaa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	2301      	movs	r3, #1
 8000e96:	425b      	negs	r3, r3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f8d8 	bl	8001050 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_InitTick+0x64>)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_IncTick+0x1c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	001a      	movs	r2, r3
 8000eca:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	18d2      	adds	r2, r2, r3
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000134 	.word	0x20000134

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b02      	ldr	r3, [pc, #8]	@ (8000ef4 <HAL_GetTick+0x10>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	20000134 	.word	0x20000134

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	0002      	movs	r2, r0
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f0a:	d809      	bhi.n	8000f20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	001a      	movs	r2, r3
 8000f12:	231f      	movs	r3, #31
 8000f14:	401a      	ands	r2, r3
 8000f16:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_EnableIRQ+0x30>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4091      	lsls	r1, r2
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
  }
}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	0002      	movs	r2, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f40:	d828      	bhi.n	8000f94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f42:	4a2f      	ldr	r2, [pc, #188]	@ (8001000 <__NVIC_SetPriority+0xd4>)
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	33c0      	adds	r3, #192	@ 0xc0
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	589b      	ldr	r3, [r3, r2]
 8000f52:	1dfa      	adds	r2, r7, #7
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	0011      	movs	r1, r2
 8000f58:	2203      	movs	r2, #3
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	00d2      	lsls	r2, r2, #3
 8000f5e:	21ff      	movs	r1, #255	@ 0xff
 8000f60:	4091      	lsls	r1, r2
 8000f62:	000a      	movs	r2, r1
 8000f64:	43d2      	mvns	r2, r2
 8000f66:	401a      	ands	r2, r3
 8000f68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	019b      	lsls	r3, r3, #6
 8000f6e:	22ff      	movs	r2, #255	@ 0xff
 8000f70:	401a      	ands	r2, r3
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	0018      	movs	r0, r3
 8000f78:	2303      	movs	r3, #3
 8000f7a:	4003      	ands	r3, r0
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f80:	481f      	ldr	r0, [pc, #124]	@ (8001000 <__NVIC_SetPriority+0xd4>)
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	33c0      	adds	r3, #192	@ 0xc0
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f92:	e031      	b.n	8000ff8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f94:	4a1b      	ldr	r2, [pc, #108]	@ (8001004 <__NVIC_SetPriority+0xd8>)
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	3b08      	subs	r3, #8
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3306      	adds	r3, #6
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	18d3      	adds	r3, r2, r3
 8000faa:	3304      	adds	r3, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1dfa      	adds	r2, r7, #7
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	00d2      	lsls	r2, r2, #3
 8000fba:	21ff      	movs	r1, #255	@ 0xff
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	000a      	movs	r2, r1
 8000fc0:	43d2      	mvns	r2, r2
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	22ff      	movs	r2, #255	@ 0xff
 8000fcc:	401a      	ands	r2, r3
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	4003      	ands	r3, r0
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fdc:	4809      	ldr	r0, [pc, #36]	@ (8001004 <__NVIC_SetPriority+0xd8>)
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	001c      	movs	r4, r3
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	4023      	ands	r3, r4
 8000fe8:	3b08      	subs	r3, #8
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	430a      	orrs	r2, r1
 8000fee:	3306      	adds	r3, #6
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	18c3      	adds	r3, r0, r3
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	601a      	str	r2, [r3, #0]
}
 8000ff8:	46c0      	nop			@ (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b003      	add	sp, #12
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	1e5a      	subs	r2, r3, #1
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	045b      	lsls	r3, r3, #17
 8001018:	429a      	cmp	r2, r3
 800101a:	d301      	bcc.n	8001020 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101c:	2301      	movs	r3, #1
 800101e:	e010      	b.n	8001042 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <SysTick_Config+0x44>)
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	3a01      	subs	r2, #1
 8001026:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001028:	2301      	movs	r3, #1
 800102a:	425b      	negs	r3, r3
 800102c:	2103      	movs	r1, #3
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff ff7c 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <SysTick_Config+0x44>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	@ (800104c <SysTick_Config+0x44>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	210f      	movs	r1, #15
 800105c:	187b      	adds	r3, r7, r1
 800105e:	1c02      	adds	r2, r0, #0
 8001060:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	187b      	adds	r3, r7, r1
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b25b      	sxtb	r3, r3
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ff5d 	bl	8000f2c <__NVIC_SetPriority>
}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	0002      	movs	r2, r0
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b25b      	sxtb	r3, r3
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff ff33 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff ffaf 	bl	8001008 <SysTick_Config>
 80010aa:	0003      	movs	r3, r0
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010ca:	e155      	b.n	8001378 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2101      	movs	r1, #1
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4091      	lsls	r1, r2
 80010d6:	000a      	movs	r2, r1
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d100      	bne.n	80010e4 <HAL_GPIO_Init+0x30>
 80010e2:	e146      	b.n	8001372 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d005      	beq.n	80010fc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d130      	bne.n	800115e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	409a      	lsls	r2, r3
 800110a:	0013      	movs	r3, r2
 800110c:	43da      	mvns	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	409a      	lsls	r2, r3
 800111e:	0013      	movs	r3, r2
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001132:	2201      	movs	r2, #1
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	43da      	mvns	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	2201      	movs	r2, #1
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2203      	movs	r2, #3
 8001164:	4013      	ands	r3, r2
 8001166:	2b03      	cmp	r3, #3
 8001168:	d017      	beq.n	800119a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2203      	movs	r2, #3
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d123      	bne.n	80011ee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	58d3      	ldr	r3, [r2, r3]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2207      	movs	r2, #7
 80011b8:	4013      	ands	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	43da      	mvns	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2107      	movs	r1, #7
 80011d2:	400b      	ands	r3, r1
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	08da      	lsrs	r2, r3, #3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3208      	adds	r2, #8
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	6939      	ldr	r1, [r7, #16]
 80011ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2203      	movs	r2, #3
 800120c:	401a      	ands	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	23c0      	movs	r3, #192	@ 0xc0
 8001228:	029b      	lsls	r3, r3, #10
 800122a:	4013      	ands	r3, r2
 800122c:	d100      	bne.n	8001230 <HAL_GPIO_Init+0x17c>
 800122e:	e0a0      	b.n	8001372 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001230:	4b57      	ldr	r3, [pc, #348]	@ (8001390 <HAL_GPIO_Init+0x2dc>)
 8001232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001234:	4b56      	ldr	r3, [pc, #344]	@ (8001390 <HAL_GPIO_Init+0x2dc>)
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800123c:	4a55      	ldr	r2, [pc, #340]	@ (8001394 <HAL_GPIO_Init+0x2e0>)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	589b      	ldr	r3, [r3, r2]
 8001248:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2203      	movs	r2, #3
 800124e:	4013      	ands	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	43da      	mvns	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	23a0      	movs	r3, #160	@ 0xa0
 8001264:	05db      	lsls	r3, r3, #23
 8001266:	429a      	cmp	r2, r3
 8001268:	d01f      	beq.n	80012aa <HAL_GPIO_Init+0x1f6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <HAL_GPIO_Init+0x2e4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x1f2>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a49      	ldr	r2, [pc, #292]	@ (800139c <HAL_GPIO_Init+0x2e8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x1ee>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a48      	ldr	r2, [pc, #288]	@ (80013a0 <HAL_GPIO_Init+0x2ec>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x1ea>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a47      	ldr	r2, [pc, #284]	@ (80013a4 <HAL_GPIO_Init+0x2f0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x1e6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a46      	ldr	r2, [pc, #280]	@ (80013a8 <HAL_GPIO_Init+0x2f4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x1e2>
 8001292:	2305      	movs	r3, #5
 8001294:	e00a      	b.n	80012ac <HAL_GPIO_Init+0x1f8>
 8001296:	2306      	movs	r3, #6
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x1f8>
 800129a:	2304      	movs	r3, #4
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x1f8>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x1f8>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x1f8>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x1f8>
 80012aa:	2300      	movs	r3, #0
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	2103      	movs	r1, #3
 80012b0:	400a      	ands	r2, r1
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	4935      	ldr	r1, [pc, #212]	@ (8001394 <HAL_GPIO_Init+0x2e0>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	035b      	lsls	r3, r3, #13
 80012e2:	4013      	ands	r3, r2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ee:	4b2f      	ldr	r3, [pc, #188]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	2380      	movs	r3, #128	@ 0x80
 800130a:	039b      	lsls	r3, r3, #14
 800130c:	4013      	ands	r3, r2
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001318:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43da      	mvns	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	2380      	movs	r3, #128	@ 0x80
 8001334:	029b      	lsls	r3, r3, #10
 8001336:	4013      	ands	r3, r2
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43da      	mvns	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	025b      	lsls	r3, r3, #9
 8001360:	4013      	ands	r3, r2
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	40da      	lsrs	r2, r3
 8001380:	1e13      	subs	r3, r2, #0
 8001382:	d000      	beq.n	8001386 <HAL_GPIO_Init+0x2d2>
 8001384:	e6a2      	b.n	80010cc <HAL_GPIO_Init+0x18>
  }
}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	46c0      	nop			@ (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b006      	add	sp, #24
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	50000400 	.word	0x50000400
 800139c:	50000800 	.word	0x50000800
 80013a0:	50000c00 	.word	0x50000c00
 80013a4:	50001000 	.word	0x50001000
 80013a8:	50001c00 	.word	0x50001c00
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	000a      	movs	r2, r1
 80013ba:	1cbb      	adds	r3, r7, #2
 80013bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	1cba      	adds	r2, r7, #2
 80013c4:	8812      	ldrh	r2, [r2, #0]
 80013c6:	4013      	ands	r3, r2
 80013c8:	d004      	beq.n	80013d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80013ca:	230f      	movs	r3, #15
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	e003      	b.n	80013dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013d4:	230f      	movs	r3, #15
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013dc:	230f      	movs	r3, #15
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	781b      	ldrb	r3, [r3, #0]
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	0008      	movs	r0, r1
 80013f4:	0011      	movs	r1, r2
 80013f6:	1cbb      	adds	r3, r7, #2
 80013f8:	1c02      	adds	r2, r0, #0
 80013fa:	801a      	strh	r2, [r3, #0]
 80013fc:	1c7b      	adds	r3, r7, #1
 80013fe:	1c0a      	adds	r2, r1, #0
 8001400:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001402:	1c7b      	adds	r3, r7, #1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140a:	1cbb      	adds	r3, r7, #2
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001412:	e003      	b.n	800141c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001414:	1cbb      	adds	r3, r7, #2
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	0002      	movs	r2, r0
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	1dba      	adds	r2, r7, #6
 8001436:	8812      	ldrh	r2, [r2, #0]
 8001438:	4013      	ands	r3, r2
 800143a:	d008      	beq.n	800144e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800143e:	1dba      	adds	r2, r7, #6
 8001440:	8812      	ldrh	r2, [r2, #0]
 8001442:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001444:	1dbb      	adds	r3, r7, #6
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff fa55 	bl	80008f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	f000 fbbf 	bl	8001bee <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001470:	4bc9      	ldr	r3, [pc, #804]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	220c      	movs	r2, #12
 8001476:	4013      	ands	r3, r2
 8001478:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800147a:	4bc7      	ldr	r3, [pc, #796]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	025b      	lsls	r3, r3, #9
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2201      	movs	r2, #1
 800148c:	4013      	ands	r3, r2
 800148e:	d100      	bne.n	8001492 <HAL_RCC_OscConfig+0x36>
 8001490:	e07e      	b.n	8001590 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	2b08      	cmp	r3, #8
 8001496:	d007      	beq.n	80014a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b0c      	cmp	r3, #12
 800149c:	d112      	bne.n	80014c4 <HAL_RCC_OscConfig+0x68>
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	2380      	movs	r3, #128	@ 0x80
 80014a2:	025b      	lsls	r3, r3, #9
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d10d      	bne.n	80014c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	4bbb      	ldr	r3, [pc, #748]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	029b      	lsls	r3, r3, #10
 80014b0:	4013      	ands	r3, r2
 80014b2:	d100      	bne.n	80014b6 <HAL_RCC_OscConfig+0x5a>
 80014b4:	e06b      	b.n	800158e <HAL_RCC_OscConfig+0x132>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d167      	bne.n	800158e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	f000 fb95 	bl	8001bee <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	025b      	lsls	r3, r3, #9
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d107      	bne.n	80014e0 <HAL_RCC_OscConfig+0x84>
 80014d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4bb0      	ldr	r3, [pc, #704]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80014d6:	2180      	movs	r1, #128	@ 0x80
 80014d8:	0249      	lsls	r1, r1, #9
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e027      	b.n	8001530 <HAL_RCC_OscConfig+0xd4>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	23a0      	movs	r3, #160	@ 0xa0
 80014e6:	02db      	lsls	r3, r3, #11
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d10e      	bne.n	800150a <HAL_RCC_OscConfig+0xae>
 80014ec:	4baa      	ldr	r3, [pc, #680]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4ba9      	ldr	r3, [pc, #676]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80014f2:	2180      	movs	r1, #128	@ 0x80
 80014f4:	02c9      	lsls	r1, r1, #11
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	4ba7      	ldr	r3, [pc, #668]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4ba6      	ldr	r3, [pc, #664]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	0249      	lsls	r1, r1, #9
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e012      	b.n	8001530 <HAL_RCC_OscConfig+0xd4>
 800150a:	4ba3      	ldr	r3, [pc, #652]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4ba2      	ldr	r3, [pc, #648]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001510:	49a2      	ldr	r1, [pc, #648]	@ (800179c <HAL_RCC_OscConfig+0x340>)
 8001512:	400a      	ands	r2, r1
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	4ba0      	ldr	r3, [pc, #640]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	4013      	ands	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4b9c      	ldr	r3, [pc, #624]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b9b      	ldr	r3, [pc, #620]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 800152a:	499d      	ldr	r1, [pc, #628]	@ (80017a0 <HAL_RCC_OscConfig+0x344>)
 800152c:	400a      	ands	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d015      	beq.n	8001564 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fcd4 	bl	8000ee4 <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001540:	e009      	b.n	8001556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001542:	f7ff fccf 	bl	8000ee4 <HAL_GetTick>
 8001546:	0002      	movs	r2, r0
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b64      	cmp	r3, #100	@ 0x64
 800154e:	d902      	bls.n	8001556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	f000 fb4c 	bl	8001bee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001556:	4b90      	ldr	r3, [pc, #576]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	029b      	lsls	r3, r3, #10
 800155e:	4013      	ands	r3, r2
 8001560:	d0ef      	beq.n	8001542 <HAL_RCC_OscConfig+0xe6>
 8001562:	e015      	b.n	8001590 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fcbe 	bl	8000ee4 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156e:	f7ff fcb9 	bl	8000ee4 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b64      	cmp	r3, #100	@ 0x64
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e336      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001580:	4b85      	ldr	r3, [pc, #532]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	4013      	ands	r3, r2
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x112>
 800158c:	e000      	b.n	8001590 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d100      	bne.n	800159c <HAL_RCC_OscConfig+0x140>
 800159a:	e099      	b.n	80016d0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	2220      	movs	r2, #32
 80015a6:	4013      	ands	r3, r2
 80015a8:	d009      	beq.n	80015be <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80015aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80015b0:	2120      	movs	r1, #32
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	2220      	movs	r2, #32
 80015ba:	4393      	bics	r3, r2
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d13e      	bne.n	8001648 <HAL_RCC_OscConfig+0x1ec>
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d13b      	bne.n	8001648 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015d0:	4b71      	ldr	r3, [pc, #452]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2204      	movs	r2, #4
 80015d6:	4013      	ands	r3, r2
 80015d8:	d004      	beq.n	80015e4 <HAL_RCC_OscConfig+0x188>
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e304      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a6e      	ldr	r2, [pc, #440]	@ (80017a4 <HAL_RCC_OscConfig+0x348>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	021a      	lsls	r2, r3, #8
 80015f4:	4b68      	ldr	r3, [pc, #416]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015fa:	4b67      	ldr	r3, [pc, #412]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2209      	movs	r2, #9
 8001600:	4393      	bics	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	4b64      	ldr	r3, [pc, #400]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800160c:	f000 fc42 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001610:	0001      	movs	r1, r0
 8001612:	4b61      	ldr	r3, [pc, #388]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	220f      	movs	r2, #15
 800161a:	4013      	ands	r3, r2
 800161c:	4a62      	ldr	r2, [pc, #392]	@ (80017a8 <HAL_RCC_OscConfig+0x34c>)
 800161e:	5cd3      	ldrb	r3, [r2, r3]
 8001620:	000a      	movs	r2, r1
 8001622:	40da      	lsrs	r2, r3
 8001624:	4b61      	ldr	r3, [pc, #388]	@ (80017ac <HAL_RCC_OscConfig+0x350>)
 8001626:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001628:	4b61      	ldr	r3, [pc, #388]	@ (80017b0 <HAL_RCC_OscConfig+0x354>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2513      	movs	r5, #19
 800162e:	197c      	adds	r4, r7, r5
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff fc11 	bl	8000e58 <HAL_InitTick>
 8001636:	0003      	movs	r3, r0
 8001638:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800163a:	197b      	adds	r3, r7, r5
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d046      	beq.n	80016d0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001642:	197b      	adds	r3, r7, r5
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	e2d2      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164a:	2b00      	cmp	r3, #0
 800164c:	d027      	beq.n	800169e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800164e:	4b52      	ldr	r3, [pc, #328]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2209      	movs	r2, #9
 8001654:	4393      	bics	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	4b4f      	ldr	r3, [pc, #316]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 800165a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fc40 	bl	8000ee4 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fc3b 	bl	8000ee4 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e2b8      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800167c:	4b46      	ldr	r3, [pc, #280]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2204      	movs	r2, #4
 8001682:	4013      	ands	r3, r2
 8001684:	d0f1      	beq.n	800166a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	4b44      	ldr	r3, [pc, #272]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4a46      	ldr	r2, [pc, #280]	@ (80017a4 <HAL_RCC_OscConfig+0x348>)
 800168c:	4013      	ands	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	021a      	lsls	r2, r3, #8
 8001696:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	e018      	b.n	80016d0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b3e      	ldr	r3, [pc, #248]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	438a      	bics	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fc1b 	bl	8000ee4 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b4:	f7ff fc16 	bl	8000ee4 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e293      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2204      	movs	r2, #4
 80016cc:	4013      	ands	r3, r2
 80016ce:	d1f1      	bne.n	80016b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2210      	movs	r2, #16
 80016d6:	4013      	ands	r3, r2
 80016d8:	d100      	bne.n	80016dc <HAL_RCC_OscConfig+0x280>
 80016da:	e0a2      	b.n	8001822 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d140      	bne.n	8001764 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	2380      	movs	r3, #128	@ 0x80
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x29e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e279      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fa:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a2d      	ldr	r2, [pc, #180]	@ (80017b4 <HAL_RCC_OscConfig+0x358>)
 8001700:	4013      	ands	r3, r2
 8001702:	0019      	movs	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001708:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170e:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	0a19      	lsrs	r1, r3, #8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	061a      	lsls	r2, r3, #24
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	0b5b      	lsrs	r3, r3, #13
 8001728:	3301      	adds	r3, #1
 800172a:	2280      	movs	r2, #128	@ 0x80
 800172c:	0212      	lsls	r2, r2, #8
 800172e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	210f      	movs	r1, #15
 8001738:	400b      	ands	r3, r1
 800173a:	491b      	ldr	r1, [pc, #108]	@ (80017a8 <HAL_RCC_OscConfig+0x34c>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_RCC_OscConfig+0x350>)
 8001742:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <HAL_RCC_OscConfig+0x354>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2513      	movs	r5, #19
 800174a:	197c      	adds	r4, r7, r5
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff fb83 	bl	8000e58 <HAL_InitTick>
 8001752:	0003      	movs	r3, r0
 8001754:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001756:	197b      	adds	r3, r7, r5
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d061      	beq.n	8001822 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800175e:	197b      	adds	r3, r7, r5
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	e244      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d040      	beq.n	80017ee <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001772:	2180      	movs	r1, #128	@ 0x80
 8001774:	0049      	lsls	r1, r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fbb3 	bl	8000ee4 <HAL_GetTick>
 800177e:	0003      	movs	r3, r0
 8001780:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001782:	e019      	b.n	80017b8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001784:	f7ff fbae 	bl	8000ee4 <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d912      	bls.n	80017b8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e22b      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	40021000 	.word	0x40021000
 800179c:	fffeffff 	.word	0xfffeffff
 80017a0:	fffbffff 	.word	0xfffbffff
 80017a4:	ffffe0ff 	.word	0xffffe0ff
 80017a8:	08003bc0 	.word	0x08003bc0
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000004 	.word	0x20000004
 80017b4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017b8:	4bca      	ldr	r3, [pc, #808]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2380      	movs	r3, #128	@ 0x80
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	d0df      	beq.n	8001784 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c4:	4bc7      	ldr	r3, [pc, #796]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4ac7      	ldr	r2, [pc, #796]	@ (8001ae8 <HAL_RCC_OscConfig+0x68c>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017d2:	4bc4      	ldr	r3, [pc, #784]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017d8:	4bc2      	ldr	r3, [pc, #776]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	0a19      	lsrs	r1, r3, #8
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	061a      	lsls	r2, r3, #24
 80017e6:	4bbf      	ldr	r3, [pc, #764]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	e019      	b.n	8001822 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ee:	4bbd      	ldr	r3, [pc, #756]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4bbc      	ldr	r3, [pc, #752]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80017f4:	49bd      	ldr	r1, [pc, #756]	@ (8001aec <HAL_RCC_OscConfig+0x690>)
 80017f6:	400a      	ands	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff fb73 	bl	8000ee4 <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001804:	f7ff fb6e 	bl	8000ee4 <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1eb      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001816:	4bb3      	ldr	r3, [pc, #716]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2380      	movs	r3, #128	@ 0x80
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4013      	ands	r3, r2
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2208      	movs	r2, #8
 8001828:	4013      	ands	r3, r2
 800182a:	d036      	beq.n	800189a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d019      	beq.n	8001868 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001834:	4bab      	ldr	r3, [pc, #684]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001836:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001838:	4baa      	ldr	r3, [pc, #680]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800183a:	2101      	movs	r1, #1
 800183c:	430a      	orrs	r2, r1
 800183e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001840:	f7ff fb50 	bl	8000ee4 <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184a:	f7ff fb4b 	bl	8000ee4 <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1c8      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800185c:	4ba1      	ldr	r3, [pc, #644]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800185e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001860:	2202      	movs	r2, #2
 8001862:	4013      	ands	r3, r2
 8001864:	d0f1      	beq.n	800184a <HAL_RCC_OscConfig+0x3ee>
 8001866:	e018      	b.n	800189a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001868:	4b9e      	ldr	r3, [pc, #632]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800186a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800186c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800186e:	2101      	movs	r1, #1
 8001870:	438a      	bics	r2, r1
 8001872:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff fb36 	bl	8000ee4 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff fb31 	bl	8000ee4 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1ae      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001890:	4b94      	ldr	r3, [pc, #592]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001894:	2202      	movs	r2, #2
 8001896:	4013      	ands	r3, r2
 8001898:	d1f1      	bne.n	800187e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2204      	movs	r2, #4
 80018a0:	4013      	ands	r3, r2
 80018a2:	d100      	bne.n	80018a6 <HAL_RCC_OscConfig+0x44a>
 80018a4:	e0ae      	b.n	8001a04 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2023      	movs	r0, #35	@ 0x23
 80018a8:	183b      	adds	r3, r7, r0
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ae:	4b8d      	ldr	r3, [pc, #564]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80018b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	055b      	lsls	r3, r3, #21
 80018b6:	4013      	ands	r3, r2
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b8a      	ldr	r3, [pc, #552]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80018bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018be:	4b89      	ldr	r3, [pc, #548]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80018c0:	2180      	movs	r1, #128	@ 0x80
 80018c2:	0549      	lsls	r1, r1, #21
 80018c4:	430a      	orrs	r2, r1
 80018c6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80018c8:	183b      	adds	r3, r7, r0
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	4b88      	ldr	r3, [pc, #544]	@ (8001af0 <HAL_RCC_OscConfig+0x694>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	d11a      	bne.n	8001910 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018da:	4b85      	ldr	r3, [pc, #532]	@ (8001af0 <HAL_RCC_OscConfig+0x694>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b84      	ldr	r3, [pc, #528]	@ (8001af0 <HAL_RCC_OscConfig+0x694>)
 80018e0:	2180      	movs	r1, #128	@ 0x80
 80018e2:	0049      	lsls	r1, r1, #1
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fafc 	bl	8000ee4 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f2:	f7ff faf7 	bl	8000ee4 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	@ 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e174      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	4b7a      	ldr	r3, [pc, #488]	@ (8001af0 <HAL_RCC_OscConfig+0x694>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4013      	ands	r3, r2
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	429a      	cmp	r2, r3
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x4d0>
 800191c:	4b71      	ldr	r3, [pc, #452]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800191e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001920:	4b70      	ldr	r3, [pc, #448]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001922:	2180      	movs	r1, #128	@ 0x80
 8001924:	0049      	lsls	r1, r1, #1
 8001926:	430a      	orrs	r2, r1
 8001928:	651a      	str	r2, [r3, #80]	@ 0x50
 800192a:	e031      	b.n	8001990 <HAL_RCC_OscConfig+0x534>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10c      	bne.n	800194e <HAL_RCC_OscConfig+0x4f2>
 8001934:	4b6b      	ldr	r3, [pc, #428]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001936:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001938:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800193a:	496c      	ldr	r1, [pc, #432]	@ (8001aec <HAL_RCC_OscConfig+0x690>)
 800193c:	400a      	ands	r2, r1
 800193e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001940:	4b68      	ldr	r3, [pc, #416]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001944:	4b67      	ldr	r3, [pc, #412]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001946:	496b      	ldr	r1, [pc, #428]	@ (8001af4 <HAL_RCC_OscConfig+0x698>)
 8001948:	400a      	ands	r2, r1
 800194a:	651a      	str	r2, [r3, #80]	@ 0x50
 800194c:	e020      	b.n	8001990 <HAL_RCC_OscConfig+0x534>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	23a0      	movs	r3, #160	@ 0xa0
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	429a      	cmp	r2, r3
 8001958:	d10e      	bne.n	8001978 <HAL_RCC_OscConfig+0x51c>
 800195a:	4b62      	ldr	r3, [pc, #392]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800195c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800195e:	4b61      	ldr	r3, [pc, #388]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001960:	2180      	movs	r1, #128	@ 0x80
 8001962:	00c9      	lsls	r1, r1, #3
 8001964:	430a      	orrs	r2, r1
 8001966:	651a      	str	r2, [r3, #80]	@ 0x50
 8001968:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800196a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800196c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800196e:	2180      	movs	r1, #128	@ 0x80
 8001970:	0049      	lsls	r1, r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	651a      	str	r2, [r3, #80]	@ 0x50
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0x534>
 8001978:	4b5a      	ldr	r3, [pc, #360]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800197a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800197c:	4b59      	ldr	r3, [pc, #356]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800197e:	495b      	ldr	r1, [pc, #364]	@ (8001aec <HAL_RCC_OscConfig+0x690>)
 8001980:	400a      	ands	r2, r1
 8001982:	651a      	str	r2, [r3, #80]	@ 0x50
 8001984:	4b57      	ldr	r3, [pc, #348]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001986:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001988:	4b56      	ldr	r3, [pc, #344]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 800198a:	495a      	ldr	r1, [pc, #360]	@ (8001af4 <HAL_RCC_OscConfig+0x698>)
 800198c:	400a      	ands	r2, r1
 800198e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d015      	beq.n	80019c4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001998:	f7ff faa4 	bl	8000ee4 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff fa9f 	bl	8000ee4 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	4a52      	ldr	r2, [pc, #328]	@ (8001af8 <HAL_RCC_OscConfig+0x69c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e11b      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019b6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80019b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4013      	ands	r3, r2
 80019c0:	d0ef      	beq.n	80019a2 <HAL_RCC_OscConfig+0x546>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff fa8e 	bl	8000ee4 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019cc:	e009      	b.n	80019e2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff fa89 	bl	8000ee4 <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	4a47      	ldr	r2, [pc, #284]	@ (8001af8 <HAL_RCC_OscConfig+0x69c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e105      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019e2:	4b40      	ldr	r3, [pc, #256]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80019e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d1ef      	bne.n	80019ce <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019ee:	2323      	movs	r3, #35	@ 0x23
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80019fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019fc:	4b39      	ldr	r3, [pc, #228]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 80019fe:	493f      	ldr	r1, [pc, #252]	@ (8001afc <HAL_RCC_OscConfig+0x6a0>)
 8001a00:	400a      	ands	r2, r1
 8001a02:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d049      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d026      	beq.n	8001a64 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a16:	4b33      	ldr	r3, [pc, #204]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	4b32      	ldr	r3, [pc, #200]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	4b30      	ldr	r3, [pc, #192]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a26:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a2e:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <HAL_RCC_OscConfig+0x6a4>)
 8001a30:	6a1a      	ldr	r2, [r3, #32]
 8001a32:	4b33      	ldr	r3, [pc, #204]	@ (8001b00 <HAL_RCC_OscConfig+0x6a4>)
 8001a34:	2180      	movs	r1, #128	@ 0x80
 8001a36:	0189      	lsls	r1, r1, #6
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fa52 	bl	8000ee4 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a46:	f7ff fa4d 	bl	8000ee4 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0ca      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a58:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d0f1      	beq.n	8001a46 <HAL_RCC_OscConfig+0x5ea>
 8001a62:	e01e      	b.n	8001aa2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	438a      	bics	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <HAL_RCC_OscConfig+0x6a4>)
 8001a72:	6a1a      	ldr	r2, [r3, #32]
 8001a74:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <HAL_RCC_OscConfig+0x6a4>)
 8001a76:	4923      	ldr	r1, [pc, #140]	@ (8001b04 <HAL_RCC_OscConfig+0x6a8>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fa32 	bl	8000ee4 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a86:	f7ff fa2d 	bl	8000ee4 <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0aa      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a98:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d1f1      	bne.n	8001a86 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d100      	bne.n	8001aac <HAL_RCC_OscConfig+0x650>
 8001aaa:	e09f      	b.n	8001bec <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d100      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x658>
 8001ab2:	e078      	b.n	8001ba6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d159      	bne.n	8001b70 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <HAL_RCC_OscConfig+0x688>)
 8001ac2:	4911      	ldr	r1, [pc, #68]	@ (8001b08 <HAL_RCC_OscConfig+0x6ac>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa0c 	bl	8000ee4 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ad0:	e01c      	b.n	8001b0c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff fa07 	bl	8000ee4 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d915      	bls.n	8001b0c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e084      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	ffff1fff 	.word	0xffff1fff
 8001aec:	fffffeff 	.word	0xfffffeff
 8001af0:	40007000 	.word	0x40007000
 8001af4:	fffffbff 	.word	0xfffffbff
 8001af8:	00001388 	.word	0x00001388
 8001afc:	efffffff 	.word	0xefffffff
 8001b00:	40010000 	.word	0x40010000
 8001b04:	ffffdfff 	.word	0xffffdfff
 8001b08:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf8 <HAL_RCC_OscConfig+0x79c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	049b      	lsls	r3, r3, #18
 8001b14:	4013      	ands	r3, r2
 8001b16:	d1dc      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b18:	4b37      	ldr	r3, [pc, #220]	@ (8001bf8 <HAL_RCC_OscConfig+0x79c>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4a37      	ldr	r2, [pc, #220]	@ (8001bfc <HAL_RCC_OscConfig+0x7a0>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b30:	431a      	orrs	r2, r3
 8001b32:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <HAL_RCC_OscConfig+0x79c>)
 8001b34:	430a      	orrs	r2, r1
 8001b36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b38:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf8 <HAL_RCC_OscConfig+0x79c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <HAL_RCC_OscConfig+0x79c>)
 8001b3e:	2180      	movs	r1, #128	@ 0x80
 8001b40:	0449      	lsls	r1, r1, #17
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff f9cd 	bl	8000ee4 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f9c8 	bl	8000ee4 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e045      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b62:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <HAL_RCC_OscConfig+0x79c>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	049b      	lsls	r3, r3, #18
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x6f4>
 8001b6e:	e03d      	b.n	8001bec <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_RCC_OscConfig+0x79c>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <HAL_RCC_OscConfig+0x79c>)
 8001b76:	4922      	ldr	r1, [pc, #136]	@ (8001c00 <HAL_RCC_OscConfig+0x7a4>)
 8001b78:	400a      	ands	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f9b2 	bl	8000ee4 <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b86:	f7ff f9ad 	bl	8000ee4 <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e02a      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b98:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <HAL_RCC_OscConfig+0x79c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	049b      	lsls	r3, r3, #18
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x72a>
 8001ba4:	e022      	b.n	8001bec <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e01d      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_RCC_OscConfig+0x79c>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	025b      	lsls	r3, r3, #9
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d10f      	bne.n	8001be8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	23f0      	movs	r3, #240	@ 0xf0
 8001bcc:	039b      	lsls	r3, r3, #14
 8001bce:	401a      	ands	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	23c0      	movs	r3, #192	@ 0xc0
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	401a      	ands	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b00a      	add	sp, #40	@ 0x28
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	ff02ffff 	.word	0xff02ffff
 8001c00:	feffffff 	.word	0xfeffffff

08001c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b5b0      	push	{r4, r5, r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e128      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b96      	ldr	r3, [pc, #600]	@ (8001e74 <HAL_RCC_ClockConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d91e      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b93      	ldr	r3, [pc, #588]	@ (8001e74 <HAL_RCC_ClockConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	4b90      	ldr	r3, [pc, #576]	@ (8001e74 <HAL_RCC_ClockConfig+0x270>)
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c38:	f7ff f954 	bl	8000ee4 <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c40:	e009      	b.n	8001c56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c42:	f7ff f94f 	bl	8000ee4 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	4a8a      	ldr	r2, [pc, #552]	@ (8001e78 <HAL_RCC_ClockConfig+0x274>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e109      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b87      	ldr	r3, [pc, #540]	@ (8001e74 <HAL_RCC_ClockConfig+0x270>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1ee      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6e:	4b83      	ldr	r3, [pc, #524]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	22f0      	movs	r2, #240	@ 0xf0
 8001c74:	4393      	bics	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d100      	bne.n	8001c8e <HAL_RCC_ClockConfig+0x8a>
 8001c8c:	e089      	b.n	8001da2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c96:	4b79      	ldr	r3, [pc, #484]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	029b      	lsls	r3, r3, #10
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d120      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0e1      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cae:	4b73      	ldr	r3, [pc, #460]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	049b      	lsls	r3, r3, #18
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d114      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0d5      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d109      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0ca      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cd4:	4b69      	ldr	r3, [pc, #420]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0c2      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce4:	4b65      	ldr	r3, [pc, #404]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	4393      	bics	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4b62      	ldr	r3, [pc, #392]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf8:	f7ff f8f4 	bl	8000ee4 <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d111      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7ff f8eb 	bl	8000ee4 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a58      	ldr	r2, [pc, #352]	@ (8001e78 <HAL_RCC_ClockConfig+0x274>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0a5      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d1e:	4b57      	ldr	r3, [pc, #348]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	220c      	movs	r2, #12
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d1ef      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x106>
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d111      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d34:	e009      	b.n	8001d4a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d36:	f7ff f8d5 	bl	8000ee4 <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4a4d      	ldr	r2, [pc, #308]	@ (8001e78 <HAL_RCC_ClockConfig+0x274>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e08f      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	220c      	movs	r2, #12
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b0c      	cmp	r3, #12
 8001d54:	d1ef      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x132>
 8001d56:	e024      	b.n	8001da2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d11b      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d60:	e009      	b.n	8001d76 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d62:	f7ff f8bf 	bl	8000ee4 <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	4a42      	ldr	r2, [pc, #264]	@ (8001e78 <HAL_RCC_ClockConfig+0x274>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e079      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d76:	4b41      	ldr	r3, [pc, #260]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d1ef      	bne.n	8001d62 <HAL_RCC_ClockConfig+0x15e>
 8001d82:	e00e      	b.n	8001da2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d84:	f7ff f8ae 	bl	8000ee4 <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e78 <HAL_RCC_ClockConfig+0x274>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e068      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d98:	4b38      	ldr	r3, [pc, #224]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	220c      	movs	r2, #12
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da2:	4b34      	ldr	r3, [pc, #208]	@ (8001e74 <HAL_RCC_ClockConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d21e      	bcs.n	8001dee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db0:	4b30      	ldr	r3, [pc, #192]	@ (8001e74 <HAL_RCC_ClockConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	4393      	bics	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <HAL_RCC_ClockConfig+0x270>)
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dc2:	f7ff f88f 	bl	8000ee4 <HAL_GetTick>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	e009      	b.n	8001de0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dcc:	f7ff f88a 	bl	8000ee4 <HAL_GetTick>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	4a28      	ldr	r2, [pc, #160]	@ (8001e78 <HAL_RCC_ClockConfig+0x274>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e044      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de0:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <HAL_RCC_ClockConfig+0x270>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d1ee      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2204      	movs	r2, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d009      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df8:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4a20      	ldr	r2, [pc, #128]	@ (8001e80 <HAL_RCC_ClockConfig+0x27c>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2208      	movs	r2, #8
 8001e12:	4013      	ands	r3, r2
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e16:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001e84 <HAL_RCC_ClockConfig+0x280>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	00da      	lsls	r2, r3, #3
 8001e26:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e2c:	f000 f832 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001e30:	0001      	movs	r1, r0
 8001e32:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <HAL_RCC_ClockConfig+0x278>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	220f      	movs	r2, #15
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	4a12      	ldr	r2, [pc, #72]	@ (8001e88 <HAL_RCC_ClockConfig+0x284>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	000a      	movs	r2, r1
 8001e42:	40da      	lsrs	r2, r3
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <HAL_RCC_ClockConfig+0x288>)
 8001e46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <HAL_RCC_ClockConfig+0x28c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	250b      	movs	r5, #11
 8001e4e:	197c      	adds	r4, r7, r5
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff f801 	bl	8000e58 <HAL_InitTick>
 8001e56:	0003      	movs	r3, r0
 8001e58:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e5a:	197b      	adds	r3, r7, r5
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e62:	197b      	adds	r3, r7, r5
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bdb0      	pop	{r4, r5, r7, pc}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	40022000 	.word	0x40022000
 8001e78:	00001388 	.word	0x00001388
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	fffff8ff 	.word	0xfffff8ff
 8001e84:	ffffc7ff 	.word	0xffffc7ff
 8001e88:	08003bc0 	.word	0x08003bc0
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	b5b0      	push	{r4, r5, r7, lr}
 8001e96:	b08e      	sub	sp, #56	@ 0x38
 8001e98:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x138>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d014      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8001eaa:	d900      	bls.n	8001eae <HAL_RCC_GetSysClockFreq+0x1a>
 8001eac:	e07b      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x112>
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x24>
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d00b      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x3a>
 8001eb6:	e076      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001eb8:	4b44      	ldr	r3, [pc, #272]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x138>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d002      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ec2:	4b43      	ldr	r3, [pc, #268]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ec4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ec6:	e07c      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ec8:	4b42      	ldr	r3, [pc, #264]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001eca:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ecc:	e079      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ece:	4b42      	ldr	r3, [pc, #264]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ed2:	e076      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed6:	0c9a      	lsrs	r2, r3, #18
 8001ed8:	230f      	movs	r3, #15
 8001eda:	401a      	ands	r2, r3
 8001edc:	4b3f      	ldr	r3, [pc, #252]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x148>)
 8001ede:	5c9b      	ldrb	r3, [r3, r2]
 8001ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	0d9a      	lsrs	r2, r3, #22
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	3301      	adds	r3, #1
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eee:	4b37      	ldr	r3, [pc, #220]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x138>)
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	025b      	lsls	r3, r3, #9
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d01a      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	4a35      	ldr	r2, [pc, #212]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f04:	2300      	movs	r3, #0
 8001f06:	69b8      	ldr	r0, [r7, #24]
 8001f08:	69f9      	ldr	r1, [r7, #28]
 8001f0a:	f7fe fa93 	bl	8000434 <__aeabi_lmul>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	000b      	movs	r3, r1
 8001f12:	0010      	movs	r0, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f7fe fa67 	bl	80003f4 <__aeabi_uldivmod>
 8001f26:	0002      	movs	r2, r0
 8001f28:	000b      	movs	r3, r1
 8001f2a:	0013      	movs	r3, r2
 8001f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f2e:	e037      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f30:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x138>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2210      	movs	r2, #16
 8001f36:	4013      	ands	r3, r2
 8001f38:	d01a      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4a23      	ldr	r2, [pc, #140]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f44:	2300      	movs	r3, #0
 8001f46:	68b8      	ldr	r0, [r7, #8]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	f7fe fa73 	bl	8000434 <__aeabi_lmul>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	000b      	movs	r3, r1
 8001f52:	0010      	movs	r0, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f7fe fa47 	bl	80003f4 <__aeabi_uldivmod>
 8001f66:	0002      	movs	r2, r0
 8001f68:	000b      	movs	r3, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f6e:	e017      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f72:	0018      	movs	r0, r3
 8001f74:	2300      	movs	r3, #0
 8001f76:	0019      	movs	r1, r3
 8001f78:	4a16      	ldr	r2, [pc, #88]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f7fe fa5a 	bl	8000434 <__aeabi_lmul>
 8001f80:	0002      	movs	r2, r0
 8001f82:	000b      	movs	r3, r1
 8001f84:	0010      	movs	r0, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	001c      	movs	r4, r3
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	001d      	movs	r5, r3
 8001f90:	0022      	movs	r2, r4
 8001f92:	002b      	movs	r3, r5
 8001f94:	f7fe fa2e 	bl	80003f4 <__aeabi_uldivmod>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	000b      	movs	r3, r1
 8001f9c:	0013      	movs	r3, r2
 8001f9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fa2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001fa4:	e00d      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x138>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	0b5b      	lsrs	r3, r3, #13
 8001fac:	2207      	movs	r2, #7
 8001fae:	4013      	ands	r3, r2
 8001fb0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	0212      	lsls	r2, r2, #8
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001fc0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b00e      	add	sp, #56	@ 0x38
 8001fca:	bdb0      	pop	{r4, r5, r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	003d0900 	.word	0x003d0900
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200
 8001fdc:	08003bd8 	.word	0x08003bd8

08001fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	@ (8001ff0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff8:	f7ff fff2 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8001ffc:	0001      	movs	r1, r0
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	2207      	movs	r2, #7
 8002006:	4013      	ands	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_RCC_GetPCLK1Freq+0x28>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	40d9      	lsrs	r1, r3
 800200e:	000b      	movs	r3, r1
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	40021000 	.word	0x40021000
 800201c:	08003bd0 	.word	0x08003bd0

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002024:	f7ff ffdc 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002028:	0001      	movs	r1, r0
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	2207      	movs	r2, #7
 8002032:	4013      	ands	r3, r2
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	40d9      	lsrs	r1, r3
 800203a:	000b      	movs	r3, r1
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	40021000 	.word	0x40021000
 8002048:	08003bd0 	.word	0x08003bd0

0800204c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002054:	2317      	movs	r3, #23
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2220      	movs	r2, #32
 8002062:	4013      	ands	r3, r2
 8002064:	d106      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	2380      	movs	r3, #128	@ 0x80
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	4013      	ands	r3, r2
 8002070:	d100      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002072:	e104      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002074:	4bb9      	ldr	r3, [pc, #740]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	055b      	lsls	r3, r3, #21
 800207c:	4013      	ands	r3, r2
 800207e:	d10a      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	4bb6      	ldr	r3, [pc, #728]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002084:	4bb5      	ldr	r3, [pc, #724]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002086:	2180      	movs	r1, #128	@ 0x80
 8002088:	0549      	lsls	r1, r1, #21
 800208a:	430a      	orrs	r2, r1
 800208c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800208e:	2317      	movs	r3, #23
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	4bb2      	ldr	r3, [pc, #712]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	@ 0x80
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4013      	ands	r3, r2
 80020a0:	d11a      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a2:	4baf      	ldr	r3, [pc, #700]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4bae      	ldr	r3, [pc, #696]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	0049      	lsls	r1, r1, #1
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b0:	f7fe ff18 	bl	8000ee4 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe ff13 	bl	8000ee4 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	@ 0x64
 80020c6:	d901      	bls.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e143      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4ba4      	ldr	r3, [pc, #656]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80020d8:	4ba0      	ldr	r3, [pc, #640]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	23c0      	movs	r3, #192	@ 0xc0
 80020de:	039b      	lsls	r3, r3, #14
 80020e0:	4013      	ands	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	23c0      	movs	r3, #192	@ 0xc0
 80020ea:	039b      	lsls	r3, r3, #14
 80020ec:	4013      	ands	r3, r2
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	23c0      	movs	r3, #192	@ 0xc0
 80020fa:	039b      	lsls	r3, r3, #14
 80020fc:	4013      	ands	r3, r2
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d013      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	23c0      	movs	r3, #192	@ 0xc0
 800210a:	029b      	lsls	r3, r3, #10
 800210c:	401a      	ands	r2, r3
 800210e:	23c0      	movs	r3, #192	@ 0xc0
 8002110:	029b      	lsls	r3, r3, #10
 8002112:	429a      	cmp	r2, r3
 8002114:	d10a      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002116:	4b91      	ldr	r3, [pc, #580]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	@ 0x80
 800211c:	029b      	lsls	r3, r3, #10
 800211e:	401a      	ands	r2, r3
 8002120:	2380      	movs	r3, #128	@ 0x80
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	429a      	cmp	r2, r3
 8002126:	d101      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e113      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800212c:	4b8b      	ldr	r3, [pc, #556]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800212e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002130:	23c0      	movs	r3, #192	@ 0xc0
 8002132:	029b      	lsls	r3, r3, #10
 8002134:	4013      	ands	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d049      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	23c0      	movs	r3, #192	@ 0xc0
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	4013      	ands	r3, r2
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	429a      	cmp	r2, r3
 800214c:	d004      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2220      	movs	r2, #32
 8002154:	4013      	ands	r3, r2
 8002156:	d10d      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	23c0      	movs	r3, #192	@ 0xc0
 800215e:	029b      	lsls	r3, r3, #10
 8002160:	4013      	ands	r3, r2
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d034      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4013      	ands	r3, r2
 8002172:	d02e      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002174:	4b79      	ldr	r3, [pc, #484]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002178:	4a7a      	ldr	r2, [pc, #488]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800217a:	4013      	ands	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800217e:	4b77      	ldr	r3, [pc, #476]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002180:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002182:	4b76      	ldr	r3, [pc, #472]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002184:	2180      	movs	r1, #128	@ 0x80
 8002186:	0309      	lsls	r1, r1, #12
 8002188:	430a      	orrs	r2, r1
 800218a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800218c:	4b73      	ldr	r3, [pc, #460]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800218e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002190:	4b72      	ldr	r3, [pc, #456]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002192:	4975      	ldr	r1, [pc, #468]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002194:	400a      	ands	r2, r1
 8002196:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002198:	4b70      	ldr	r3, [pc, #448]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4013      	ands	r3, r2
 80021a6:	d014      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe9c 	bl	8000ee4 <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021b0:	e009      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe fe97 	bl	8000ee4 <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	4a6b      	ldr	r2, [pc, #428]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0c6      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021c6:	4b65      	ldr	r3, [pc, #404]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d0ef      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	4013      	ands	r3, r2
 80021dc:	d01f      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	23c0      	movs	r3, #192	@ 0xc0
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	401a      	ands	r2, r3
 80021e8:	23c0      	movs	r3, #192	@ 0xc0
 80021ea:	029b      	lsls	r3, r3, #10
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d10c      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80021f0:	4b5a      	ldr	r3, [pc, #360]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a5e      	ldr	r2, [pc, #376]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	23c0      	movs	r3, #192	@ 0xc0
 8002200:	039b      	lsls	r3, r3, #14
 8002202:	401a      	ands	r2, r3
 8002204:	4b55      	ldr	r3, [pc, #340]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	4b54      	ldr	r3, [pc, #336]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800220c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	23c0      	movs	r3, #192	@ 0xc0
 8002214:	029b      	lsls	r3, r3, #10
 8002216:	401a      	ands	r2, r3
 8002218:	4b50      	ldr	r3, [pc, #320]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800221a:	430a      	orrs	r2, r1
 800221c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2220      	movs	r2, #32
 8002224:	4013      	ands	r3, r2
 8002226:	d01f      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	23c0      	movs	r3, #192	@ 0xc0
 800222e:	029b      	lsls	r3, r3, #10
 8002230:	401a      	ands	r2, r3
 8002232:	23c0      	movs	r3, #192	@ 0xc0
 8002234:	029b      	lsls	r3, r3, #10
 8002236:	429a      	cmp	r2, r3
 8002238:	d10c      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800223a:	4b48      	ldr	r3, [pc, #288]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a4c      	ldr	r2, [pc, #304]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	23c0      	movs	r3, #192	@ 0xc0
 800224a:	039b      	lsls	r3, r3, #14
 800224c:	401a      	ands	r2, r3
 800224e:	4b43      	ldr	r3, [pc, #268]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	4b41      	ldr	r3, [pc, #260]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002256:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	23c0      	movs	r3, #192	@ 0xc0
 800225e:	029b      	lsls	r3, r3, #10
 8002260:	401a      	ands	r2, r3
 8002262:	4b3e      	ldr	r3, [pc, #248]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002264:	430a      	orrs	r2, r1
 8002266:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002268:	2317      	movs	r3, #23
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d105      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002272:	4b3a      	ldr	r3, [pc, #232]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002276:	4b39      	ldr	r3, [pc, #228]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002278:	493e      	ldr	r1, [pc, #248]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800227a:	400a      	ands	r2, r1
 800227c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2201      	movs	r2, #1
 8002284:	4013      	ands	r3, r2
 8002286:	d009      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002288:	4b34      	ldr	r3, [pc, #208]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228c:	2203      	movs	r2, #3
 800228e:	4393      	bics	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	4b31      	ldr	r3, [pc, #196]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002298:	430a      	orrs	r2, r1
 800229a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2202      	movs	r2, #2
 80022a2:	4013      	ands	r3, r2
 80022a4:	d009      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a6:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	220c      	movs	r2, #12
 80022ac:	4393      	bics	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	4b29      	ldr	r3, [pc, #164]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022b6:	430a      	orrs	r2, r1
 80022b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2204      	movs	r2, #4
 80022c0:	4013      	ands	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022c4:	4b25      	ldr	r3, [pc, #148]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	4b22      	ldr	r3, [pc, #136]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2208      	movs	r2, #8
 80022de:	4013      	ands	r3, r2
 80022e0:	d009      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022e2:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	4a25      	ldr	r2, [pc, #148]	@ (800237c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002302:	4b16      	ldr	r3, [pc, #88]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	4a17      	ldr	r2, [pc, #92]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002308:	4013      	ands	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	4b12      	ldr	r3, [pc, #72]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002312:	430a      	orrs	r2, r1
 8002314:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2240      	movs	r2, #64	@ 0x40
 800231c:	4013      	ands	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002320:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002324:	4a16      	ldr	r2, [pc, #88]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002326:	4013      	ands	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800232e:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002330:	430a      	orrs	r2, r1
 8002332:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2280      	movs	r2, #128	@ 0x80
 800233a:	4013      	ands	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800233e:	4b07      	ldr	r3, [pc, #28]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	4a10      	ldr	r2, [pc, #64]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002344:	4013      	ands	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800234e:	430a      	orrs	r2, r1
 8002350:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b006      	add	sp, #24
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	fffcffff 	.word	0xfffcffff
 8002368:	fff7ffff 	.word	0xfff7ffff
 800236c:	00001388 	.word	0x00001388
 8002370:	ffcfffff 	.word	0xffcfffff
 8002374:	efffffff 	.word	0xefffffff
 8002378:	fffff3ff 	.word	0xfffff3ff
 800237c:	ffffcfff 	.word	0xffffcfff
 8002380:	fbffffff 	.word	0xfbffffff
 8002384:	fff3ffff 	.word	0xfff3ffff

08002388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e032      	b.n	8002400 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2239      	movs	r2, #57	@ 0x39
 800239e:	5c9b      	ldrb	r3, [r3, r2]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d107      	bne.n	80023b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2238      	movs	r2, #56	@ 0x38
 80023aa:	2100      	movs	r1, #0
 80023ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7fe fc29 	bl	8000c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2239      	movs	r2, #57	@ 0x39
 80023ba:	2102      	movs	r1, #2
 80023bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	0019      	movs	r1, r3
 80023c8:	0010      	movs	r0, r2
 80023ca:	f000 fc09 	bl	8002be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	223e      	movs	r2, #62	@ 0x3e
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	223a      	movs	r2, #58	@ 0x3a
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	223b      	movs	r2, #59	@ 0x3b
 80023e2:	2101      	movs	r1, #1
 80023e4:	5499      	strb	r1, [r3, r2]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	223c      	movs	r2, #60	@ 0x3c
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	223d      	movs	r2, #61	@ 0x3d
 80023f2:	2101      	movs	r1, #1
 80023f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2239      	movs	r2, #57	@ 0x39
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2239      	movs	r2, #57	@ 0x39
 8002414:	5c9b      	ldrb	r3, [r3, r2]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d001      	beq.n	8002420 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e033      	b.n	8002488 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2239      	movs	r2, #57	@ 0x39
 8002424:	2102      	movs	r1, #2
 8002426:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	@ 0x80
 800242e:	05db      	lsls	r3, r3, #23
 8002430:	429a      	cmp	r2, r3
 8002432:	d00e      	beq.n	8002452 <HAL_TIM_Base_Start+0x4a>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a15      	ldr	r2, [pc, #84]	@ (8002490 <HAL_TIM_Base_Start+0x88>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_TIM_Base_Start+0x4a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a14      	ldr	r2, [pc, #80]	@ (8002494 <HAL_TIM_Base_Start+0x8c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d004      	beq.n	8002452 <HAL_TIM_Base_Start+0x4a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <HAL_TIM_Base_Start+0x90>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d111      	bne.n	8002476 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2207      	movs	r2, #7
 800245a:	4013      	ands	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b06      	cmp	r3, #6
 8002462:	d010      	beq.n	8002486 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2101      	movs	r1, #1
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002474:	e007      	b.n	8002486 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2101      	movs	r1, #1
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b004      	add	sp, #16
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40000400 	.word	0x40000400
 8002494:	40010800 	.word	0x40010800
 8002498:	40011400 	.word	0x40011400

0800249c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <HAL_TIM_Base_Stop+0x38>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_Base_Stop+0x24>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	438a      	bics	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2239      	movs	r2, #57	@ 0x39
 80024c4:	2101      	movs	r1, #1
 80024c6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b002      	add	sp, #8
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	00001111 	.word	0x00001111

080024d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e032      	b.n	8002550 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2239      	movs	r2, #57	@ 0x39
 80024ee:	5c9b      	ldrb	r3, [r3, r2]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d107      	bne.n	8002506 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2238      	movs	r2, #56	@ 0x38
 80024fa:	2100      	movs	r1, #0
 80024fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f829 	bl	8002558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2239      	movs	r2, #57	@ 0x39
 800250a:	2102      	movs	r1, #2
 800250c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	0019      	movs	r1, r3
 8002518:	0010      	movs	r0, r2
 800251a:	f000 fb61 	bl	8002be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	223e      	movs	r2, #62	@ 0x3e
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	223a      	movs	r2, #58	@ 0x3a
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	223b      	movs	r2, #59	@ 0x3b
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	223c      	movs	r2, #60	@ 0x3c
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	223d      	movs	r2, #61	@ 0x3d
 8002542:	2101      	movs	r1, #1
 8002544:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2239      	movs	r2, #57	@ 0x39
 800254a:	2101      	movs	r1, #1
 800254c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	b002      	add	sp, #8
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002560:	46c0      	nop			@ (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d108      	bne.n	800258a <HAL_TIM_PWM_Start+0x22>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	223a      	movs	r2, #58	@ 0x3a
 800257c:	5c9b      	ldrb	r3, [r3, r2]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	1e5a      	subs	r2, r3, #1
 8002584:	4193      	sbcs	r3, r2
 8002586:	b2db      	uxtb	r3, r3
 8002588:	e01f      	b.n	80025ca <HAL_TIM_PWM_Start+0x62>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d108      	bne.n	80025a2 <HAL_TIM_PWM_Start+0x3a>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	223b      	movs	r2, #59	@ 0x3b
 8002594:	5c9b      	ldrb	r3, [r3, r2]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	4193      	sbcs	r3, r2
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	e013      	b.n	80025ca <HAL_TIM_PWM_Start+0x62>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d108      	bne.n	80025ba <HAL_TIM_PWM_Start+0x52>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	223c      	movs	r2, #60	@ 0x3c
 80025ac:	5c9b      	ldrb	r3, [r3, r2]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	1e5a      	subs	r2, r3, #1
 80025b4:	4193      	sbcs	r3, r2
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	e007      	b.n	80025ca <HAL_TIM_PWM_Start+0x62>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	223d      	movs	r2, #61	@ 0x3d
 80025be:	5c9b      	ldrb	r3, [r3, r2]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	1e5a      	subs	r2, r3, #1
 80025c6:	4193      	sbcs	r3, r2
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e052      	b.n	8002678 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d104      	bne.n	80025e2 <HAL_TIM_PWM_Start+0x7a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	223a      	movs	r2, #58	@ 0x3a
 80025dc:	2102      	movs	r1, #2
 80025de:	5499      	strb	r1, [r3, r2]
 80025e0:	e013      	b.n	800260a <HAL_TIM_PWM_Start+0xa2>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d104      	bne.n	80025f2 <HAL_TIM_PWM_Start+0x8a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	223b      	movs	r2, #59	@ 0x3b
 80025ec:	2102      	movs	r1, #2
 80025ee:	5499      	strb	r1, [r3, r2]
 80025f0:	e00b      	b.n	800260a <HAL_TIM_PWM_Start+0xa2>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d104      	bne.n	8002602 <HAL_TIM_PWM_Start+0x9a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	223c      	movs	r2, #60	@ 0x3c
 80025fc:	2102      	movs	r1, #2
 80025fe:	5499      	strb	r1, [r3, r2]
 8002600:	e003      	b.n	800260a <HAL_TIM_PWM_Start+0xa2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	223d      	movs	r2, #61	@ 0x3d
 8002606:	2102      	movs	r1, #2
 8002608:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6839      	ldr	r1, [r7, #0]
 8002610:	2201      	movs	r2, #1
 8002612:	0018      	movs	r0, r3
 8002614:	f000 fce0 	bl	8002fd8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	@ 0x80
 800261e:	05db      	lsls	r3, r3, #23
 8002620:	429a      	cmp	r2, r3
 8002622:	d00e      	beq.n	8002642 <HAL_TIM_PWM_Start+0xda>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <HAL_TIM_PWM_Start+0x118>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d009      	beq.n	8002642 <HAL_TIM_PWM_Start+0xda>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <HAL_TIM_PWM_Start+0x11c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d004      	beq.n	8002642 <HAL_TIM_PWM_Start+0xda>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a12      	ldr	r2, [pc, #72]	@ (8002688 <HAL_TIM_PWM_Start+0x120>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d111      	bne.n	8002666 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2207      	movs	r2, #7
 800264a:	4013      	ands	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b06      	cmp	r3, #6
 8002652:	d010      	beq.n	8002676 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002664:	e007      	b.n	8002676 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b004      	add	sp, #16
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40000400 	.word	0x40000400
 8002684:	40010800 	.word	0x40010800
 8002688:	40011400 	.word	0x40011400

0800268c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d124      	bne.n	80026ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2202      	movs	r2, #2
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d11d      	bne.n	80026ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2203      	movs	r2, #3
 80026b6:	4252      	negs	r2, r2
 80026b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2203      	movs	r2, #3
 80026c8:	4013      	ands	r3, r2
 80026ca:	d004      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 fa6e 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 80026d4:	e007      	b.n	80026e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fa61 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 fa6d 	bl	8002bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2204      	movs	r2, #4
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d125      	bne.n	8002746 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2204      	movs	r2, #4
 8002702:	4013      	ands	r3, r2
 8002704:	2b04      	cmp	r3, #4
 8002706:	d11e      	bne.n	8002746 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2205      	movs	r2, #5
 800270e:	4252      	negs	r2, r2
 8002710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	23c0      	movs	r3, #192	@ 0xc0
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4013      	ands	r3, r2
 8002724:	d004      	beq.n	8002730 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 fa41 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 800272e:	e007      	b.n	8002740 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	0018      	movs	r0, r3
 8002734:	f000 fa34 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f000 fa40 	bl	8002bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2208      	movs	r2, #8
 800274e:	4013      	ands	r3, r2
 8002750:	2b08      	cmp	r3, #8
 8002752:	d124      	bne.n	800279e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2208      	movs	r2, #8
 800275c:	4013      	ands	r3, r2
 800275e:	2b08      	cmp	r3, #8
 8002760:	d11d      	bne.n	800279e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2209      	movs	r2, #9
 8002768:	4252      	negs	r2, r2
 800276a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2204      	movs	r2, #4
 8002770:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2203      	movs	r2, #3
 800277a:	4013      	ands	r3, r2
 800277c:	d004      	beq.n	8002788 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f000 fa15 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 8002786:	e007      	b.n	8002798 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	0018      	movs	r0, r3
 800278c:	f000 fa08 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f000 fa14 	bl	8002bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2210      	movs	r2, #16
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d125      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2210      	movs	r2, #16
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d11e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2211      	movs	r2, #17
 80027c0:	4252      	negs	r2, r2
 80027c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2208      	movs	r2, #8
 80027c8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	23c0      	movs	r3, #192	@ 0xc0
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4013      	ands	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 f9e8 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e007      	b.n	80027f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 f9db 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 f9e7 	bl	8002bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2201      	movs	r2, #1
 8002800:	4013      	ands	r3, r2
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10f      	bne.n	8002826 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	4013      	ands	r3, r2
 8002810:	2b01      	cmp	r3, #1
 8002812:	d108      	bne.n	8002826 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	4252      	negs	r2, r2
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 f9b5 	bl	8002b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2240      	movs	r2, #64	@ 0x40
 800282e:	4013      	ands	r3, r2
 8002830:	2b40      	cmp	r3, #64	@ 0x40
 8002832:	d10f      	bne.n	8002854 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2240      	movs	r2, #64	@ 0x40
 800283c:	4013      	ands	r3, r2
 800283e:	2b40      	cmp	r3, #64	@ 0x40
 8002840:	d108      	bne.n	8002854 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2241      	movs	r2, #65	@ 0x41
 8002848:	4252      	negs	r2, r2
 800284a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0018      	movs	r0, r3
 8002850:	f000 f9be 	bl	8002bd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002854:	46c0      	nop			@ (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2317      	movs	r3, #23
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2238      	movs	r2, #56	@ 0x38
 8002874:	5c9b      	ldrb	r3, [r3, r2]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_TIM_PWM_ConfigChannel+0x22>
 800287a:	2302      	movs	r3, #2
 800287c:	e0ad      	b.n	80029da <HAL_TIM_PWM_ConfigChannel+0x17e>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2238      	movs	r2, #56	@ 0x38
 8002882:	2101      	movs	r1, #1
 8002884:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d100      	bne.n	800288e <HAL_TIM_PWM_ConfigChannel+0x32>
 800288c:	e076      	b.n	800297c <HAL_TIM_PWM_ConfigChannel+0x120>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d900      	bls.n	8002896 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002894:	e095      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d04e      	beq.n	800293a <HAL_TIM_PWM_ConfigChannel+0xde>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d900      	bls.n	80028a4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80028a2:	e08e      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d021      	beq.n	80028f4 <HAL_TIM_PWM_ConfigChannel+0x98>
 80028b0:	e087      	b.n	80029c2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	0011      	movs	r1, r2
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f9ee 	bl	8002c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2108      	movs	r1, #8
 80028cc:	430a      	orrs	r2, r1
 80028ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2104      	movs	r1, #4
 80028dc:	438a      	bics	r2, r1
 80028de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6999      	ldr	r1, [r3, #24]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	619a      	str	r2, [r3, #24]
      break;
 80028f2:	e06b      	b.n	80029cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 fa09 	bl	8002d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2180      	movs	r1, #128	@ 0x80
 800290e:	0109      	lsls	r1, r1, #4
 8002910:	430a      	orrs	r2, r1
 8002912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4931      	ldr	r1, [pc, #196]	@ (80029e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002920:	400a      	ands	r2, r1
 8002922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6999      	ldr	r1, [r3, #24]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	021a      	lsls	r2, r3, #8
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	619a      	str	r2, [r3, #24]
      break;
 8002938:	e048      	b.n	80029cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	0011      	movs	r1, r2
 8002942:	0018      	movs	r0, r3
 8002944:	f000 fa28 	bl	8002d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2108      	movs	r1, #8
 8002954:	430a      	orrs	r2, r1
 8002956:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69da      	ldr	r2, [r3, #28]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2104      	movs	r1, #4
 8002964:	438a      	bics	r2, r1
 8002966:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69d9      	ldr	r1, [r3, #28]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	61da      	str	r2, [r3, #28]
      break;
 800297a:	e027      	b.n	80029cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	0011      	movs	r1, r2
 8002984:	0018      	movs	r0, r3
 8002986:	f000 fa47 	bl	8002e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2180      	movs	r1, #128	@ 0x80
 8002996:	0109      	lsls	r1, r1, #4
 8002998:	430a      	orrs	r2, r1
 800299a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	490f      	ldr	r1, [pc, #60]	@ (80029e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69d9      	ldr	r1, [r3, #28]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	021a      	lsls	r2, r3, #8
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	61da      	str	r2, [r3, #28]
      break;
 80029c0:	e004      	b.n	80029cc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80029c2:	2317      	movs	r3, #23
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
      break;
 80029ca:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2238      	movs	r2, #56	@ 0x38
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

  return status;
 80029d4:	2317      	movs	r3, #23
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	781b      	ldrb	r3, [r3, #0]
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b006      	add	sp, #24
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	fffffbff 	.word	0xfffffbff

080029e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f2:	230f      	movs	r3, #15
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2238      	movs	r2, #56	@ 0x38
 80029fe:	5c9b      	ldrb	r3, [r3, r2]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_TIM_ConfigClockSource+0x20>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e0bc      	b.n	8002b82 <HAL_TIM_ConfigClockSource+0x19a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2238      	movs	r2, #56	@ 0x38
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2239      	movs	r2, #57	@ 0x39
 8002a14:	2102      	movs	r1, #2
 8002a16:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2277      	movs	r2, #119	@ 0x77
 8002a24:	4393      	bics	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4a58      	ldr	r2, [pc, #352]	@ (8002b8c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	0192      	lsls	r2, r2, #6
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0xde>
 8002a44:	2280      	movs	r2, #128	@ 0x80
 8002a46:	0192      	lsls	r2, r2, #6
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d900      	bls.n	8002a4e <HAL_TIM_ConfigClockSource+0x66>
 8002a4c:	e088      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x178>
 8002a4e:	2280      	movs	r2, #128	@ 0x80
 8002a50:	0152      	lsls	r2, r2, #5
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d100      	bne.n	8002a58 <HAL_TIM_ConfigClockSource+0x70>
 8002a56:	e088      	b.n	8002b6a <HAL_TIM_ConfigClockSource+0x182>
 8002a58:	2280      	movs	r2, #128	@ 0x80
 8002a5a:	0152      	lsls	r2, r2, #5
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d900      	bls.n	8002a62 <HAL_TIM_ConfigClockSource+0x7a>
 8002a60:	e07e      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x178>
 8002a62:	2b70      	cmp	r3, #112	@ 0x70
 8002a64:	d018      	beq.n	8002a98 <HAL_TIM_ConfigClockSource+0xb0>
 8002a66:	d900      	bls.n	8002a6a <HAL_TIM_ConfigClockSource+0x82>
 8002a68:	e07a      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x178>
 8002a6a:	2b60      	cmp	r3, #96	@ 0x60
 8002a6c:	d04f      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x126>
 8002a6e:	d900      	bls.n	8002a72 <HAL_TIM_ConfigClockSource+0x8a>
 8002a70:	e076      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x178>
 8002a72:	2b50      	cmp	r3, #80	@ 0x50
 8002a74:	d03b      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x106>
 8002a76:	d900      	bls.n	8002a7a <HAL_TIM_ConfigClockSource+0x92>
 8002a78:	e072      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x178>
 8002a7a:	2b40      	cmp	r3, #64	@ 0x40
 8002a7c:	d057      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x146>
 8002a7e:	d900      	bls.n	8002a82 <HAL_TIM_ConfigClockSource+0x9a>
 8002a80:	e06e      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x178>
 8002a82:	2b30      	cmp	r3, #48	@ 0x30
 8002a84:	d063      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x166>
 8002a86:	d86b      	bhi.n	8002b60 <HAL_TIM_ConfigClockSource+0x178>
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d060      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x166>
 8002a8c:	d868      	bhi.n	8002b60 <HAL_TIM_ConfigClockSource+0x178>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d05d      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x166>
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d05b      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x166>
 8002a96:	e063      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aa8:	f000 fa76 	bl	8002f98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2277      	movs	r2, #119	@ 0x77
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]
      break;
 8002ac4:	e052      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ad6:	f000 fa5f 	bl	8002f98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2180      	movs	r1, #128	@ 0x80
 8002ae6:	01c9      	lsls	r1, r1, #7
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
      break;
 8002aec:	e03e      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afa:	001a      	movs	r2, r3
 8002afc:	f000 f9d2 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2150      	movs	r1, #80	@ 0x50
 8002b06:	0018      	movs	r0, r3
 8002b08:	f000 fa2c 	bl	8002f64 <TIM_ITRx_SetConfig>
      break;
 8002b0c:	e02e      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	f000 f9f0 	bl	8002f00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2160      	movs	r1, #96	@ 0x60
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 fa1c 	bl	8002f64 <TIM_ITRx_SetConfig>
      break;
 8002b2c:	e01e      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	f000 f9b2 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2140      	movs	r1, #64	@ 0x40
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 fa0c 	bl	8002f64 <TIM_ITRx_SetConfig>
      break;
 8002b4c:	e00e      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0019      	movs	r1, r3
 8002b58:	0010      	movs	r0, r2
 8002b5a:	f000 fa03 	bl	8002f64 <TIM_ITRx_SetConfig>
      break;
 8002b5e:	e005      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002b60:	230f      	movs	r3, #15
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
      break;
 8002b68:	e000      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002b6a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2239      	movs	r2, #57	@ 0x39
 8002b70:	2101      	movs	r1, #1
 8002b72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2238      	movs	r2, #56	@ 0x38
 8002b78:	2100      	movs	r1, #0
 8002b7a:	5499      	strb	r1, [r3, r2]

  return status;
 8002b7c:	230f      	movs	r3, #15
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	781b      	ldrb	r3, [r3, #0]
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b004      	add	sp, #16
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			@ (mov r8, r8)
 8002b8c:	ffff00ff 	.word	0xffff00ff

08002b90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b98:	46c0      	nop			@ (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ba8:	46c0      	nop			@ (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bb8:	46c0      	nop			@ (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	05db      	lsls	r3, r3, #23
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d00b      	beq.n	8002c12 <TIM_Base_SetConfig+0x32>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a23      	ldr	r2, [pc, #140]	@ (8002c8c <TIM_Base_SetConfig+0xac>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <TIM_Base_SetConfig+0x32>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a22      	ldr	r2, [pc, #136]	@ (8002c90 <TIM_Base_SetConfig+0xb0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <TIM_Base_SetConfig+0x32>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a21      	ldr	r2, [pc, #132]	@ (8002c94 <TIM_Base_SetConfig+0xb4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d108      	bne.n	8002c24 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2270      	movs	r2, #112	@ 0x70
 8002c16:	4393      	bics	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	05db      	lsls	r3, r3, #23
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d00b      	beq.n	8002c46 <TIM_Base_SetConfig+0x66>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a16      	ldr	r2, [pc, #88]	@ (8002c8c <TIM_Base_SetConfig+0xac>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d007      	beq.n	8002c46 <TIM_Base_SetConfig+0x66>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a15      	ldr	r2, [pc, #84]	@ (8002c90 <TIM_Base_SetConfig+0xb0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <TIM_Base_SetConfig+0x66>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <TIM_Base_SetConfig+0xb4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d108      	bne.n	8002c58 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a13      	ldr	r2, [pc, #76]	@ (8002c98 <TIM_Base_SetConfig+0xb8>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2280      	movs	r2, #128	@ 0x80
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	001a      	movs	r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	615a      	str	r2, [r3, #20]
}
 8002c84:	46c0      	nop			@ (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b004      	add	sp, #16
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40010800 	.word	0x40010800
 8002c94:	40011400 	.word	0x40011400
 8002c98:	fffffcff 	.word	0xfffffcff

08002c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	2201      	movs	r2, #1
 8002cac:	4393      	bics	r3, r2
 8002cae:	001a      	movs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2270      	movs	r2, #112	@ 0x70
 8002cca:	4393      	bics	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	4393      	bics	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	621a      	str	r2, [r3, #32]
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b006      	add	sp, #24
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	2210      	movs	r2, #16
 8002d24:	4393      	bics	r3, r2
 8002d26:	001a      	movs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a13      	ldr	r2, [pc, #76]	@ (8002d90 <TIM_OC2_SetConfig+0x7c>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4a12      	ldr	r2, [pc, #72]	@ (8002d94 <TIM_OC2_SetConfig+0x80>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	4393      	bics	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	621a      	str	r2, [r3, #32]
}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b006      	add	sp, #24
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	ffff8fff 	.word	0xffff8fff
 8002d94:	fffffcff 	.word	0xfffffcff

08002d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e10 <TIM_OC3_SetConfig+0x78>)
 8002da8:	401a      	ands	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2270      	movs	r2, #112	@ 0x70
 8002dc4:	4393      	bics	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2203      	movs	r2, #3
 8002dcc:	4393      	bics	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e14 <TIM_OC3_SetConfig+0x7c>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	621a      	str	r2, [r3, #32]
}
 8002e08:	46c0      	nop			@ (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b006      	add	sp, #24
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	fffffeff 	.word	0xfffffeff
 8002e14:	fffffdff 	.word	0xfffffdff

08002e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4a1b      	ldr	r2, [pc, #108]	@ (8002e94 <TIM_OC4_SetConfig+0x7c>)
 8002e28:	401a      	ands	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a15      	ldr	r2, [pc, #84]	@ (8002e98 <TIM_OC4_SetConfig+0x80>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <TIM_OC4_SetConfig+0x84>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ea0 <TIM_OC4_SetConfig+0x88>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	031b      	lsls	r3, r3, #12
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b006      	add	sp, #24
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	ffffefff 	.word	0xffffefff
 8002e98:	ffff8fff 	.word	0xffff8fff
 8002e9c:	fffffcff 	.word	0xfffffcff
 8002ea0:	ffffdfff 	.word	0xffffdfff

08002ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4393      	bics	r3, r2
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	22f0      	movs	r2, #240	@ 0xf0
 8002ece:	4393      	bics	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	220a      	movs	r2, #10
 8002ee0:	4393      	bics	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	621a      	str	r2, [r3, #32]
}
 8002ef8:	46c0      	nop			@ (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b006      	add	sp, #24
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	2210      	movs	r2, #16
 8002f12:	4393      	bics	r3, r2
 8002f14:	001a      	movs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <TIM_TI2_ConfigInputStage+0x60>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	031b      	lsls	r3, r3, #12
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	22a0      	movs	r2, #160	@ 0xa0
 8002f3c:	4393      	bics	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b006      	add	sp, #24
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	ffff0fff 	.word	0xffff0fff

08002f64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2270      	movs	r2, #112	@ 0x70
 8002f78:	4393      	bics	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	2207      	movs	r2, #7
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	609a      	str	r2, [r3, #8]
}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	4a09      	ldr	r2, [pc, #36]	@ (8002fd4 <TIM_ETR_SetConfig+0x3c>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	021a      	lsls	r2, r3, #8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	46c0      	nop			@ (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b006      	add	sp, #24
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	ffff00ff 	.word	0xffff00ff

08002fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	221f      	movs	r2, #31
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2201      	movs	r2, #1
 8002fec:	409a      	lsls	r2, r3
 8002fee:	0013      	movs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	43d2      	mvns	r2, r2
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	211f      	movs	r1, #31
 8003008:	400b      	ands	r3, r1
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4099      	lsls	r1, r3
 800300e:	000b      	movs	r3, r1
 8003010:	431a      	orrs	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	621a      	str	r2, [r3, #32]
}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b006      	add	sp, #24
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2238      	movs	r2, #56	@ 0x38
 800302e:	5c9b      	ldrb	r3, [r3, r2]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003034:	2302      	movs	r3, #2
 8003036:	e047      	b.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2238      	movs	r2, #56	@ 0x38
 800303c:	2101      	movs	r1, #1
 800303e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2239      	movs	r2, #57	@ 0x39
 8003044:	2102      	movs	r1, #2
 8003046:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2270      	movs	r2, #112	@ 0x70
 800305c:	4393      	bics	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	05db      	lsls	r3, r3, #23
 800307a:	429a      	cmp	r2, r3
 800307c:	d00e      	beq.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a13      	ldr	r2, [pc, #76]	@ (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a11      	ldr	r2, [pc, #68]	@ (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a10      	ldr	r2, [pc, #64]	@ (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d10c      	bne.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2280      	movs	r2, #128	@ 0x80
 80030a0:	4393      	bics	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2239      	movs	r2, #57	@ 0x39
 80030ba:	2101      	movs	r1, #1
 80030bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2238      	movs	r2, #56	@ 0x38
 80030c2:	2100      	movs	r1, #0
 80030c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b004      	add	sp, #16
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40010800 	.word	0x40010800
 80030d8:	40011400 	.word	0x40011400

080030dc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2238      	movs	r2, #56	@ 0x38
 80030ea:	5c9b      	ldrb	r3, [r3, r2]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_TIMEx_RemapConfig+0x18>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e00c      	b.n	800310e <HAL_TIMEx_RemapConfig+0x32>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2238      	movs	r2, #56	@ 0x38
 80030f8:	2101      	movs	r1, #1
 80030fa:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2238      	movs	r2, #56	@ 0x38
 8003108:	2100      	movs	r1, #0
 800310a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b002      	add	sp, #8
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e044      	b.n	80031b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2278      	movs	r2, #120	@ 0x78
 8003136:	2100      	movs	r1, #0
 8003138:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f7fd fdfd 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2224      	movs	r2, #36	@ 0x24
 8003146:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2101      	movs	r1, #1
 8003154:	438a      	bics	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0018      	movs	r0, r3
 800315c:	f000 f830 	bl	80031c0 <UART_SetConfig>
 8003160:	0003      	movs	r3, r0
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e024      	b.n	80031b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 fac1 	bl	80036fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	490d      	ldr	r1, [pc, #52]	@ (80031bc <HAL_UART_Init+0xa4>)
 8003186:	400a      	ands	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	212a      	movs	r1, #42	@ 0x2a
 8003196:	438a      	bics	r2, r1
 8003198:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 fb59 	bl	8003864 <UART_CheckIdleState>
 80031b2:	0003      	movs	r3, r0
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	ffffb7ff 	.word	0xffffb7ff

080031c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c0:	b5b0      	push	{r4, r5, r7, lr}
 80031c2:	b08e      	sub	sp, #56	@ 0x38
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c8:	231a      	movs	r3, #26
 80031ca:	2218      	movs	r2, #24
 80031cc:	189b      	adds	r3, r3, r2
 80031ce:	19db      	adds	r3, r3, r7
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4ac3      	ldr	r2, [pc, #780]	@ (8003500 <UART_SetConfig+0x340>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4abe      	ldr	r2, [pc, #760]	@ (8003504 <UART_SetConfig+0x344>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4ab8      	ldr	r2, [pc, #736]	@ (8003508 <UART_SetConfig+0x348>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003230:	4313      	orrs	r3, r2
 8003232:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	4ab4      	ldr	r2, [pc, #720]	@ (800350c <UART_SetConfig+0x34c>)
 800323c:	4013      	ands	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4ab0      	ldr	r2, [pc, #704]	@ (8003510 <UART_SetConfig+0x350>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d131      	bne.n	80032b8 <UART_SetConfig+0xf8>
 8003254:	4baf      	ldr	r3, [pc, #700]	@ (8003514 <UART_SetConfig+0x354>)
 8003256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003258:	2203      	movs	r2, #3
 800325a:	4013      	ands	r3, r2
 800325c:	2b03      	cmp	r3, #3
 800325e:	d01d      	beq.n	800329c <UART_SetConfig+0xdc>
 8003260:	d823      	bhi.n	80032aa <UART_SetConfig+0xea>
 8003262:	2b02      	cmp	r3, #2
 8003264:	d00c      	beq.n	8003280 <UART_SetConfig+0xc0>
 8003266:	d820      	bhi.n	80032aa <UART_SetConfig+0xea>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <UART_SetConfig+0xb2>
 800326c:	2b01      	cmp	r3, #1
 800326e:	d00e      	beq.n	800328e <UART_SetConfig+0xce>
 8003270:	e01b      	b.n	80032aa <UART_SetConfig+0xea>
 8003272:	231b      	movs	r3, #27
 8003274:	2218      	movs	r2, #24
 8003276:	189b      	adds	r3, r3, r2
 8003278:	19db      	adds	r3, r3, r7
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e0b4      	b.n	80033ea <UART_SetConfig+0x22a>
 8003280:	231b      	movs	r3, #27
 8003282:	2218      	movs	r2, #24
 8003284:	189b      	adds	r3, r3, r2
 8003286:	19db      	adds	r3, r3, r7
 8003288:	2202      	movs	r2, #2
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e0ad      	b.n	80033ea <UART_SetConfig+0x22a>
 800328e:	231b      	movs	r3, #27
 8003290:	2218      	movs	r2, #24
 8003292:	189b      	adds	r3, r3, r2
 8003294:	19db      	adds	r3, r3, r7
 8003296:	2204      	movs	r2, #4
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e0a6      	b.n	80033ea <UART_SetConfig+0x22a>
 800329c:	231b      	movs	r3, #27
 800329e:	2218      	movs	r2, #24
 80032a0:	189b      	adds	r3, r3, r2
 80032a2:	19db      	adds	r3, r3, r7
 80032a4:	2208      	movs	r2, #8
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e09f      	b.n	80033ea <UART_SetConfig+0x22a>
 80032aa:	231b      	movs	r3, #27
 80032ac:	2218      	movs	r2, #24
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	19db      	adds	r3, r3, r7
 80032b2:	2210      	movs	r2, #16
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e098      	b.n	80033ea <UART_SetConfig+0x22a>
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a96      	ldr	r2, [pc, #600]	@ (8003518 <UART_SetConfig+0x358>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d131      	bne.n	8003326 <UART_SetConfig+0x166>
 80032c2:	4b94      	ldr	r3, [pc, #592]	@ (8003514 <UART_SetConfig+0x354>)
 80032c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c6:	220c      	movs	r2, #12
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d01d      	beq.n	800330a <UART_SetConfig+0x14a>
 80032ce:	d823      	bhi.n	8003318 <UART_SetConfig+0x158>
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d00c      	beq.n	80032ee <UART_SetConfig+0x12e>
 80032d4:	d820      	bhi.n	8003318 <UART_SetConfig+0x158>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <UART_SetConfig+0x120>
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d00e      	beq.n	80032fc <UART_SetConfig+0x13c>
 80032de:	e01b      	b.n	8003318 <UART_SetConfig+0x158>
 80032e0:	231b      	movs	r3, #27
 80032e2:	2218      	movs	r2, #24
 80032e4:	189b      	adds	r3, r3, r2
 80032e6:	19db      	adds	r3, r3, r7
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e07d      	b.n	80033ea <UART_SetConfig+0x22a>
 80032ee:	231b      	movs	r3, #27
 80032f0:	2218      	movs	r2, #24
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	19db      	adds	r3, r3, r7
 80032f6:	2202      	movs	r2, #2
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e076      	b.n	80033ea <UART_SetConfig+0x22a>
 80032fc:	231b      	movs	r3, #27
 80032fe:	2218      	movs	r2, #24
 8003300:	189b      	adds	r3, r3, r2
 8003302:	19db      	adds	r3, r3, r7
 8003304:	2204      	movs	r2, #4
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	e06f      	b.n	80033ea <UART_SetConfig+0x22a>
 800330a:	231b      	movs	r3, #27
 800330c:	2218      	movs	r2, #24
 800330e:	189b      	adds	r3, r3, r2
 8003310:	19db      	adds	r3, r3, r7
 8003312:	2208      	movs	r2, #8
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e068      	b.n	80033ea <UART_SetConfig+0x22a>
 8003318:	231b      	movs	r3, #27
 800331a:	2218      	movs	r2, #24
 800331c:	189b      	adds	r3, r3, r2
 800331e:	19db      	adds	r3, r3, r7
 8003320:	2210      	movs	r2, #16
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e061      	b.n	80033ea <UART_SetConfig+0x22a>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a7c      	ldr	r2, [pc, #496]	@ (800351c <UART_SetConfig+0x35c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d106      	bne.n	800333e <UART_SetConfig+0x17e>
 8003330:	231b      	movs	r3, #27
 8003332:	2218      	movs	r2, #24
 8003334:	189b      	adds	r3, r3, r2
 8003336:	19db      	adds	r3, r3, r7
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e055      	b.n	80033ea <UART_SetConfig+0x22a>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a77      	ldr	r2, [pc, #476]	@ (8003520 <UART_SetConfig+0x360>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d106      	bne.n	8003356 <UART_SetConfig+0x196>
 8003348:	231b      	movs	r3, #27
 800334a:	2218      	movs	r2, #24
 800334c:	189b      	adds	r3, r3, r2
 800334e:	19db      	adds	r3, r3, r7
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e049      	b.n	80033ea <UART_SetConfig+0x22a>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a6b      	ldr	r2, [pc, #428]	@ (8003508 <UART_SetConfig+0x348>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d13e      	bne.n	80033de <UART_SetConfig+0x21e>
 8003360:	4b6c      	ldr	r3, [pc, #432]	@ (8003514 <UART_SetConfig+0x354>)
 8003362:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003364:	23c0      	movs	r3, #192	@ 0xc0
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	4013      	ands	r3, r2
 800336a:	22c0      	movs	r2, #192	@ 0xc0
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	4293      	cmp	r3, r2
 8003370:	d027      	beq.n	80033c2 <UART_SetConfig+0x202>
 8003372:	22c0      	movs	r2, #192	@ 0xc0
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	4293      	cmp	r3, r2
 8003378:	d82a      	bhi.n	80033d0 <UART_SetConfig+0x210>
 800337a:	2280      	movs	r2, #128	@ 0x80
 800337c:	0112      	lsls	r2, r2, #4
 800337e:	4293      	cmp	r3, r2
 8003380:	d011      	beq.n	80033a6 <UART_SetConfig+0x1e6>
 8003382:	2280      	movs	r2, #128	@ 0x80
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	4293      	cmp	r3, r2
 8003388:	d822      	bhi.n	80033d0 <UART_SetConfig+0x210>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <UART_SetConfig+0x1d8>
 800338e:	2280      	movs	r2, #128	@ 0x80
 8003390:	00d2      	lsls	r2, r2, #3
 8003392:	4293      	cmp	r3, r2
 8003394:	d00e      	beq.n	80033b4 <UART_SetConfig+0x1f4>
 8003396:	e01b      	b.n	80033d0 <UART_SetConfig+0x210>
 8003398:	231b      	movs	r3, #27
 800339a:	2218      	movs	r2, #24
 800339c:	189b      	adds	r3, r3, r2
 800339e:	19db      	adds	r3, r3, r7
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e021      	b.n	80033ea <UART_SetConfig+0x22a>
 80033a6:	231b      	movs	r3, #27
 80033a8:	2218      	movs	r2, #24
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	19db      	adds	r3, r3, r7
 80033ae:	2202      	movs	r2, #2
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e01a      	b.n	80033ea <UART_SetConfig+0x22a>
 80033b4:	231b      	movs	r3, #27
 80033b6:	2218      	movs	r2, #24
 80033b8:	189b      	adds	r3, r3, r2
 80033ba:	19db      	adds	r3, r3, r7
 80033bc:	2204      	movs	r2, #4
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	e013      	b.n	80033ea <UART_SetConfig+0x22a>
 80033c2:	231b      	movs	r3, #27
 80033c4:	2218      	movs	r2, #24
 80033c6:	189b      	adds	r3, r3, r2
 80033c8:	19db      	adds	r3, r3, r7
 80033ca:	2208      	movs	r2, #8
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e00c      	b.n	80033ea <UART_SetConfig+0x22a>
 80033d0:	231b      	movs	r3, #27
 80033d2:	2218      	movs	r2, #24
 80033d4:	189b      	adds	r3, r3, r2
 80033d6:	19db      	adds	r3, r3, r7
 80033d8:	2210      	movs	r2, #16
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e005      	b.n	80033ea <UART_SetConfig+0x22a>
 80033de:	231b      	movs	r3, #27
 80033e0:	2218      	movs	r2, #24
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	19db      	adds	r3, r3, r7
 80033e6:	2210      	movs	r2, #16
 80033e8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a46      	ldr	r2, [pc, #280]	@ (8003508 <UART_SetConfig+0x348>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d000      	beq.n	80033f6 <UART_SetConfig+0x236>
 80033f4:	e09a      	b.n	800352c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033f6:	231b      	movs	r3, #27
 80033f8:	2218      	movs	r2, #24
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	19db      	adds	r3, r3, r7
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d01d      	beq.n	8003440 <UART_SetConfig+0x280>
 8003404:	dc20      	bgt.n	8003448 <UART_SetConfig+0x288>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d015      	beq.n	8003436 <UART_SetConfig+0x276>
 800340a:	dc1d      	bgt.n	8003448 <UART_SetConfig+0x288>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <UART_SetConfig+0x256>
 8003410:	2b02      	cmp	r3, #2
 8003412:	d005      	beq.n	8003420 <UART_SetConfig+0x260>
 8003414:	e018      	b.n	8003448 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003416:	f7fe fded 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 800341a:	0003      	movs	r3, r0
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800341e:	e01c      	b.n	800345a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003420:	4b3c      	ldr	r3, [pc, #240]	@ (8003514 <UART_SetConfig+0x354>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2210      	movs	r2, #16
 8003426:	4013      	ands	r3, r2
 8003428:	d002      	beq.n	8003430 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800342a:	4b3e      	ldr	r3, [pc, #248]	@ (8003524 <UART_SetConfig+0x364>)
 800342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800342e:	e014      	b.n	800345a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003430:	4b3d      	ldr	r3, [pc, #244]	@ (8003528 <UART_SetConfig+0x368>)
 8003432:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003434:	e011      	b.n	800345a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003436:	f7fe fd2d 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 800343a:	0003      	movs	r3, r0
 800343c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800343e:	e00c      	b.n	800345a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003446:	e008      	b.n	800345a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800344c:	231a      	movs	r3, #26
 800344e:	2218      	movs	r2, #24
 8003450:	189b      	adds	r3, r3, r2
 8003452:	19db      	adds	r3, r3, r7
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
        break;
 8003458:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800345a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d100      	bne.n	8003462 <UART_SetConfig+0x2a2>
 8003460:	e133      	b.n	80036ca <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	0013      	movs	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	189b      	adds	r3, r3, r2
 800346c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800346e:	429a      	cmp	r2, r3
 8003470:	d305      	bcc.n	800347e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800347a:	429a      	cmp	r2, r3
 800347c:	d906      	bls.n	800348c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800347e:	231a      	movs	r3, #26
 8003480:	2218      	movs	r2, #24
 8003482:	189b      	adds	r3, r3, r2
 8003484:	19db      	adds	r3, r3, r7
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e11e      	b.n	80036ca <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800348c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	6939      	ldr	r1, [r7, #16]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	000b      	movs	r3, r1
 800349a:	0e1b      	lsrs	r3, r3, #24
 800349c:	0010      	movs	r0, r2
 800349e:	0205      	lsls	r5, r0, #8
 80034a0:	431d      	orrs	r5, r3
 80034a2:	000b      	movs	r3, r1
 80034a4:	021c      	lsls	r4, r3, #8
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68b8      	ldr	r0, [r7, #8]
 80034b4:	68f9      	ldr	r1, [r7, #12]
 80034b6:	1900      	adds	r0, r0, r4
 80034b8:	4169      	adcs	r1, r5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f7fc ff94 	bl	80003f4 <__aeabi_uldivmod>
 80034cc:	0002      	movs	r2, r0
 80034ce:	000b      	movs	r3, r1
 80034d0:	0013      	movs	r3, r2
 80034d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d6:	23c0      	movs	r3, #192	@ 0xc0
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	429a      	cmp	r2, r3
 80034dc:	d309      	bcc.n	80034f2 <UART_SetConfig+0x332>
 80034de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	035b      	lsls	r3, r3, #13
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d204      	bcs.n	80034f2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ee:	60da      	str	r2, [r3, #12]
 80034f0:	e0eb      	b.n	80036ca <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80034f2:	231a      	movs	r3, #26
 80034f4:	2218      	movs	r2, #24
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	19db      	adds	r3, r3, r7
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e0e4      	b.n	80036ca <UART_SetConfig+0x50a>
 8003500:	efff69f3 	.word	0xefff69f3
 8003504:	ffffcfff 	.word	0xffffcfff
 8003508:	40004800 	.word	0x40004800
 800350c:	fffff4ff 	.word	0xfffff4ff
 8003510:	40013800 	.word	0x40013800
 8003514:	40021000 	.word	0x40021000
 8003518:	40004400 	.word	0x40004400
 800351c:	40004c00 	.word	0x40004c00
 8003520:	40005000 	.word	0x40005000
 8003524:	003d0900 	.word	0x003d0900
 8003528:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	429a      	cmp	r2, r3
 8003536:	d000      	beq.n	800353a <UART_SetConfig+0x37a>
 8003538:	e070      	b.n	800361c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800353a:	231b      	movs	r3, #27
 800353c:	2218      	movs	r2, #24
 800353e:	189b      	adds	r3, r3, r2
 8003540:	19db      	adds	r3, r3, r7
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d822      	bhi.n	800358e <UART_SetConfig+0x3ce>
 8003548:	009a      	lsls	r2, r3, #2
 800354a:	4b67      	ldr	r3, [pc, #412]	@ (80036e8 <UART_SetConfig+0x528>)
 800354c:	18d3      	adds	r3, r2, r3
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003552:	f7fe fd4f 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003556:	0003      	movs	r3, r0
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800355a:	e021      	b.n	80035a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800355c:	f7fe fd60 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 8003560:	0003      	movs	r3, r0
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003564:	e01c      	b.n	80035a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003566:	4b61      	ldr	r3, [pc, #388]	@ (80036ec <UART_SetConfig+0x52c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2210      	movs	r2, #16
 800356c:	4013      	ands	r3, r2
 800356e:	d002      	beq.n	8003576 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003570:	4b5f      	ldr	r3, [pc, #380]	@ (80036f0 <UART_SetConfig+0x530>)
 8003572:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003574:	e014      	b.n	80035a0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003576:	4b5f      	ldr	r3, [pc, #380]	@ (80036f4 <UART_SetConfig+0x534>)
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800357a:	e011      	b.n	80035a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357c:	f7fe fc8a 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8003580:	0003      	movs	r3, r0
 8003582:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003584:	e00c      	b.n	80035a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	2380      	movs	r3, #128	@ 0x80
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800358c:	e008      	b.n	80035a0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003592:	231a      	movs	r3, #26
 8003594:	2218      	movs	r2, #24
 8003596:	189b      	adds	r3, r3, r2
 8003598:	19db      	adds	r3, r3, r7
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
        break;
 800359e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d100      	bne.n	80035a8 <UART_SetConfig+0x3e8>
 80035a6:	e090      	b.n	80036ca <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035aa:	005a      	lsls	r2, r3, #1
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	18d2      	adds	r2, r2, r3
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	0019      	movs	r1, r3
 80035ba:	0010      	movs	r0, r2
 80035bc:	f7fc fda4 	bl	8000108 <__udivsi3>
 80035c0:	0003      	movs	r3, r0
 80035c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c6:	2b0f      	cmp	r3, #15
 80035c8:	d921      	bls.n	800360e <UART_SetConfig+0x44e>
 80035ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	025b      	lsls	r3, r3, #9
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d21c      	bcs.n	800360e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	200e      	movs	r0, #14
 80035da:	2418      	movs	r4, #24
 80035dc:	1903      	adds	r3, r0, r4
 80035de:	19db      	adds	r3, r3, r7
 80035e0:	210f      	movs	r1, #15
 80035e2:	438a      	bics	r2, r1
 80035e4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e8:	085b      	lsrs	r3, r3, #1
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2207      	movs	r2, #7
 80035ee:	4013      	ands	r3, r2
 80035f0:	b299      	uxth	r1, r3
 80035f2:	1903      	adds	r3, r0, r4
 80035f4:	19db      	adds	r3, r3, r7
 80035f6:	1902      	adds	r2, r0, r4
 80035f8:	19d2      	adds	r2, r2, r7
 80035fa:	8812      	ldrh	r2, [r2, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	1902      	adds	r2, r0, r4
 8003606:	19d2      	adds	r2, r2, r7
 8003608:	8812      	ldrh	r2, [r2, #0]
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	e05d      	b.n	80036ca <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800360e:	231a      	movs	r3, #26
 8003610:	2218      	movs	r2, #24
 8003612:	189b      	adds	r3, r3, r2
 8003614:	19db      	adds	r3, r3, r7
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e056      	b.n	80036ca <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800361c:	231b      	movs	r3, #27
 800361e:	2218      	movs	r2, #24
 8003620:	189b      	adds	r3, r3, r2
 8003622:	19db      	adds	r3, r3, r7
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b08      	cmp	r3, #8
 8003628:	d822      	bhi.n	8003670 <UART_SetConfig+0x4b0>
 800362a:	009a      	lsls	r2, r3, #2
 800362c:	4b32      	ldr	r3, [pc, #200]	@ (80036f8 <UART_SetConfig+0x538>)
 800362e:	18d3      	adds	r3, r2, r3
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003634:	f7fe fcde 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003638:	0003      	movs	r3, r0
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800363c:	e021      	b.n	8003682 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800363e:	f7fe fcef 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 8003642:	0003      	movs	r3, r0
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003646:	e01c      	b.n	8003682 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003648:	4b28      	ldr	r3, [pc, #160]	@ (80036ec <UART_SetConfig+0x52c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2210      	movs	r2, #16
 800364e:	4013      	ands	r3, r2
 8003650:	d002      	beq.n	8003658 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003652:	4b27      	ldr	r3, [pc, #156]	@ (80036f0 <UART_SetConfig+0x530>)
 8003654:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003656:	e014      	b.n	8003682 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003658:	4b26      	ldr	r3, [pc, #152]	@ (80036f4 <UART_SetConfig+0x534>)
 800365a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800365c:	e011      	b.n	8003682 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365e:	f7fe fc19 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8003662:	0003      	movs	r3, r0
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003666:	e00c      	b.n	8003682 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003668:	2380      	movs	r3, #128	@ 0x80
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800366e:	e008      	b.n	8003682 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003674:	231a      	movs	r3, #26
 8003676:	2218      	movs	r2, #24
 8003678:	189b      	adds	r3, r3, r2
 800367a:	19db      	adds	r3, r3, r7
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
        break;
 8003680:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	085a      	lsrs	r2, r3, #1
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	18d2      	adds	r2, r2, r3
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	0019      	movs	r1, r3
 8003698:	0010      	movs	r0, r2
 800369a:	f7fc fd35 	bl	8000108 <__udivsi3>
 800369e:	0003      	movs	r3, r0
 80036a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a4:	2b0f      	cmp	r3, #15
 80036a6:	d90a      	bls.n	80036be <UART_SetConfig+0x4fe>
 80036a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	025b      	lsls	r3, r3, #9
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d205      	bcs.n	80036be <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60da      	str	r2, [r3, #12]
 80036bc:	e005      	b.n	80036ca <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80036be:	231a      	movs	r3, #26
 80036c0:	2218      	movs	r2, #24
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	19db      	adds	r3, r3, r7
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	2200      	movs	r2, #0
 80036ce:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2200      	movs	r2, #0
 80036d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036d6:	231a      	movs	r3, #26
 80036d8:	2218      	movs	r2, #24
 80036da:	189b      	adds	r3, r3, r2
 80036dc:	19db      	adds	r3, r3, r7
 80036de:	781b      	ldrb	r3, [r3, #0]
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b00e      	add	sp, #56	@ 0x38
 80036e6:	bdb0      	pop	{r4, r5, r7, pc}
 80036e8:	08003be4 	.word	0x08003be4
 80036ec:	40021000 	.word	0x40021000
 80036f0:	003d0900 	.word	0x003d0900
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	08003c08 	.word	0x08003c08

080036fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	2201      	movs	r2, #1
 800370a:	4013      	ands	r3, r2
 800370c:	d00b      	beq.n	8003726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a4a      	ldr	r2, [pc, #296]	@ (8003840 <UART_AdvFeatureConfig+0x144>)
 8003716:	4013      	ands	r3, r2
 8003718:	0019      	movs	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	2202      	movs	r2, #2
 800372c:	4013      	ands	r3, r2
 800372e:	d00b      	beq.n	8003748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4a43      	ldr	r2, [pc, #268]	@ (8003844 <UART_AdvFeatureConfig+0x148>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	2204      	movs	r2, #4
 800374e:	4013      	ands	r3, r2
 8003750:	d00b      	beq.n	800376a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a3b      	ldr	r2, [pc, #236]	@ (8003848 <UART_AdvFeatureConfig+0x14c>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	2208      	movs	r2, #8
 8003770:	4013      	ands	r3, r2
 8003772:	d00b      	beq.n	800378c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a34      	ldr	r2, [pc, #208]	@ (800384c <UART_AdvFeatureConfig+0x150>)
 800377c:	4013      	ands	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	2210      	movs	r2, #16
 8003792:	4013      	ands	r3, r2
 8003794:	d00b      	beq.n	80037ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a2c      	ldr	r2, [pc, #176]	@ (8003850 <UART_AdvFeatureConfig+0x154>)
 800379e:	4013      	ands	r3, r2
 80037a0:	0019      	movs	r1, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	2220      	movs	r2, #32
 80037b4:	4013      	ands	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4a25      	ldr	r2, [pc, #148]	@ (8003854 <UART_AdvFeatureConfig+0x158>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	2240      	movs	r2, #64	@ 0x40
 80037d6:	4013      	ands	r3, r2
 80037d8:	d01d      	beq.n	8003816 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003858 <UART_AdvFeatureConfig+0x15c>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f6:	2380      	movs	r3, #128	@ 0x80
 80037f8:	035b      	lsls	r3, r3, #13
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d10b      	bne.n	8003816 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a15      	ldr	r2, [pc, #84]	@ (800385c <UART_AdvFeatureConfig+0x160>)
 8003806:	4013      	ands	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	2280      	movs	r2, #128	@ 0x80
 800381c:	4013      	ands	r3, r2
 800381e:	d00b      	beq.n	8003838 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4a0e      	ldr	r2, [pc, #56]	@ (8003860 <UART_AdvFeatureConfig+0x164>)
 8003828:	4013      	ands	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  }
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}
 8003840:	fffdffff 	.word	0xfffdffff
 8003844:	fffeffff 	.word	0xfffeffff
 8003848:	fffbffff 	.word	0xfffbffff
 800384c:	ffff7fff 	.word	0xffff7fff
 8003850:	ffffefff 	.word	0xffffefff
 8003854:	ffffdfff 	.word	0xffffdfff
 8003858:	ffefffff 	.word	0xffefffff
 800385c:	ff9fffff 	.word	0xff9fffff
 8003860:	fff7ffff 	.word	0xfff7ffff

08003864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b092      	sub	sp, #72	@ 0x48
 8003868:	af02      	add	r7, sp, #8
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2284      	movs	r2, #132	@ 0x84
 8003870:	2100      	movs	r1, #0
 8003872:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003874:	f7fd fb36 	bl	8000ee4 <HAL_GetTick>
 8003878:	0003      	movs	r3, r0
 800387a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2208      	movs	r2, #8
 8003884:	4013      	ands	r3, r2
 8003886:	2b08      	cmp	r3, #8
 8003888:	d12c      	bne.n	80038e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800388a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800388c:	2280      	movs	r2, #128	@ 0x80
 800388e:	0391      	lsls	r1, r2, #14
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4a46      	ldr	r2, [pc, #280]	@ (80039ac <UART_CheckIdleState+0x148>)
 8003894:	9200      	str	r2, [sp, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	f000 f88c 	bl	80039b4 <UART_WaitOnFlagUntilTimeout>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	d021      	beq.n	80038e4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a0:	f3ef 8310 	mrs	r3, PRIMASK
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038aa:	2301      	movs	r3, #1
 80038ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			@ (mov r8, r8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2180      	movs	r1, #128	@ 0x80
 80038c2:	438a      	bics	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2278      	movs	r2, #120	@ 0x78
 80038dc:	2100      	movs	r1, #0
 80038de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e05f      	b.n	80039a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2204      	movs	r2, #4
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d146      	bne.n	8003980 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f4:	2280      	movs	r2, #128	@ 0x80
 80038f6:	03d1      	lsls	r1, r2, #15
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4a2c      	ldr	r2, [pc, #176]	@ (80039ac <UART_CheckIdleState+0x148>)
 80038fc:	9200      	str	r2, [sp, #0]
 80038fe:	2200      	movs	r2, #0
 8003900:	f000 f858 	bl	80039b4 <UART_WaitOnFlagUntilTimeout>
 8003904:	1e03      	subs	r3, r0, #0
 8003906:	d03b      	beq.n	8003980 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003908:	f3ef 8310 	mrs	r3, PRIMASK
 800390c:	60fb      	str	r3, [r7, #12]
  return(result);
 800390e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003910:	637b      	str	r3, [r7, #52]	@ 0x34
 8003912:	2301      	movs	r3, #1
 8003914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f383 8810 	msr	PRIMASK, r3
}
 800391c:	46c0      	nop			@ (mov r8, r8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4921      	ldr	r1, [pc, #132]	@ (80039b0 <UART_CheckIdleState+0x14c>)
 800392a:	400a      	ands	r2, r1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f383 8810 	msr	PRIMASK, r3
}
 8003938:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393a:	f3ef 8310 	mrs	r3, PRIMASK
 800393e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003940:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003942:	633b      	str	r3, [r7, #48]	@ 0x30
 8003944:	2301      	movs	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	438a      	bics	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2280      	movs	r2, #128	@ 0x80
 8003970:	2120      	movs	r1, #32
 8003972:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2278      	movs	r2, #120	@ 0x78
 8003978:	2100      	movs	r1, #0
 800397a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e011      	b.n	80039a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2280      	movs	r2, #128	@ 0x80
 800398a:	2120      	movs	r1, #32
 800398c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2278      	movs	r2, #120	@ 0x78
 800399e:	2100      	movs	r1, #0
 80039a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b010      	add	sp, #64	@ 0x40
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	01ffffff 	.word	0x01ffffff
 80039b0:	fffffedf 	.word	0xfffffedf

080039b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	1dfb      	adds	r3, r7, #7
 80039c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c4:	e04b      	b.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	3301      	adds	r3, #1
 80039ca:	d048      	beq.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039cc:	f7fd fa8a 	bl	8000ee4 <HAL_GetTick>
 80039d0:	0002      	movs	r2, r0
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d302      	bcc.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e04b      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2204      	movs	r2, #4
 80039ee:	4013      	ands	r3, r2
 80039f0:	d035      	beq.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2208      	movs	r2, #8
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d111      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2208      	movs	r2, #8
 8003a06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f000 f83c 	bl	8003a88 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2284      	movs	r2, #132	@ 0x84
 8003a14:	2108      	movs	r1, #8
 8003a16:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2278      	movs	r2, #120	@ 0x78
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e02c      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	2380      	movs	r3, #128	@ 0x80
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	401a      	ands	r2, r3
 8003a30:	2380      	movs	r3, #128	@ 0x80
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d112      	bne.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2280      	movs	r2, #128	@ 0x80
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 f81f 	bl	8003a88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2284      	movs	r2, #132	@ 0x84
 8003a4e:	2120      	movs	r1, #32
 8003a50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2278      	movs	r2, #120	@ 0x78
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e00f      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	4013      	ands	r3, r2
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	425a      	negs	r2, r3
 8003a6e:	4153      	adcs	r3, r2
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	001a      	movs	r2, r3
 8003a74:	1dfb      	adds	r3, r7, #7
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d0a4      	beq.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b004      	add	sp, #16
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08e      	sub	sp, #56	@ 0x38
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a90:	f3ef 8310 	mrs	r3, PRIMASK
 8003a94:	617b      	str	r3, [r7, #20]
  return(result);
 8003a96:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f383 8810 	msr	PRIMASK, r3
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4926      	ldr	r1, [pc, #152]	@ (8003b4c <UART_EndRxTransfer+0xc4>)
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f383 8810 	msr	PRIMASK, r3
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	633b      	str	r3, [r7, #48]	@ 0x30
 8003acc:	2301      	movs	r3, #1
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	438a      	bics	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d118      	bne.n	8003b2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afc:	f3ef 8310 	mrs	r3, PRIMASK
 8003b00:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b06:	2301      	movs	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2110      	movs	r1, #16
 8003b1e:	438a      	bics	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f383 8810 	msr	PRIMASK, r3
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2280      	movs	r2, #128	@ 0x80
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b00e      	add	sp, #56	@ 0x38
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	fffffedf 	.word	0xfffffedf

08003b50 <memset>:
 8003b50:	0003      	movs	r3, r0
 8003b52:	1882      	adds	r2, r0, r2
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d100      	bne.n	8003b5a <memset+0xa>
 8003b58:	4770      	bx	lr
 8003b5a:	7019      	strb	r1, [r3, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	e7f9      	b.n	8003b54 <memset+0x4>

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	2600      	movs	r6, #0
 8003b64:	4c0c      	ldr	r4, [pc, #48]	@ (8003b98 <__libc_init_array+0x38>)
 8003b66:	4d0d      	ldr	r5, [pc, #52]	@ (8003b9c <__libc_init_array+0x3c>)
 8003b68:	1b64      	subs	r4, r4, r5
 8003b6a:	10a4      	asrs	r4, r4, #2
 8003b6c:	42a6      	cmp	r6, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	2600      	movs	r6, #0
 8003b72:	f000 f819 	bl	8003ba8 <_init>
 8003b76:	4c0a      	ldr	r4, [pc, #40]	@ (8003ba0 <__libc_init_array+0x40>)
 8003b78:	4d0a      	ldr	r5, [pc, #40]	@ (8003ba4 <__libc_init_array+0x44>)
 8003b7a:	1b64      	subs	r4, r4, r5
 8003b7c:	10a4      	asrs	r4, r4, #2
 8003b7e:	42a6      	cmp	r6, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	00b3      	lsls	r3, r6, #2
 8003b86:	58eb      	ldr	r3, [r5, r3]
 8003b88:	4798      	blx	r3
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	00b3      	lsls	r3, r6, #2
 8003b90:	58eb      	ldr	r3, [r5, r3]
 8003b92:	4798      	blx	r3
 8003b94:	3601      	adds	r6, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08003c34 	.word	0x08003c34
 8003b9c:	08003c34 	.word	0x08003c34
 8003ba0:	08003c38 	.word	0x08003c38
 8003ba4:	08003c34 	.word	0x08003c34

08003ba8 <_init>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr

08003bb4 <_fini>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr
